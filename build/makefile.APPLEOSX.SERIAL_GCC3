# This makefile can be used as a starting point for defining a 
# target-specific makefile.

#  The Trilinos/build directory has many pre-defined target-specific
#  makefiles, following the format:
#
#  makefile.$(TRILINOS_ARCH).$(TRILINOS_COMM)$(TRILINOS_ID).
#
#  For example, if we define (in the file TRILINOS_TARGET_DEFS):
#
#  TRILINOS_ARCH = LINUX
#  TRILINOS_COMM = SERIAL
#  TRILINOS_ID = _DEBUG
#
#  the file makefile.LINUX.SERIAL_DEBUG has the proper configuration to
#  build a serial version of the Trilinos libraries on most LINUX
#  platforms with proper configuration for debugging.  However, if a proper 
#  target-specific makefile does not exist for your machine, copy this file 
#  (makefile.template) to the desired target-specific makefile and edit it
#  to match your machines characteristics.

#  In this file you can re-define any variables that have already been defined
#  in $(TRILINOS_HOME)/build/makefile.defaults
#  You may also define a variety of special variables as listed below.


# Default environment variable definitions are defined in makefile.defaults

include $(TRILINOS_HOME)/build/makefile.defaults

######################## Change Default Values (if needed) ###################
# Any default values that are not appropriate for the target machine should
# be redefined here.

ARCH_CXXFLAGS := -O3
ARCH_CFLAGS   := -O3
ARCH_FFLAGS   := -O3

ARCH_LIBS = -lm -lg2c

#Define include directories (remember to use -Idirectory_name)

#MPI_INCLUDES =
ARCH_INCLUDES := $(MPI_INCLUDES) -I/usr/include/sys

#LIBMPI =
#ARCH_LIBS = $(MPI_LIBS) -lm

CC      := gcc3
CXX     := g++3
FC      := g77
RANLIB  := ranlib -s
LINKER  := $(CXX)
AR      := ar
ARFLAGS := rcv
LN      := ln -s

################## External Libraries ##########################

LIBBLAS   := /usr/local/lib/libblas.a
LIBLAPACK := /usr/local/lib/liblapack.a
LIBSPBLAS := /usr/local/lib/libspblas.a
LIBY12M   := /usr/local/lib/liby12m.a


############ Define additional variables as needed for each package ########

#### Epetra ####

# Epetra is sensitive to the following defined variables.
# Add -Dvariable_name to the EPETRA_ARCH_DEFINES to activate for a 
# given target machine.  For example:

# EPETRA_ARCH_DEFINES = -DEPETRA_NO_ERROR_REPORTS

# EPETRA_NO_ERROR_REPORTS - If turned on, Epetra will not print error 
#                           messages to standard error device.
#                           Otherwise, message will be printed when 
#                           errors occur.

# EPETRA_ADDRESS64BIT - If 64 bit memory addressing is used to build the 
#                       rest of Epetra, this variable should be defined 
#                       for proper building of the Epetra 
#                       Fortran and C wrapper functions.

# EPETRA_SIMULATE_BOOL - Some older C++ compilers do not support the
#                        bool data type.  Turning this flag on will 
#                        simulate bool with int.  Please note that if 
#                        this is turned on for a compiler that does 
#                        support bool, the code that calls Epetra must 
#                        also use int instead of bool.  Not doing so 
#                        is a cause of subtle incorrect behavior.

EPETRA_ARCH_DEFINES :=



#### AztecOO ####

# ML - Use ML with AztecOO (Not defined by default).
# SPARSEBLAS - Use Sparse BLAS with AztecOO (Defined by default).
# IFPACK - Use old IFPACK with AztecOO (Defined by default).
# AZ_COL_REORDER - Use experimental column reordering with AztecOO
#                  (Not defined by default).

AZTECOO_ARCH_DEFINES = 
