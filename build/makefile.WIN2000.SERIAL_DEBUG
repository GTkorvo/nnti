# Default environment variable definitions are defined in makefile.defaults
# 
include $(TRILINOS_HOME)/build/makefile.defaults
###
### This makefile is for use on win2000 systems using the compaq visual
### fortran compiler (f77 version 6.6) and intel C++ compiler (icl version 6.0).
### Other than adding timing routines, I had to modify no trilinos code.
### I did need to use a flag for the icl compiler that is not available
### for either MSV C++ 6.0 compiler (cl) or earlier versions of the icl
### compiler. Without this flag, about a dozen trilinos files would have
### to be modified to allow mulitiple "for (int i=0,..)" within the same
### scope.
###
### I assume that the cygwin utlities are installed so that a bash shell and 
### gnu unix utitilies are available.
###
### There are several things to keep in mind when using the windows
### compilers and lib tool (archiver) within the cygwin bash shell.
### Here is summary.
###
### 1. the windows compilers require a windows style path. This means
###   that a quoted backward slash path must be used:
###    "$(TRILINOS_HOME_WIN)\packages\anasazi\src" where
TRILINOS_HOME_WIN = d:\software\Trilinos
###
### 2. Object files are created with .obj AND libraries end with .lib
###    Roscoe suggested the folllowing obvious approach:
###
OBJ_EXT = obj
LIB_EXT = lib
###    and so every trilinos [M,m]akefile had to be updated. Note that
###    any executables created have .exe as the extension by default. 
###
### 3. I had to edit Epetra_Time.[cpp,h], Petra_Time.[cc,h] and
###    create a md_timer_win2000.c (needed for aztecoo). And so
###    I needed to use the following DEFINE to tell the preprocessor
###    to compile the appropriate code.
WINCOMP = ICL
###
### 4. The windows archiver "lib" is somewhat delicate. The /out:
LIB_WIN_FLAGS=/out:
###    flag cannot have any spaces between /out: and the library
###    name. Hence I edited every trilinos [M,m]akefile as follows
###    	$(AR) $(ARFLAGS) $(LIB_WIN_FLAGS)$(LIBPETRA) $(PETRA_OBJ)
###    Note that this flag creates the library and does NOT
###    append files to an existing library. To do the latter, you
###    you need to remove the /out: flag (but lib will complain
###    if the library does not exist). A sigh here but not a big
###    deal for trilinos because a library is created with all the
###    the object files at one time. Thank you.
AR=lib
ARFLAGS=
###
### 5. There is no "ranlib" (in fact, roscoe tells me that ranlib 
###    is no longer needed on most unix systems). I hence commented 
###    out the use of ranlib in every trilinos [M,m]akefile.
RANLIB=
###
### 6. Soft links "ln -s" are allowed by the cygwin bash shell but
###    the windows compilers and lib tool DO NOT resolve them. This
###    lead me to edit the main makefile as follows:
### libinstall:
###	@echo " "
###	@echo " "
###	@echo "--------------------------------------------------------------"
###	@echo "Building $(CUR_LIB) for the following target:" $(TRILINOS_TARGET)
###	@echo "--------------------------------------------------------------"
###	@echo " "
###	mkdir -p $(TRILINOS_HOME)/packages/$(CUR_SRCPATH)$(CUR_LIB)/obj/$(TRILINOS_TARGET)
###	cd $(TRILINOS_HOME)/packages/$(CUR_SRCPATH)$(CUR_LIB)/obj/$(TRILINOS_TARGET); \
###	rm -f Makefile *.[fch]*; \
###	cp  $(TRILINOS_HOME)/packages/$(CUR_SRCPATH)$(CUR_LIB)/src/Makefile . ; \
###	cp  $(TRILINOS_HOME)/packages/$(CUR_SRCPATH)$(CUR_LIB)/src/*.[fch]* .; \
###	$(MAKE); \
###	rm -f Makefile *.[fch]*; \
###
### 7. I also had to edit every Trilinos Makefile to NOT use the library
###    as the target (guys; I'm not really sure why this was done). For
###    example, the target $(LIBPETRA): $(PETRA_OBJ) was replaced
###    by the target LIBPETRA: $(PETRA_OBJ)
###
### 8. See more comments below. I use "###" for my comments.


######################## Change Default Values (if needed) ###################
# Any default values that are not appropriate for the target machine should
# be redefined here.
# Define rules for compiling C++ (xlC seems to have trouble without
# these explicit rules).

.SUFFIXES : .$(OBJ_EXT) .cc .cpp .f .c

.cpp.$(OBJ_EXT):
	$(CXX) $(CXXFLAGS) -c $<

.cc.$(OBJ_EXT):
	$(CXX) $(CXXFLAGS) -c $<

### only an implicit definition was ever used and so I created one.
.c.$(OBJ_EXT):
	$(CC) $(CFLAGS) -c $<

.f.$(OBJ_EXT):
	$(FC) $(FFLAGS) -c $<

ARCH_CXXFLAGS= -Zd -GR -Zc:forScope
ARCH_CFLAGS= -Zd -Za
ARCH_FFLAGS= -debug

# Define compiler commands

CC=icl
FC=f77
CXX=icl

LINKER=$(CXX)

MPI_INCLUDES =
ARCH_INCLUDES = $(MPI_INCLUDES)

LIBMPI =
ARCH_LIBS = 

#LN=ln -sv

################## External Libraries ##########################
###
### I assume that the windows LIB environment (that the bash shell
### by default inherits) has been set to to contain the directory 
### path for the intel blas and lapack.
LIBBLAS = mkl_c.lib mkl_p3.lib
LIBLAPACK = mkl_lapack.lib
LIBSPBLAS = "$(TRILINOS_HOME_WIN)\external\spblas\lib\$(TRILINOS_TARGET)\libspblas.lib"
LIBSUPERLU   = "d:\software\SuperLU\superlu_win2000.lib"
LIBY12M   = "$(TRILINOS_HOME_WIN)\external\y12m\lib\$(TRILINOS_TARGET)\y12m.lib"


############ Define additional variables as needed for each package ########

#### Epetra ####

# Epetra is sensitive to the following defined variables.
# Add -Dvariable_name to the EPETRA_ARCH_DEFINES to activate for a 
# given target machine.  For example:

# EPETRA_ARCH_DEFINES = -DEPETRA_NO_ERROR_REPORTS

# EPETRA_NO_ERROR_REPORTS - If turned on, Epetra will not print error 
#                           messages to standard error device.
#                           Otherwise, message will be printed when 
#                           errors occur.

# EPETRA_ADDRESS64BIT - If 64 bit memory addressing is used to build the 
#                       rest of Epetra, this variable should be defined 
#                       for proper building of the Epetra 
#                       Fortran and C wrapper functions.

# EPETRA_SIMULATE_BOOL - Some older C++ compilers do not support the
#                        bool data type.  Turning this flag on will 
#                        simulate bool with int.  Please note that if 
#                        this is turned on for a compiler that does 
#                        support bool, the code that calls Epetra must 
#                        also use int instead of bool.  Not doing so 
#                        is a cause of subtle incorrect behavior.

#EPETRA_ARCH_DEFINES = -DINTEL_MKL -DEPETRA_NO_ERROR_REPORTS -D$(WINCOMP)
EPETRA_ARCH_DEFINES = -DINTEL_MKL -D$(WINCOMP)

#### petra ####

PETRA_ARCH_DEFINES = -D$(WINCOMP)

#### AztecOO ####

# ML - Use ML with AztecOO (Not defined by default).
# SPARSEBLAS - Use Sparse BLAS with AztecOO (Defined by default).
# IFPACK - Use old IFPACK with AztecOO (Defined by default).
# AZ_COL_REORDER - Use experimental column reordering with AztecOO
#                  (Not defined by default).

AZTECOO_ARCH_DEFINES = -D$(WINCOMP)
IFPACK_ARCH_DEFINES = -DTRILINOS_HAVE_NO_FORTRAN_UNDERSCORE

################## Trilinos Component Includes ##########################

# The Trilinos build environment will use the following locations when
# looking for header files

ANASAZI_INCLUDES =    -I "$(TRILINOS_HOME_WIN)\packages\anasazi\src"
AZTECOO_INCLUDES =    -I "$(TRILINOS_HOME_WIN)\packages\aztecoo\src"
EPETRA_INCLUDES =     -I "$(TRILINOS_HOME_WIN)\packages\epetra\src"
IFPACK_INCLUDES =     -I "$(TRILINOS_HOME_WIN)\packages\ifpack\src"
KOMPLEX_INCLUDES =    -I "$(TRILINOS_HOME_WIN)\packages\komplex\src"
PETRA_INCLUDES =      -I "$(TRILINOS_HOME_WIN)\packages\petra\src"
TPETRA_INCLUDES =     -I "$(TRILINOS_HOME_WIN)\packages\tpetra\src"
TRIUTILS_INCLUDES =   -I "$(TRILINOS_HOME_WIN)\packages\triutils\src"
TSF_INCLUDES =        -I "$(TRILINOS_HOME_WIN)\packages\tsf\src"
EPETRA_ESI_INCLUDES = -I "$(TRILINOS_HOME_WIN)\adaptors\epetra_esi\src"


################## Trilinos Libraries ##########################

# The Trilinos build environment will use the following locations for building,
# storing and using its own libraries

TRILINOS_LIB_PATH= $(TRILINOS_HOME_WIN)\lib\$(TRILINOS_TARGET)

LIBANASAZI =    "$(TRILINOS_LIB_PATH)\libanasazi.$(LIB_EXT)"
LIBAZTECOO =    "$(TRILINOS_LIB_PATH)\libaztecoo.$(LIB_EXT)"
LIBEPETRA =     "$(TRILINOS_LIB_PATH)\libepetra.$(LIB_EXT)"
LIBIFPACK =     "$(TRILINOS_LIB_PATH)\libifpack.$(LIB_EXT)"
LIBKOMPLEX =    "$(TRILINOS_LIB_PATH)\libkomplex.$(LIB_EXT)"
LIBPETRA =      "$(TRILINOS_LIB_PATH)\libpetra.$(LIB_EXT)"
LIBTPETRA =     "$(TRILINOS_LIB_PATH)\libtpetra.$(LIB_EXT)"
LIBTRIUTILS =   "$(TRILINOS_LIB_PATH)\libtriutils.$(LIB_EXT)"
LIBTSF =        "$(TRILINOS_LIB_PATH)\libtsf.$(LIB_EXT)"
LIBEPETRA_ESI = "$(TRILINOS_LIB_PATH)\libepetra_esi.$(LIB_EXT)"

################## External Libraries ##########################

# Trilinos depends on the following external libraries:

# 1) BLAS
# 2) Sparse BLAS
# 3) LAPACK
# 4) Y12M
# 5) SuperLU

# NOTE: WE ASSUME THAT THESE LIBRARIES ARE ALREADY BUILT.
#       TO USE THE VERSIONS OF THESE LIBRARIES IN THE Trilinos/external 
#       DIRECTORIES:
#
#       1) cd Trilinos/external/libname (e.g. y12m)
#       2) type make (or gmake).


# The following variables define the locations of the include files
# and libraries.  


# Include directories
# Include files (if any) for the indicated library are declared
# with -Idirectory_name

SPBLAS_INCLUDES = -I "$(TRILINOS_HOME_WIN)\external\spblas"

# Library directories
# Provide the location of the specified library.
# A library file is expected to be in this directory.
# e.g., in $BLAS_LIB there must be a file libblas.$(LIB_EXT)
# 
# For typical users, these variables probably don't need to be modified
ARCH_LIBDIR=$(TRILINOS_TARGET)

################### Package-specific defaults ##########################

# RAB: 2002/1/29: Have to get this in someway
ifdef EPETRA_ANSI_CPP
EPETRA_DEFAULT_DEFINES += -DEPETRA_ANSI_CPP
endif

# These values seldom change and are not really target-related

## AztecOO

# ML - Use ML with AztecOO.
# SPARSEBLAS - Use Sparse BLAS with AztecOO
# IFPACK - Use old IFPACK with AztecOO
# AZ_COL_REORDER - Use experimental column reordering with AztecOO.

AZTECOO_DEFAULT_DEFINES = -DSPARSEBLAS -DIFPACK -Dcaps


##################### Derived Variables ###########################

# Some variable are easily derived from above.  The rest must be
# defined in the target-specific makefile

## AztecOO Variables ##

# AztecOO communication defines
AZTECOO_COMM_SERIAL          = AZTEC_SERIAL
AZTECOO_COMM_MPI             = AZTEC_MPI
AZTECOO_COMM                 = $(AZTECOO_COMM_$(TRILINOS_COMM))

## Epetra Variables ##

# Epetra communication defines
EPETRA_COMM_SERIAL          = EPETRA_SERIAL
EPETRA_COMM_MPI             = EPETRA_MPI
EPETRA_COMM                 = $(EPETRA_COMM_$(TRILINOS_COMM))

## Petra Variables ##

# Petra communication defines
PETRA_COMM_SERIAL          = PETRA_SERIAL
PETRA_COMM_MPI             = PETRA_MPI
PETRA_COMM                 = $(PETRA_COMM_$(TRILINOS_COMM))

