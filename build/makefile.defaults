
# Fortran underscore flag:  Used to indicate that the Fortran name mangling
# on the target platform puts a trailing underscore after original name of the routine.
# Default is TRILINOS_HAVE_FORTRAN_UNDERSCORE for most platforms
# Other option is TRILINOS_HAVE_NO_FORTRAN_UNDERSCORE
TRILINOS_FORTRAN_UNDERSCORE = TRILINOS_HAVE_FORTRAN_UNDERSCORE 

# Read in file containing definition of:
#
#  TRILINOS_ARCH - Machine architecture, e.g., SOLARIS, LINUX, SGI64
#  TRILINOS_COMM - SERIAL or MPI communication.
#  TRILINOS_ID   - Optional string to help differentiate unique
#                  versions of the libraries. Usually unset.
#
#  Note: The definition can be over-ridden on the make command line, e.g.,
#
#  make TRILINOS_COMM=MPI

include $(TRILINOS_HOME)/build/TRILINOS_TARGET_DEFS

# Define library directory name

TRILINOS_TARGET = $(TRILINOS_ARCH).$(TRILINOS_COMM)$(TRILINOS_ID)


# Define architecture specific flags for C++, C and Fortran

ARCH_CXXFLAGS= -O
ARCH_CFLAGS=   -O
ARCH_FFLAGS=   -O

# Define rules for compiling C++ (xlC seems to have trouble without
# these explicit rules).

.SUFFIXES : .o .cc .cpp

.cpp.o:
	$(CXX) $(CXXFLAGS) -c $<

.cc.o:
	$(CXX) $(CXXFLAGS) -c $<


#Define include directories (remember to use -Idirectory_name)

MPI_INCLUDES = 
ARCH_INCLUDES = $(MPI_INCLUDES)

LIBMPI =
ARCH_LIBS = $(MPI_LIBS) -lm

RANLIB=touch
LINKER=$(CXX)
AR=ar
ARFLAGS=rcv

LN=ln -sv


################## Trilinos Component Includes ##########################

# The Trilinos build environment will use the following locations when
# looking for header files

ANASAZI_INCLUDES =    -I$(TRILINOS_HOME)/packages/anasazi/src
AZTECOO_INCLUDES =    -I$(TRILINOS_HOME)/packages/aztecoo/src
EPETRA_INCLUDES =     -I$(TRILINOS_HOME)/packages/epetra/src $(EPETRA_RTOP_INCLUDE)
IFPACK_INCLUDES =     -I$(TRILINOS_HOME)/packages/ifpack/src
KOMPLEX_INCLUDES =    -I$(TRILINOS_HOME)/packages/komplex/src
PETRA_INCLUDES =      -I$(TRILINOS_HOME)/packages/petra/src
TPETRA_INCLUDES =     -I$(TRILINOS_HOME)/packages/tpetra/src
TRIUTILS_INCLUDES =   -I$(TRILINOS_HOME)/packages/triutils/src
TSF_INCLUDES =        -I$(TRILINOS_HOME)/packages/tsf/src
EPETRA_ESI_INCLUDES = -I$(TRILINOS_HOME)/adaptors/epetra_esi/src


################## Trilinos Libraries ##########################

# The Trilinos build environment will use the following locations for building,
# storing and using its own libraries

TRILINOS_LIB_PATH= $(TRILINOS_HOME)/lib/$(TRILINOS_TARGET)

LIBANASAZI =    $(TRILINOS_LIB_PATH)/libanasazi.a
LIBAZTECOO =    $(TRILINOS_LIB_PATH)/libaztecoo.a
LIBEPETRA =     $(TRILINOS_LIB_PATH)/libepetra.a
LIBIFPACK =     $(TRILINOS_LIB_PATH)/libifpack.a
LIBKOMPLEX =    $(TRILINOS_LIB_PATH)/libkomplex.a
LIBPETRA =      $(TRILINOS_LIB_PATH)/libpetra.a
LIBTPETRA =     $(TRILINOS_LIB_PATH)/libtpetra.a
LIBTRIUTILS =   $(TRILINOS_LIB_PATH)/libtriutils.a
LIBTSF =        $(TRILINOS_LIB_PATH)/libtsf.a
LIBEPETRA_ESI = $(TRILINOS_LIB_PATH)/libepetra_esi.a

################## External Libraries ##########################

# Trilinos depends on the following external libraries:

# 1) BLAS
# 2) Sparse BLAS
# 3) LAPACK
# 4) Y12M
# 5) SuperLU

# NOTE: WE ASSUME THAT THESE LIBRARIES ARE ALREADY BUILT.
#       TO USE THE VERSIONS OF THESE LIBRARIES IN THE Trilinos/external 
#       DIRECTORIES:
#
#       1) cd Trilinos/external/libname (e.g. y12m)
#       2) type make (or gmake).


# The following variables define the locations of the include files
# and libraries.  


# Include directories
# Include files (if any) for the indicated library are declared
# with -Idirectory_name

SPBLAS_INCLUDES = -I$(TRILINOS_HOME)/external/spblas

# Library directories
# Provide the location of the specified library.
# A library file is expected to be in this directory.
# e.g., in $BLAS_LIB there must be a file libblas.a
# 
# For typical users, these variables probably don't need to be modified
ARCH_LIBDIR=$(TRILINOS_TARGET)

LIBBLAS   = $(TRILINOS_HOME)/external/blas/lib/$(TRILINOS_TARGET)/libblas.a
LIBLAPACK = $(TRILINOS_HOME)/external/lapack/lib/$(TRILINOS_TARGET)/liblapack.a
LIBSPBLAS = $(TRILINOS_HOME)/external/spblas/lib/$(TRILINOS_TARGET)/libspblas.a
LIBY12M   = $(TRILINOS_HOME)/external/y12m/lib/$(TRILINOS_TARGET)/liby12m.a
LIBSUPERLU   = $(TRILINOS_HOME)/external/DSuperLU/lib/$(TRILINOS_TARGET)/superlu.a


################### Package-specific defaults ##########################

# This is needed to distinguish this make system from the new Autotools
# system.  It allows for the proper definition of F77_FUNC, which is
# defined automatically by Autotools.  F77_FUNC provides proper
# Fortran name mangling.  When NO_AUTOTOOLS is defined, F77_FUNC is
# manually defined in Epetra_BLAS_wrappers.h and Epetra_LAPACK_wrappers.h.
#  We use "NO_AUTOTOOLS" rather than not defining
# "AUTOTOOLS" since this old make system will not be supported forever.
# When it is no longer needed, we will not have an obsolete define 
# left in the new make system.

EPETRA_DEFAULT_DEFINES += -DNO_AUTOTOOLS

# These values seldom change and are not really target-related

## AztecOO

# ML - Use ML with AztecOO.
# SPARSEBLAS - Use Sparse BLAS with AztecOO
# IFPACK - Use old IFPACK with AztecOO
# AZ_COL_REORDER - Use experimental column reordering with AztecOO.

AZTECOO_DEFAULT_DEFINES = -DSPARSEBLAS -DIFPACK


##################### Derived Variables ###########################

# Some variable are easily derived from above.  The rest must be
# defined in the target-specific makefile

## AztecOO Variables ##

# AztecOO communication defines
AZTECOO_COMM_SERIAL          = AZTEC_SERIAL
AZTECOO_COMM_MPI             = AZTEC_MPI
AZTECOO_COMM                 = $(AZTECOO_COMM_$(TRILINOS_COMM))

## Epetra Variables ##

# Epetra communication defines
EPETRA_COMM_SERIAL          = EPETRA_SERIAL
EPETRA_COMM_MPI             = EPETRA_MPI
EPETRA_COMM                 = $(EPETRA_COMM_$(TRILINOS_COMM))

## Petra Variables ##

# Petra communication defines
PETRA_COMM_SERIAL          = PETRA_SERIAL
PETRA_COMM_MPI             = PETRA_MPI
PETRA_COMM                 = $(PETRA_COMM_$(TRILINOS_COMM))

# RAB: 2002/1/29: Is C++ compiler ANSI compatible
ifdef EPETRA_ANSI_CPP
EPETRA_DEFAULT_DEFINES += -DEPETRA_ANSI_CPP
endif

# RAB: 2002/6/6: Do we want to use RTOp?
ifdef RTOP_BASE_DIR
EPETRA_RTOP_INCLUDE += -I$(RTOP_BASE_DIR)
EPETRA_DEFAULT_DEFINES += -DHAVE_RTOP
ifeq ($(TRILINOS_COMM),MPI)
EPETRA_DEFAULT_DEFINES += -DRTOp_USE_MPI
endif
endif
