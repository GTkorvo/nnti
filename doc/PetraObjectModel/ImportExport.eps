%!PS-Adobe-3.0 EPSF-3.0
%%Title: (ImportExport)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 17:45:21 01/12/04
%%For: (Alan Williams)
%%DocumentData: Clean7Bit
%%BoundingBox: 0 0 413 173
%%HiResBoundingBox: 0.0 0.0 412.677734 173.199997
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf hb Printer/PostScript Color Management 0
%%BeginResource: file Pscript_T42Hdr PSVER
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Arial-BoldMT
[/N13/Arial-BoldMT 1 TZ
%%IncludeResource Arial-ItalicMT
[/N14/Arial-ItalicMT 1 TZ
%%IncludeResource ArialMT
[/N15/ArialMT 1 TZ

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1416 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:c62967b0-fb4f-4a9e-98e0-0c7786637ff4' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:c62967b0-fb4f-4a9e-98e0-0c7786637ff4' xmlns:pdfx='http://ns.adobe.com/pdfx/1.3/' pdfx:Company='Sandia National Laboratories'/>
<rdf:Description rdf:about='uuid:c62967b0-fb4f-4a9e-98e0-0c7786637ff4' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreateDate='2004-01-12T17:37:13-07:00' xap:CreatorTool='Acrobat PDFMaker for Microsoft Visio' xap:ModifyDate='2004-01-12T17:37:15-07:00' xap:MetadataDate='2004-01-12T17:37:15-07:00'></rdf:Description>
<rdf:Description rdf:about='uuid:c62967b0-fb4f-4a9e-98e0-0c7786637ff4' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:c85c412f-6e41-41cc-b4c8-afeaed020ff4'/>
<rdf:Description rdf:about='uuid:c62967b0-fb4f-4a9e-98e0-0c7786637ff4' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>ImportExport</rdf:li></rdf:Alt></dc:title><dc:creator><rdf:Seq><rdf:li>Alan Williams</rdf:li></rdf:Seq></dc:creator></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 0 413 173 rectclip
/N16 [/DeviceRGB] /ColorSpace defineRes pop

0.0 0.0 412.677734 173.199997 re
W
n
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
21.119999 595.679993 171.119991 17.52002 re
1.0 1.0 1.0 setrgbcolor
f
1.004 w
1 j
1 J
n
21.119999 595.679993 m
21.119999 595.679993 171.119991 17.52002 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
3.093063 49.832748 m
/N14 7.904495 Tf
(+) show
7.733017 49.832748 m
(E) show
13.05986 49.832748 m
(l) show
14.949036 49.832748 m
(e) show
19.243561 49.832748 m
(m) show
25.945007 49.832748 m
(entSpa)
[4.453391 4.453391 2.255942 5.33085 4.453391 4.453391 ] pdfxs
51.186493 49.832748 m
(c) show
55.310272 49.832748 m
(e\()
[4.453391 2.690631 ] pdfxs
62.341339 49.832748 m
(\)) show
64.918991 49.832748 m
( : El)
[2.235469 2.255942 2.235469 5.33085 1.813292 ] pdfxs
78.865814 49.832748 m
(e) show
83.160339 49.832748 m
(m) show
89.861786 49.832748 m
(entSpa)
[4.453391 4.453391 2.255942 5.33085 4.453391 4.453391 ] pdfxs
115.103256 49.832748 m
(c) show
119.227051 49.832748 m
(e) show
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
21.119999 613.200012 171.119991 29.52002 re
1.0 1.0 1.0 setrgbcolor
f
n
21.119999 613.200012 m
21.119999 613.200012 171.119991 29.52002 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
43.646637 70.968735 m
/N15 7.904495 Tf
(\253i)
[4.458134 1.818035 ] pdfxs
49.821564 70.968735 m
(nter)
[4.458134 2.260684 4.458134 2.695374 ] pdfxs
63.57605 70.968735 m
(fac)
[2.260684 4.458134 4.015484 ] pdfxs
74.24704 70.968735 m
(e) show
78.713837 70.968735 m
(\273) show
36.945251 61.345734 m
/N13 7.904495 Tf
(Sr)
[5.333301 3.135852 ] pdfxs
45.369965 61.345734 m
(cD)
[4.455841 5.76799 ] pdfxs
55.667236 61.345734 m
(is)
[2.258392 4.455841 ] pdfxs
62.220169 61.345734 m
(t) show
64.969406 61.345734 m
(O) show
71.157089 61.345734 m
(b) show
75.970184 61.345734 m
(j) show
78.205627 61.345734 m
(ect)
[4.455841 4.455841 2.693082 ] pdfxs
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
66.479996 693.119995 78.960007 19.919983 re
1.0 1.0 1.0 setrgbcolor
f
n
66.479996 693.119995 m
66.479996 693.119995 78.960007 19.919983 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
35.570297 119.942307 m
(Elem)
[5.338834 2.263926 4.461374 7.093633 ] pdfxs
54.678085 119.942307 m
(en)
[4.461374 4.896063 ] pdfxs
63.95256 119.942307 m
(t) show
66.701813 119.942307 m
(S) show
72.028717 119.942307 m
(p) show
76.841827 119.942307 m
(ace)
[4.461374 4.461374 4.461374 ] pdfxs
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
249.119995 552.47998 118.559998 83.040039 re
1.0 1.0 1.0 setrgbcolor
f
n
249.119995 552.47998 m
249.119995 552.47998 118.559998 83.040039 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
166.338348 65.813614 m
/N15 7.904495 Tf
(+Im)
[4.650923 2.232149 6.619086 ] pdfxs
179.922897 65.813614 m
(p) show
184.389679 65.813614 m
(o) show
188.684158 65.813614 m
(r) show
191.433319 65.813614 m
(t\()
[2.232149 2.666839 ] pdfxs
196.243118 65.813614 m
(\)) show
166.338348 56.190613 m
(+) show
170.978302 56.190613 m
(E) show
176.305145 56.190613 m
(x) show
180.257401 56.190613 m
(por)
[4.453391 4.453391 2.690631 ] pdfxs
191.741882 56.190613 m
(t\()
[2.255942 2.690631 ] pdfxs
196.747009 56.190613 m
(\)) show
166.338348 46.567612 m
(#C)
[4.466749 5.778898 ] pdfxs
176.474213 46.567612 m
(hec)
[4.466749 4.466749 4.024099 ] pdfxs
189.359985 46.567612 m
(k) show
193.483719 46.567612 m
(S) show
198.810532 46.567612 m
(i) show
200.527328 46.567612 m
(z) show
204.479538 46.567612 m
(es)
[4.466749 4.024099 ] pdfxs
212.898529 46.567612 m
(\() show
215.64769 46.567612 m
(\)) show
166.338348 37.116974 m
(#C)
[4.461374 5.773523 ] pdfxs
176.468887 37.116974 m
(opy)
[4.461374 4.461374 4.018724 ] pdfxs
189.343918 37.116974 m
(AndPer)
[5.338834 4.461374 4.461374 5.338834 4.461374 2.698615 ] pdfxs
215.983261 37.116974 m
(m) show
222.684738 37.116974 m
(u) show
227.151657 37.116974 m
(te\()
[2.263926 4.461374 2.698615 ] pdfxs
236.454651 37.116974 m
(\)) show
166.338348 27.493973 m
(#Pac)
[4.463666 5.341126 4.463666 4.021017 ] pdfxs
184.558929 27.493973 m
(k) show
188.511169 27.493973 m
(A) show
193.838013 27.493973 m
(ndPr)
[4.463666 4.463666 5.341126 2.700907 ] pdfxs
210.684006 27.493973 m
(epar)
[4.463666 4.463666 4.463666 2.700907 ] pdfxs
226.652618 27.493973 m
(e\()
[4.463666 2.700907 ] pdfxs
233.865417 27.493973 m
(\)) show
166.338348 17.870956 m
(#U)
[4.466749 5.778898 ] pdfxs
176.474213 17.870956 m
(npac)
[4.466749 4.466749 4.466749 4.024099 ] pdfxs
193.826797 17.870956 m
(k) show
197.778992 17.870956 m
(A) show
203.105789 17.870956 m
(ndC)
[4.466749 4.466749 5.778898 ] pdfxs
217.880737 17.870956 m
(o) show
222.175232 17.870956 m
(m) show
228.876617 17.870956 m
(bi)
[4.466749 1.826651 ] pdfxs
235.060226 17.870956 m
(ne\()
[4.466749 4.466749 2.70399 ] pdfxs
246.74295 17.870956 m
(\)) show
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
249.119995 635.519958 118.559998 20.159973 re
1.0 1.0 1.0 setrgbcolor
f
n
249.119995 635.519958 m
249.119995 635.519958 118.559998 20.159973 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
187.818008 78.87323 m
/N13 7.904495 Tf
(D) show
193.65947 78.87323 m
(i) show
195.894897 78.87323 m
(st)
[4.450229 2.687469 ] pdfxs
202.922852 78.87323 m
(Ob)
[6.205028 4.884919 ] pdfxs
214.112518 78.87323 m
(je)
[2.25278 4.450229 ] pdfxs
220.659882 78.87323 m
(ct)
[4.450229 2.687469 ] pdfxs
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
464.879944 612.719971 75.359985 20.159973 re
1.0 1.0 1.0 setrgbcolor
f
n
464.879944 612.719971 m
464.879944 612.719971 75.359985 20.159973 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
325.115875 62.376877 m
(M) show
331.817291 62.376877 m
(u) show
336.63031 62.376877 m
(lt)
[2.25199 2.686679 ] pdfxs
341.45993 62.376877 m
(iVect)
[2.25199 5.326898 4.449439 4.449439 2.686679 ] pdfxs
360.515198 62.376877 m
(o) show
365.499756 62.376877 m
(r) show
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
464.879944 582.47998 75.359985 20.159973 re
1.0 1.0 1.0 setrgbcolor
f
n
464.879944 582.47998 m
464.879944 582.47998 75.359985 20.159973 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
328.896301 40.897232 m
(Ci)
[5.669026 2.159428 ] pdfxs
336.80069 40.897232 m
(s) show
341.267487 40.897232 m
(G) show
347.455078 40.897232 m
(r) show
350.546478 40.897232 m
(a) show
355.013245 40.897232 m
(p) show
359.997772 40.897232 m
(h) show
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
464.879944 552.47998 75.359985 20.159973 re
1.0 1.0 1.0 setrgbcolor
f
n
464.879944 552.47998 m
464.879944 552.47998 75.359985 20.159973 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
328.896301 19.245758 m
(C) show
334.565369 19.245758 m
(i) show
336.80072 19.245758 m
(sM)
[4.466749 6.656238 ] pdfxs
347.968872 19.245758 m
(at)
[4.466749 2.70399 ] pdfxs
355.013306 19.245758 m
(r) show
358.104706 19.245758 m
(i) show
360.340057 19.245758 m
(x) show
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
0.66901 w
n
204.720001 619.200012 m
224.87999 619.200012 l
224.87999 591.119995 l
249.119995 591.119995 l
249.119995 578.159973 l
0.00392 0.00392 0.00392 setrgbcolor
S
n
204.720001 611.519958 m
204.720001 627.119995 l
192.23999 619.200012 l
204.720001 611.519958 l
1.0 1.0 1.0  setrgbcolor
eofill
1.004 w
n
204.720001 611.519958 m
204.720001 627.119995 l
192.23999 619.200012 l
204.720001 611.519958 l
h
0.00392 0.00392 0.00392  setrgbcolor
S
n
106.320007 642.719971 m
106.320007 647.519958 l
106.559998 647.76001 l
107.040009 647.519958 l
107.040009 642.719971 l
107.040009 642.719971 106.800003 642.47998 106.559998 642.47998 c
106.320007 642.47998 106.320007 642.719971 106.320007 642.719971 c
h
106.320007 650.880005 m
106.320007 655.440002 l
106.559998 655.919983 l
107.040009 655.440002 l
107.040009 650.880005 l
106.559998 650.400024 l
106.320007 650.880005 l
h
106.320007 658.799988 m
106.320007 661.679993 l
106.559998 661.200012 l
105.839996 661.200012 l
105.839996 661.200012 105.600006 661.440002 105.600006 661.679993 c
105.600006 662.880005 l
105.839996 663.119995 l
106.320007 662.880005 l
106.320007 661.679993 l
105.839996 661.919983 l
106.559998 661.919983 l
106.800003 661.919983 107.040009 661.919983 107.040009 661.679993 c
107.040009 658.799988 l
106.559998 658.559998 l
106.320007 658.799988 l
h
105.600006 666.23999 m
105.600006 671.039978 l
105.839996 671.279968 l
106.320007 671.039978 l
106.320007 666.23999 l
105.839996 666.0 l
105.600006 666.23999 l
h
105.600006 674.159973 m
105.600006 678.959961 l
105.839996 679.200012 l
106.320007 678.959961 l
106.320007 674.159973 l
105.839996 673.919983 l
105.600006 674.159973 l
h
105.600006 682.320007 m
105.600006 686.880005 l
105.839996 687.359985 l
106.320007 686.880005 l
106.320007 682.320007 l
105.839996 682.079956 l
105.600006 682.320007 l
h
105.600006 690.23999 m
105.600006 693.119995 l
105.839996 693.359985 l
106.079994 693.359985 106.320007 693.119995 106.320007 693.119995 c
106.320007 690.23999 l
105.839996 690.0 l
105.600006 690.23999 l
f
0.66901 w
n
112.079994 686.880005 m
105.839996 693.119995 l
99.839996 686.880005 l
S
n
380.399994 629.76001 m
411.600006 629.76001 l
411.600006 622.799988 l
464.879944 622.799988 l
S
n
380.399994 622.079956 m
380.399994 637.679993 l
367.679993 629.76001 l
380.399994 622.079956 l
1.0 1.0 1.0  setrgbcolor
eofill
1.004 w
n
380.399994 622.079956 m
380.399994 637.679993 l
367.679993 629.76001 l
380.399994 622.079956 l
h
0.00392 0.00392 0.00392  setrgbcolor
S
0.66901 w
n
380.399994 578.159973 m
410.880005 578.159973 l
410.880005 567.600037 l
464.879944 567.600037 l
S
n
380.399994 570.47998 m
380.399994 586.080017 l
367.679993 578.159973 l
380.399994 570.47998 l
1.0 1.0 1.0  setrgbcolor
eofill
1.004 w
n
380.399994 570.47998 m
380.399994 586.080017 l
367.679993 578.159973 l
380.399994 570.47998 l
h
0.00392 0.00392 0.00392  setrgbcolor
S
0.66901 w
n
380.399994 604.079956 m
410.639984 604.079956 l
410.639984 592.559998 l
464.879944 592.559998 l
S
n
380.399994 596.159973 m
380.399994 612.0 l
367.679993 604.079956 l
380.399994 596.159973 l
1.0 1.0 1.0  setrgbcolor
eofill
1.004 w
n
380.399994 596.159973 m
380.399994 612.0 l
367.679993 604.079956 l
380.399994 596.159973 l
h
0.00392 0.00392 0.00392  setrgbcolor
S
n
70.800003 743.279968 75.360001 29.52002 re
1.0 1.0 1.0  setrgbcolor
f
n
70.800003 743.279968 m
70.800003 743.279968 75.360001 29.52002 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
44.849487 164.104446 m
/N15 7.904495 Tf
(\253i)
[4.462955 1.822857 ] pdfxs
51.201645 164.104446 m
(nt)
[4.462955 2.265507 ] pdfxs
57.727692 164.104446 m
(er)
[4.462955 2.700196 ] pdfxs
64.939865 164.104446 m
(fac)
[2.265507 4.462955 4.020306 ] pdfxs
75.620575 164.104446 m
(e) show
80.087463 164.104446 m
(\273) show
47.083252 154.481445 m
/N13 7.904495 Tf
(D) show
52.924637 154.481445 m
(i) show
55.159973 154.481445 m
(r) show
58.251373 154.481445 m
(ect)
[4.466749 4.466749 2.70399 ] pdfxs
69.762589 154.481445 m
(o) show
74.747116 154.481445 m
(r) show
77.838516 154.481445 m
(y) show
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
105.600006 713.039978 m
105.600006 717.839966 l
105.839996 718.079956 l
106.320007 717.839966 l
106.320007 713.039978 l
106.320007 712.799988 106.079994 712.799988 105.839996 712.799988 c
105.839996 712.799988 105.600006 712.799988 105.600006 713.039978 c
h
105.600006 721.200012 m
105.600006 725.76001 l
105.839996 726.23999 l
106.320007 725.76001 l
106.320007 721.200012 l
105.839996 720.719971 l
105.600006 721.200012 l
h
107.040009 728.400024 m
108.479996 728.400024 l
108.240005 728.159973 l
108.240005 731.279968 l
108.479996 731.76001 l
108.720001 731.279968 l
108.720001 728.159973 l
108.720001 727.919983 108.720001 727.919983 108.479996 727.919983 c
107.040009 727.919983 l
106.559998 728.159973 l
107.040009 728.400024 l
h
108.240005 734.639954 m
108.240005 739.440002 l
108.479996 739.679993 l
108.720001 739.440002 l
108.720001 734.639954 l
108.479996 734.400024 l
108.240005 734.639954 l
h
108.240005 742.799988 m
108.240005 743.279968 l
108.240005 743.279968 108.240005 743.519958 108.479996 743.519958 c
108.720001 743.519958 108.720001 743.279968 108.720001 743.279968 c
108.720001 742.799988 l
108.479996 742.320007 l
108.240005 742.799988 l
0.00392 0.00392 0.00392 setrgbcolor
f
0.66901 w
n
114.720001 737.039978 m
108.479996 743.279968 l
102.240005 737.039978 l
S
n
260.639984 710.400024 78.720001 42.960022 re
1.0 1.0 1.0  setrgbcolor
f
1.004 w
n
260.639984 710.400024 m
260.639984 710.400024 78.720001 42.960022 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
174.586548 150.013809 m
/N15 7.904495 Tf
(+) show
179.398056 150.013809 m
(E) show
184.724945 150.013809 m
(xp)
[3.961812 4.404462 ] pdfxs
193.15361 150.013809 m
(o) show
197.448166 150.013809 m
(r) show
200.197388 150.013809 m
(tL)
[2.207013 4.404462 ] pdfxs
206.871262 150.013809 m
(IDs\()
[2.207013 5.716611 3.961812 2.641702 ] pdfxs
221.505829 150.013809 m
(\)) show
174.586548 140.563156 m
(+) show
179.397949 140.563156 m
(R) show
185.067032 140.563156 m
(em)
[4.459635 6.649123 ] pdfxs
196.228088 140.563156 m
(o) show
200.522568 140.563156 m
(t) show
202.757889 140.563156 m
(eLID)
[4.459635 4.459635 2.262187 5.771784 ] pdfxs
219.780838 140.563156 m
(s) show
223.733047 140.563156 m
(\() show
226.310669 140.563156 m
(\)) show
174.586548 130.940155 m
(+) show
179.398071 130.940155 m
(.) show
181.461197 130.940155 m
(..\()
[2.235469 2.235469 2.670159 ] pdfxs
188.68132 130.940155 m
(\)) show
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
260.639984 753.359985 78.720001 19.919983 re
1.0 1.0 1.0 setrgbcolor
f
n
260.639984 753.359985 m
260.639984 753.359985 78.720001 19.919983 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
189.364532 163.073425 m
/N13 7.904495 Tf
(I) show
191.599899 163.073425 m
(m) show
198.815918 163.073425 m
(port)
[4.824054 4.824054 3.069375 2.626605 ] pdfxs
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
389.519989 710.400024 78.720001 42.960022 re
1.0 1.0 1.0 setrgbcolor
f
n
389.519989 710.400024 m
389.519989 710.400024 78.720001 42.960022 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
267.034912 150.013809 m
/N15 7.904495 Tf
(+Expor)
[4.66444 5.320575 4.000465 4.443115 4.443115 2.680356 ] pdfxs
292.484436 150.013809 m
(tLID)
[2.245666 4.443115 2.245666 5.755264 ] pdfxs
307.088104 150.013809 m
(s) show
311.211914 150.013809 m
(\() show
313.789612 150.013809 m
(\)) show
267.034912 140.563156 m
(+) show
271.674896 140.563156 m
(R) show
277.344025 140.563156 m
(em)
[4.450229 6.639718 ] pdfxs
288.495789 140.563156 m
(ote)
[4.450229 2.25278 4.450229 ] pdfxs
299.493408 140.563156 m
(L) show
303.960266 140.563156 m
(ID)
[2.25278 5.762378 ] pdfxs
312.054535 140.563156 m
(s) show
316.006805 140.563156 m
(\() show
318.584503 140.563156 m
(\)) show
267.034912 130.940155 m
(+...)
[4.650923 2.232149 2.232149 2.232149 ] pdfxs
278.213287 130.940155 m
(\() show
280.962433 130.940155 m
(\)) show
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
389.519989 753.359985 78.720001 19.919983 re
1.0 1.0 1.0 setrgbcolor
f
n
389.519989 753.359985 m
389.519989 753.359985 78.720001 19.919983 re
0.00392 0.00392 0.00392  setrgbcolor
S
1.39667 0.0 0.0 1.39667 18.0 532.319946 cm
0.0 sg
281.469238 163.073425 m
/N13 7.904495 Tf
(Exp)
[5.31267 4.43521 4.8699 ] pdfxs
296.03006 163.073425 m
(o) show
301.014587 163.073425 m
(rt)
[3.115222 2.672451 ] pdfxs
0.71599 0.0 0.0 0.71599 -12.88779 -381.134796 cm
n
300.23999 710.400024 m
300.23999 705.600037 l
300.0 705.359985 l
299.759979 705.600037 l
299.759979 710.400024 l
299.759979 710.400024 299.759979 710.639954 300.0 710.639954 c
300.23999 710.639954 300.23999 710.400024 300.23999 710.400024 c
h
299.279999 702.719971 m
294.47998 702.719971 l
294.23999 702.959961 l
294.47998 703.440002 l
299.279999 703.440002 l
299.519989 702.959961 l
299.279999 702.719971 l
h
291.119995 702.719971 m
286.559998 702.719971 l
286.079987 702.959961 l
286.559998 703.440002 l
291.119995 703.440002 l
291.600006 702.959961 l
291.119995 702.719971 l
h
283.200012 702.719971 m
278.399994 702.719971 l
278.160004 702.959961 l
278.399994 703.440002 l
283.200012 703.440002 l
283.440002 702.959961 l
283.200012 702.719971 l
h
275.040009 702.719971 m
270.47998 702.719971 l
270.0 702.959961 l
270.47998 703.440002 l
275.040009 703.440002 l
275.519989 702.959961 l
275.040009 702.719971 l
h
267.119995 702.719971 m
262.320007 702.719971 l
262.079987 702.959961 l
262.320007 703.440002 l
267.119995 703.440002 l
267.359985 702.959961 l
267.119995 702.719971 l
h
258.959991 702.719971 m
254.400009 702.719971 l
254.159988 702.959961 l
254.400009 703.440002 l
258.959991 703.440002 l
259.440002 702.959961 l
258.959991 702.719971 l
h
251.039978 702.719971 m
246.23999 702.719971 l
246.0 702.959961 l
246.23999 703.440002 l
251.039978 703.440002 l
251.279999 702.959961 l
251.039978 702.719971 l
h
243.119995 702.719971 m
238.319977 702.719971 l
238.080002 702.959961 l
238.319977 703.440002 l
243.119995 703.440002 l
243.360001 702.959961 l
243.119995 702.719971 l
h
234.959991 702.719971 m
230.400009 702.719971 l
229.919998 702.959961 l
230.400009 703.440002 l
234.959991 703.440002 l
235.199997 702.959961 l
234.959991 702.719971 l
h
227.039978 702.719971 m
222.23999 702.719971 l
222.0 702.959961 l
222.23999 703.440002 l
227.039978 703.440002 l
227.279999 702.959961 l
227.039978 702.719971 l
h
218.87999 702.719971 m
214.319992 702.719971 l
213.839996 702.959961 l
214.319992 703.440002 l
218.87999 703.440002 l
219.360001 702.959961 l
218.87999 702.719971 l
h
210.959991 702.719971 m
206.159988 702.719971 l
205.919998 702.959961 l
206.159988 703.440002 l
210.959991 703.440002 l
211.199997 702.959961 l
210.959991 702.719971 l
h
202.800003 702.719971 m
198.23999 702.719971 l
197.759979 702.959961 l
198.23999 703.440002 l
202.800003 703.440002 l
203.279999 702.959961 l
202.800003 702.719971 l
h
194.87999 702.719971 m
190.080002 702.719971 l
189.839996 702.959961 l
190.080002 703.440002 l
194.87999 703.440002 l
195.119995 702.959961 l
194.87999 702.719971 l
h
186.720001 702.719971 m
182.159988 702.719971 l
181.679993 702.959961 l
182.159988 703.440002 l
186.720001 703.440002 l
187.199997 702.959961 l
186.720001 702.719971 l
h
178.800003 702.719971 m
174.0 702.719971 l
173.759979 702.959961 l
174.0 703.440002 l
178.800003 703.440002 l
179.039978 702.959961 l
178.800003 702.719971 l
h
170.639999 702.719971 m
166.080002 702.719971 l
165.600006 702.959961 l
166.080002 703.440002 l
170.639999 703.440002 l
171.119995 702.959961 l
170.639999 702.719971 l
h
162.720001 702.719971 m
157.919998 702.719971 l
157.679993 702.959961 l
157.919998 703.440002 l
162.720001 703.440002 l
162.959991 702.959961 l
162.720001 702.719971 l
h
154.559998 702.719971 m
150.0 702.719971 l
149.759979 702.959961 l
150.0 703.440002 l
154.559998 703.440002 l
155.039993 702.959961 l
154.559998 702.719971 l
h
146.639999 702.719971 m
145.440002 702.719971 l
145.199997 702.719971 145.199997 702.959961 145.199997 702.959961 c
145.199997 703.200012 145.199997 703.440002 145.440002 703.440002 c
146.639999 703.440002 l
146.87999 702.959961 l
146.639999 702.719971 l
0.00392 0.00392 0.00392 setrgbcolor
f
0.66901 w
n
151.679993 709.200012 m
145.440002 702.959961 l
151.679993 696.959961 l
S
n
429.359985 710.400024 m
429.359985 705.600037 l
428.880005 705.359985 l
428.639984 705.600037 l
428.639984 710.400024 l
428.880005 710.639954 l
429.119995 710.639954 429.359985 710.400024 429.359985 710.400024 c
h
429.359985 702.23999 m
429.359985 697.919983 l
429.359985 697.919983 429.119995 697.679993 428.880005 697.679993 c
428.399994 697.679993 l
428.160004 697.919983 l
428.399994 698.400024 l
428.880005 698.400024 l
428.639984 697.919983 l
428.639984 702.23999 l
428.880005 702.719971 l
429.359985 702.23999 l
h
425.039978 697.679993 m
420.47998 697.679993 l
420.23999 697.919983 l
420.47998 698.400024 l
425.039978 698.400024 l
425.519989 697.919983 l
425.039978 697.679993 l
h
417.119995 697.679993 m
412.319977 697.679993 l
412.079987 697.919983 l
412.319977 698.400024 l
417.119995 698.400024 l
417.359985 697.919983 l
417.119995 697.679993 l
h
409.200012 697.679993 m
404.399994 697.679993 l
404.160004 697.919983 l
404.399994 698.400024 l
409.200012 698.400024 l
409.440002 697.919983 l
409.200012 697.679993 l
h
401.039978 697.679993 m
396.47998 697.679993 l
396.0 697.919983 l
396.47998 698.400024 l
401.039978 698.400024 l
401.279999 697.919983 l
401.039978 697.679993 l
h
393.119995 697.679993 m
388.319977 697.679993 l
388.079987 697.919983 l
388.319977 698.400024 l
393.119995 698.400024 l
393.359985 697.919983 l
393.119995 697.679993 l
h
384.959991 697.679993 m
380.399994 697.679993 l
379.919983 697.919983 l
380.399994 698.400024 l
384.959991 698.400024 l
385.440002 697.919983 l
384.959991 697.679993 l
h
377.039978 697.679993 m
372.23999 697.679993 l
372.0 697.919983 l
372.23999 698.400024 l
377.039978 698.400024 l
377.279999 697.919983 l
377.039978 697.679993 l
h
368.880005 697.679993 m
364.319977 697.679993 l
363.839996 697.919983 l
364.319977 698.400024 l
368.880005 698.400024 l
369.359985 697.919983 l
368.880005 697.679993 l
h
361.679993 699.359985 m
361.679993 699.600037 l
361.440002 700.320007 l
361.440002 700.079956 l
360.959991 700.799988 l
360.23999 701.279968 l
360.47998 701.279968 l
359.039978 701.76001 l
358.559998 701.76001 l
358.319977 702.23999 l
358.559998 702.47998 l
359.039978 702.47998 l
360.0 702.23999 l
361.440002 701.279968 l
361.919983 700.559998 l
362.399994 699.839966 l
362.399994 699.600037 l
362.160004 699.119995 l
361.679993 699.359985 l
h
355.679993 701.039978 m
355.440002 700.799988 l
354.959991 700.079956 l
354.959991 700.320007 l
354.720001 699.600037 l
354.47998 698.880005 l
354.23999 697.919983 l
354.0 697.679993 l
353.759979 698.159973 l
353.759979 698.880005 l
354.0 699.839966 l
354.47998 700.559998 l
354.959991 701.279968 l
355.200012 701.519958 l
355.679993 701.519958 l
355.679993 701.039978 l
h
354.0 697.679993 m
353.039978 697.679993 l
352.559998 697.919983 l
353.039978 698.400024 l
354.0 698.400024 l
354.23999 697.919983 l
354.0 697.679993 l
h
349.679993 697.679993 m
344.880005 697.679993 l
344.639984 697.919983 l
344.880005 698.400024 l
349.679993 698.400024 l
349.919983 697.919983 l
349.679993 697.679993 l
h
341.519989 697.679993 m
336.959991 697.679993 l
336.47998 697.919983 l
336.959991 698.400024 l
341.519989 698.400024 l
342.0 697.919983 l
341.519989 697.679993 l
h
333.600006 697.679993 m
328.800018 697.679993 l
328.559998 697.919983 l
328.800018 698.400024 l
333.600006 698.400024 l
333.839996 697.919983 l
333.600006 697.679993 l
h
325.440002 697.679993 m
320.880005 697.679993 l
320.399994 697.919983 l
320.880005 698.400024 l
325.440002 698.400024 l
325.919983 697.919983 l
325.440002 697.679993 l
h
317.519989 697.679993 m
312.720001 697.679993 l
312.47998 697.919983 l
312.720001 698.400024 l
317.519989 698.400024 l
317.759979 697.919983 l
317.519989 697.679993 l
h
309.359985 697.679993 m
304.800018 697.679993 l
304.320007 697.919983 l
304.800018 698.400024 l
309.359985 698.400024 l
309.839996 697.919983 l
309.359985 697.679993 l
h
301.440002 697.679993 m
296.639984 697.679993 l
296.399994 697.919983 l
296.639984 698.400024 l
301.440002 698.400024 l
301.679993 697.919983 l
301.440002 697.679993 l
h
293.279999 697.679993 m
288.720001 697.679993 l
288.23999 697.919983 l
288.720001 698.400024 l
293.279999 698.400024 l
293.759979 697.919983 l
293.279999 697.679993 l
h
285.359985 697.679993 m
280.559998 697.679993 l
280.320007 697.919983 l
280.559998 698.400024 l
285.359985 698.400024 l
285.600006 697.919983 l
285.359985 697.679993 l
h
277.200012 697.679993 m
272.639984 697.679993 l
272.399994 697.919983 l
272.639984 698.400024 l
277.200012 698.400024 l
277.679993 697.919983 l
277.200012 697.679993 l
h
269.279999 697.679993 m
264.47998 697.679993 l
264.23999 697.919983 l
264.47998 698.400024 l
269.279999 698.400024 l
269.519989 697.919983 l
269.279999 697.679993 l
h
261.359985 697.679993 m
256.559998 697.679993 l
256.320007 697.919983 l
256.559998 698.400024 l
261.359985 698.400024 l
261.600006 697.919983 l
261.359985 697.679993 l
h
253.199997 697.679993 m
248.639999 697.679993 l
248.159988 697.919983 l
248.639999 698.400024 l
253.199997 698.400024 l
253.439987 697.919983 l
253.199997 697.679993 l
h
245.279999 697.679993 m
240.479996 697.679993 l
240.23999 697.919983 l
240.479996 698.400024 l
245.279999 698.400024 l
245.519989 697.919983 l
245.279999 697.679993 l
h
237.119995 697.679993 m
232.559998 697.679993 l
232.080002 697.919983 l
232.559998 698.400024 l
237.119995 698.400024 l
237.600006 697.919983 l
237.119995 697.679993 l
h
229.199997 697.679993 m
224.400009 697.679993 l
224.159988 697.919983 l
224.400009 698.400024 l
229.199997 698.400024 l
229.440002 697.919983 l
229.199997 697.679993 l
h
221.039978 697.679993 m
216.479996 697.679993 l
216.0 697.919983 l
216.479996 698.400024 l
221.039978 698.400024 l
221.519989 697.919983 l
221.039978 697.679993 l
h
213.119995 697.679993 m
208.319992 697.679993 l
208.080002 697.919983 l
208.319992 698.400024 l
213.119995 698.400024 l
213.360001 697.919983 l
213.119995 697.679993 l
h
204.959991 697.679993 m
200.400009 697.679993 l
199.919998 697.919983 l
200.400009 698.400024 l
204.959991 698.400024 l
205.440002 697.919983 l
204.959991 697.679993 l
h
197.039978 697.679993 m
192.23999 697.679993 l
192.0 697.919983 l
192.23999 698.400024 l
197.039978 698.400024 l
197.279999 697.919983 l
197.039978 697.679993 l
h
188.87999 697.679993 m
184.319992 697.679993 l
183.839996 697.919983 l
184.319992 698.400024 l
188.87999 698.400024 l
189.360001 697.919983 l
188.87999 697.679993 l
h
180.959991 697.679993 m
176.160004 697.679993 l
175.919998 697.919983 l
176.160004 698.400024 l
180.959991 698.400024 l
181.199997 697.919983 l
180.959991 697.679993 l
h
172.800003 697.679993 m
168.23999 697.679993 l
167.759979 697.919983 l
168.23999 698.400024 l
172.800003 698.400024 l
173.279999 697.919983 l
172.800003 697.679993 l
h
164.87999 697.679993 m
160.080002 697.679993 l
159.839996 697.919983 l
160.080002 698.400024 l
164.87999 698.400024 l
165.119995 697.919983 l
164.87999 697.679993 l
h
156.720001 697.679993 m
152.160004 697.679993 l
151.919998 697.919983 l
152.160004 698.400024 l
156.720001 698.400024 l
157.199997 697.919983 l
156.720001 697.679993 l
h
148.800003 697.679993 m
145.440002 697.679993 l
145.199997 697.679993 145.199997 697.919983 145.199997 697.919983 c
145.199997 698.159973 145.199997 698.400024 145.440002 698.400024 c
148.800003 698.400024 l
149.039993 697.919983 l
148.800003 697.679993 l
f
n
151.679993 704.159973 m
145.440002 697.919983 l
151.679993 691.919983 l
S
n
502.079987 632.880005 m
502.079987 637.440002 l
502.559998 637.679993 l
502.800018 637.440002 l
502.800018 632.880005 l
502.800018 632.640015 502.800018 632.400024 502.559998 632.400024 c
502.319977 632.400024 502.079987 632.640015 502.079987 632.880005 c
h
502.079987 640.799988 m
502.079987 645.600037 l
502.559998 645.839966 l
502.800018 645.600037 l
502.800018 640.799988 l
502.559998 640.559998 l
502.079987 640.799988 l
h
502.079987 648.959961 m
502.079987 653.519958 l
502.559998 653.76001 l
502.800018 653.519958 l
502.800018 648.959961 l
502.559998 648.47998 l
502.079987 648.959961 l
h
502.079987 656.880005 m
502.079987 661.440002 l
502.559998 661.919983 l
502.800018 661.440002 l
502.800018 656.880005 l
502.559998 656.640015 l
502.079987 656.880005 l
h
502.079987 664.799988 m
502.079987 669.600037 l
502.559998 669.839966 l
502.800018 669.600037 l
502.800018 664.799988 l
502.559998 664.559998 l
502.079987 664.799988 l
h
502.079987 672.959961 m
502.079987 677.519958 l
502.559998 678.0 l
502.800018 677.519958 l
502.800018 672.959961 l
502.559998 672.719971 l
502.079987 672.959961 l
h
502.079987 680.880005 m
502.079987 685.679993 l
502.559998 685.919983 l
502.800018 685.679993 l
502.800018 680.880005 l
502.559998 680.640015 l
502.079987 680.880005 l
h
502.079987 689.039978 m
502.079987 693.600037 l
502.559998 694.079956 l
502.800018 693.600037 l
502.800018 689.039978 l
502.559998 688.559998 l
502.079987 689.039978 l
h
502.079987 696.959961 m
502.079987 701.76001 l
502.559998 702.0 l
502.800018 701.76001 l
502.800018 696.959961 l
502.559998 696.719971 l
502.079987 696.959961 l
h
502.079987 705.119995 m
502.079987 709.679993 l
502.559998 710.159973 l
502.800018 709.679993 l
502.800018 705.119995 l
502.559998 704.640015 l
502.079987 705.119995 l
h
502.079987 713.039978 m
502.079987 717.839966 l
502.559998 718.079956 l
502.800018 717.839966 l
502.800018 713.039978 l
502.559998 712.799988 l
502.079987 713.039978 l
h
502.079987 721.200012 m
502.079987 725.76001 l
502.559998 726.23999 l
502.800018 725.76001 l
502.800018 721.200012 l
502.559998 720.719971 l
502.079987 721.200012 l
h
502.079987 729.119995 m
502.079987 733.919983 l
502.559998 734.159973 l
502.800018 733.919983 l
502.800018 729.119995 l
502.559998 728.880005 l
502.079987 729.119995 l
h
502.079987 737.279968 m
502.079987 741.839966 l
502.559998 741.600037 l
502.079987 741.839966 l
502.559998 742.079956 l
502.800018 742.079956 502.800018 742.079956 502.800018 741.839966 c
502.800018 737.279968 l
502.559998 736.799988 l
502.079987 737.279968 l
h
499.200012 741.600037 m
494.399963 741.600037 l
494.160004 741.839966 l
494.399963 742.079956 l
499.200012 742.079956 l
499.440002 741.839966 l
499.200012 741.600037 l
h
491.039978 741.600037 m
486.47998 741.600037 l
486.0 741.839966 l
486.47998 742.079956 l
491.039978 742.079956 l
491.519989 741.839966 l
491.039978 741.600037 l
h
483.119995 741.600037 m
478.319977 741.600037 l
478.079987 741.839966 l
478.319977 742.079956 l
483.119995 742.079956 l
483.359985 741.839966 l
483.119995 741.600037 l
h
474.959991 741.600037 m
470.399963 741.600037 l
469.919983 741.839966 l
470.399963 742.079956 l
474.959991 742.079956 l
475.440002 741.839966 l
474.959991 741.600037 l
f
n
474.47998 748.079956 m
468.23999 741.839966 l
474.47998 735.600037 l
S
n
483.359985 632.880005 m
483.359985 637.440002 l
483.600006 637.679993 l
484.079987 637.440002 l
484.079987 632.880005 l
484.079987 632.640015 483.839996 632.400024 483.600006 632.400024 c
483.600006 632.400024 483.359985 632.640015 483.359985 632.880005 c
h
483.359985 640.799988 m
483.359985 645.600037 l
483.600006 645.839966 l
484.079987 645.600037 l
484.079987 640.799988 l
483.600006 640.559998 l
483.359985 640.799988 l
h
483.359985 648.959961 m
483.359985 653.519958 l
483.600006 653.76001 l
484.079987 653.519958 l
484.079987 648.959961 l
483.600006 648.47998 l
483.359985 648.959961 l
h
483.359985 656.880005 m
483.359985 661.440002 l
483.600006 661.919983 l
484.079987 661.440002 l
484.079987 656.880005 l
483.600006 656.640015 l
483.359985 656.880005 l
h
483.359985 664.799988 m
483.359985 668.159973 l
483.600006 667.919983 l
482.399963 667.919983 l
481.919983 668.159973 l
482.399963 668.640015 l
483.600006 668.640015 l
483.839996 668.640015 484.079987 668.400024 484.079987 668.159973 c
484.079987 664.799988 l
483.600006 664.559998 l
483.359985 664.799988 l
h
479.039978 667.919983 m
474.23999 667.919983 l
474.0 668.159973 l
474.23999 668.640015 l
479.039978 668.640015 l
479.279999 668.159973 l
479.039978 667.919983 l
h
470.879944 667.919983 m
466.319977 667.919983 l
465.839996 668.159973 l
466.319977 668.640015 l
470.879944 668.640015 l
471.359985 668.159973 l
470.879944 667.919983 l
h
462.959991 667.919983 m
458.160004 667.919983 l
457.919983 668.159973 l
458.160004 668.640015 l
462.959991 668.640015 l
463.200012 668.159973 l
462.959991 667.919983 l
h
454.800018 667.919983 m
450.23999 667.919983 l
449.759979 668.159973 l
450.23999 668.640015 l
454.800018 668.640015 l
455.279999 668.159973 l
454.800018 667.919983 l
h
446.880005 667.919983 m
442.079987 667.919983 l
441.839996 668.159973 l
442.079987 668.640015 l
446.880005 668.640015 l
447.119995 668.159973 l
446.880005 667.919983 l
h
438.720001 667.919983 m
434.160004 667.919983 l
433.679993 668.159973 l
434.160004 668.640015 l
438.720001 668.640015 l
439.200012 668.159973 l
438.720001 667.919983 l
h
430.800018 667.919983 m
426.0 667.919983 l
425.759979 668.159973 l
426.0 668.640015 l
430.800018 668.640015 l
431.039978 668.159973 l
430.800018 667.919983 l
h
422.639984 667.919983 m
418.079987 667.919983 l
417.600006 668.159973 l
418.079987 668.640015 l
422.639984 668.640015 l
423.119995 668.159973 l
422.639984 667.919983 l
h
414.720001 667.919983 m
409.919983 667.919983 l
409.679993 668.159973 l
409.919983 668.640015 l
414.720001 668.640015 l
414.959991 668.159973 l
414.720001 667.919983 l
h
406.559998 667.919983 m
402.0 667.919983 l
401.759979 668.159973 l
402.0 668.640015 l
406.559998 668.640015 l
407.039978 668.159973 l
406.559998 667.919983 l
h
398.639984 667.919983 m
393.839996 667.919983 l
393.600006 668.159973 l
393.839996 668.640015 l
398.639984 668.640015 l
398.880005 668.159973 l
398.639984 667.919983 l
h
390.720001 667.919983 m
385.919983 667.919983 l
385.679993 668.159973 l
385.919983 668.640015 l
390.720001 668.640015 l
390.959991 668.159973 l
390.720001 667.919983 l
h
382.559998 667.919983 m
378.0 667.919983 l
377.519989 668.159973 l
378.0 668.640015 l
382.559998 668.640015 l
382.800018 668.159973 l
382.559998 667.919983 l
h
374.639984 667.919983 m
369.839996 667.919983 l
369.600006 668.159973 l
369.839996 668.640015 l
374.639984 668.640015 l
374.880005 668.159973 l
374.639984 667.919983 l
h
366.47998 667.919983 m
361.919983 667.919983 l
361.440002 668.159973 l
361.919983 668.640015 l
366.47998 668.640015 l
366.959991 668.159973 l
366.47998 667.919983 l
h
358.559998 667.919983 m
358.079987 667.919983 l
358.079987 667.919983 357.839996 667.919983 357.839996 668.159973 c
357.839996 672.719971 l
358.079987 672.959961 l
358.559998 672.719971 l
358.559998 668.159973 l
358.079987 668.640015 l
358.559998 668.640015 l
358.800018 668.159973 l
358.559998 667.919983 l
h
357.839996 675.839966 m
357.839996 680.640015 l
358.079987 680.880005 l
358.559998 680.640015 l
358.559998 675.839966 l
358.079987 675.600037 l
357.839996 675.839966 l
h
357.839996 684.0 m
357.839996 688.559998 l
358.079987 689.039978 l
358.559998 688.559998 l
358.559998 684.0 l
358.079987 683.76001 l
357.839996 684.0 l
h
357.839996 691.919983 m
357.839996 696.719971 l
358.079987 696.959961 l
358.559998 696.719971 l
358.559998 691.919983 l
358.079987 691.679993 l
357.839996 691.919983 l
h
357.839996 700.079956 m
357.839996 704.640015 l
358.079987 705.119995 l
358.559998 704.640015 l
358.559998 700.079956 l
358.079987 699.600037 l
357.839996 700.079956 l
h
357.839996 708.0 m
357.839996 712.799988 l
358.079987 713.039978 l
358.559998 712.799988 l
358.559998 708.0 l
358.079987 707.76001 l
357.839996 708.0 l
h
357.839996 716.159973 m
357.839996 720.719971 l
358.079987 721.200012 l
358.559998 720.719971 l
358.559998 716.159973 l
358.079987 715.679993 l
357.839996 716.159973 l
h
357.839996 724.079956 m
357.839996 728.880005 l
358.079987 729.119995 l
358.559998 728.880005 l
358.559998 724.079956 l
358.079987 723.839966 l
357.839996 724.079956 l
h
357.839996 732.23999 m
357.839996 736.799988 l
358.079987 737.279968 l
358.559998 736.799988 l
358.559998 732.23999 l
358.079987 731.76001 l
357.839996 732.23999 l
h
357.839996 740.159973 m
357.839996 741.839966 l
358.079987 741.600037 l
355.200012 741.600037 l
354.720001 741.839966 l
355.200012 742.079956 l
358.079987 742.079956 l
358.319977 742.079956 358.559998 742.079956 358.559998 741.839966 c
358.559998 740.159973 l
358.079987 739.919983 l
357.839996 740.159973 l
h
351.839996 741.600037 m
347.039978 741.600037 l
346.800018 741.839966 l
347.039978 742.079956 l
351.839996 742.079956 l
352.079987 741.839966 l
351.839996 741.600037 l
h
343.679993 741.600037 m
339.359985 741.600037 l
339.119995 741.600037 339.119995 741.600037 339.119995 741.839966 c
339.119995 742.079956 339.119995 742.079956 339.359985 742.079956 c
343.679993 742.079956 l
344.160004 741.839966 l
343.679993 741.600037 l
f
n
345.600006 748.079956 m
339.359985 741.839966 l
345.600006 735.600037 l
S
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%DocumentNeededResources:
%%+ font Arial-ItalicMT
%%+ font ArialMT
%%+ font Arial-BoldMT
%%EOF
