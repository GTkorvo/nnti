/*! \mainpage Trilinos/Epetra_ESI: Epetra's implementation of ESI.

\section intro Introduction
This documentation describes Epetra's implementation of ESI (Equation
Solver Interfaces).

The ESI interfaces are a collection of abstract (pure virtual) classes,
or interfaces, for "generic" linear-algebra objects such as vectors,
solvers, preconditioners, etc. Epetra's implementations of those interfaces
are thin wrappers, or adapters, which simply map the functionality that's
provided by the concrete Epetra objects into the interfaces specified by
ESI.

At the current time (October 2001) an official "version 1.0" of the ESI
interfaces has not been finalized. The ESI class headers that are
included with this Trilinos distribution, and that Epetra_ESI implements,
reflect the state of ESI as of late October 2001, which should be very close
to what the final specification will be. It is important to note that
if Epetra_ESI is to be used in conjunction with any other ESI implementation,
the ESI headers must be exactly consistent across the entire compilation
scope. If different ESI headers exist between calling code and and
implementing code, or between different implementing objects, then undefined
behavior will result, usually causing segmentation faults and core dumps.


\section startup Overview of Epetra_ESI.

Epetra's ESI implementation provides the tools necessary to assemble matrices
and vectors, including in a distributed-memory parallel setting and perform
operations on them (vector operations such as dot-products, norms, etc.,
matrix-vector products, etc.), Iterative linear solvers and preconditioner
capabilities are also provided. Note that matrix, vector and index-space
 implementations
are provided by Epetra classes, while the esi::Solver implementation is
inherited
from the AztecOO class, which is an encapsulation of the Aztec solver library.
Preconditioner capabilities are available as simply options that can be set on
the aztecoo_esi::Solver object via the aztecoo_esi::Solver::parameters method
(see the example program adaptors/epetra_esi/test/aztec_esi_solver.cpp).

Each Epetra_ESI class inherits the esi::Object interface, which provides the
method esi::Object::getInterface. This method is used for obtaining, at run
time, any of the interfaces that the particular Epetra_ESI object supports. In
all cases, this includes the "native" non-ESI class from which the Epetra_ESI
is derived. As an example, a epetra_esi::Vector object is able to provide
a Epetra_Vector interface, through which all native Epetra vector 
functionality is available.

It should be noted that there are ESI interface methods that are not
implemented by the corresponding Epetra_ESI class. In each case this is
stated in the (doxygen-generated) documentation for that method.

\subsection formulations Epetra_ESI Classes

Here are very brief descriptions of each of the Epetra_ESI classes.

<ul>
<li> epetra_esi::IndexSpace: underlying functionality provided by Epetra_Map.
 Implements the ESI interfaces esi::Object and esi::IndexSpace.

<li> epetra_esi::Vector: underlying functionality provided by Epetra_Vector.
Implements the ESI interfaces esi::Object and esi::Vector.

<li> epetra_esi::CrsMatrix: underlying functionality provided by
Epetra_CrsMatrix. Implements the ESI interfaces esi::Object, esi::Operator,
esi::OperatorTranspose, esi::MatrixData, esi::MatrixRowWriteAccess and
esi::MatrixRowReadAccess. Important NOTE: At construction time, the
epetra_esi::CrsMatrix class requires an already-initialized Epetra_CRS_Graph.
See the test program epetra_esi/test/epetra_esi_crsmatrix.C for an
example of creating a epetra_esi::CrsMatrix.

<li> epetra_esi::Object: no corresponding Epetra class. This is a direct
implementation of esi::Object, which provides the ability to request
particular interfaces from an object, obtain a list of the interfaces that
are supported by an object, store and retrieve 'Run-Time-Models' (usually
this is simply an MPI_Communicator), etc.

<li> epetra_esi::Argv: corresponds roughly to TSF::ParameterList. Currently this
is simply a direct implementation of esi::Argv, which is simply a container
interface for storing and retrieving lists of strings.

<li> aztecoo_esi::Solver: underlying functionality provided by AztecOO.
Implements the ESI interfaces esi::Object, esi::Operator and esi::Solver.

</ul>
\subsection files Epetra_ESI files and directories

<ul>
<li> Headers:
The "package" header, Epetra_ESI.h, includes the headers for each of the
individual Epetra_ESI classes. All Epetra_ESI headers are located in the
Trilinos subdirectory adaptors/epetra_esi/src.

<li> Libraries: A program that uses Epetra_ESI will need to add the epetra_esi,
epetra, and aztec archives to the link line. These archives are located in the
Trilinos subdirectory lib/\$(TRILINOS_ARCH).\$(TRILINOS_COMM)\$(TRILINOS_ID)
where the names in parentheses are the environment variables used by the
Trilinos makefiles.
</ul>

\subsection tests Epetra_ESI examples and unit tests

Example programs (which double as unit tests) that demonstrate using
the various Epetra_ESI objects are provided in the Trilinos subdirectory
adaptors/epetra_esi/test. All of these tests may be compiled and run by typing
'make' in that directory. Below is a list of the example programs.

<ul>
<li> epetra_esi_object.C: exercises various esi::Object functions such as
getInterface, setRunTimeModel, getRunTimeModelsSupported. Also exercises a
couple of esi::Argv functions.

<li> epetra_esi_map.C: exercises various esi::Map and esi::MapPartition
functions, as well as a couple of esi::Object functions. Also verifies that
a Epetra_Map "native" interface can be obtained, on which native Epetra_Map
functions can then be called.

<li> epetra_esi_vector.C: demonstrates the creation and use of esi::Vector
objects (performs dots and norms, etc.). This necessarily also tests several
esi::IndexSpace/epetra_esi::Map capabilities, as well as Epetra_Vector
capabilities (Epetra_Vector provides the implementation of the esi::Vector
methods).

<li> epetra_esi_crsmatrix.C: demonstrates instantiating and filling a matrix
using at least 3 or 4 of the ESI Operator/Matrix interfaces. Necessarily also
exercises map and vector functionalities. Also exercises Epetra_CRS_Graph,
which must be provided to the epetra_esi::CrsMatrix at construction.

<li> aztec_esi_solver.C: demonstrates creating and filling a linear system
(matrix and vectors, along with their prerequisite Epetra_CRS_Graph and map
objects), then uses an aztecoo_esi::Solver object to solve the linear system
using Aztec.
</ul>

\subsection instantiations Epetra_ESI headers and template instantiation
Epetra_ESI classes rely heavily on templates, and template instantiation
behavior can vary from one platform to another. Epetra_ESI classes can be
used in two major ways:<br>
<ul>
<li>Have Epetra_ESI headers include class declarations only.<br>
This is the default behavior (no preprocessor symbol need be defined). This
requires that you also include '-lepetra_esi' on the link line for your
executable. Note that the libepetra_esi.a archive only includes instantiations
of Epetra_ESI classes for the double and int types. 

<li>Have Epetra_ESI headers include class declarations AND implementations<br>
To trigger this behavior, use the preprocessor symbol <br>
EPETRA_ESI_INCLUDE_IMPLEMENTATION<br>
either as a '-D' compiler flag when compiling sources that include Epetra_ESI
headers, or using a preprocessor 'define' in your code.<p>
Possible side effect: on some platforms, this results in multiply-defined
symbol errors at link time if you have included Epetra_ESI headers from
more than one of your source files, because the Epetra_ESI templates get
instantiated for each compilation scope they are included in.<p>
</ul>

\subsection error_behavior Epetra_ESI error behavior
Most Epetra_ESI class methods return integer error-codes which are 0 if no
error was encountered, or non-zero if a severe error was detected. (Note that
this doesn't apply to constructors, which call abort() if they detect a
severe error.) If you define the preprocessor symbol<br>
EPETRA_ESI_ABORT_ON_ERROR<br>
when building Epetra_ESI (and also when including Epetra_ESI headers) then all
Epetra_ESI methods will abort rather than returning an error-code, if
a severe error is detected.

*/
