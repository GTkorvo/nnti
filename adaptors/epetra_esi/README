You are in the directory $(TRILINOS_HOME)/adaptors/epetra_esi

Epetra_ESI is an implementation of the ESI interface spec, based on
the Epetra and AztecOO packages in Trilinos.

Epetra_ESI documentation is located under the doc subdirectory. The HTML
version may be viewed starting at doc/html/index.html
This documentation is generated with the doxygen tool. If your Trilinos
distribution doesn't already have the documentation built, you may build
it with:
  % cd doc
  % doxygen

Before getting started with Epetra_ESI, you will need to build the
Trilinos packages Epetra and AztecOO, as well as the y12m library which
is located in the $(TRILINOS_HOME)/external directory.

The Epetra_ESI sources are in the src subdirectory, and test/example
programs are in the test subdirectory. To build and run these tests:
 % cd test
 % make

To use Epetra_ESI classes in your program, add the include path
  -I$(TRILINOS_HOME)/adaptors/epetra_esi/src
when compiling your program, and include the file
  #include "Epetra_ESI.h"

Note that your include paths must also contain paths to epetra and aztecoo:
  -I$(TRILINOS_HOME)/packages/epetra/src
  -I$(TRILINOS_HOME)/packages/aztecoo/src


If you define the compiler preprocessor symbol
   -DEPETRA_ABORT_ON_ERROR
then any fatal errors detected by Epetra_ESI classes will trigger an abort
rather than the default behavior of returning an error-code. Note that this
doesn't apply to constructor implementations, which always abort if they
detect a severe error.

There are two different ways to use Epetra_ESI classes in your program:

1. Declarations and implementations both included in Epetra_ESI headers.

   If you define the compiler preprocessor symbol:
      -DEPETRA_ESI_INCLUDE_IMPLEMENTATION
   when compiling code that uses Epetra_ESI classes, then the class 
   implementations are included along with the headers, and you do not
   need to add '-lepetra_esi' to your executable's link line.

   Possible side effect: If you include Epetra_ESI headers from more than
   one compilation scope (separate files that produce separate .o's), then
   on some platforms you may get multiply-defined symbol errors at link time.

2. Only declarations included in Epetra_ESI headers.

   This is the default. If you don't define the above preprocessor symbol,
   Epetra_ESI headers only include class declarations, not implementations,
   and you must then add '-lepetra_esi' to your executable's link line.

   In this case, when building Trilinos, you must make sure that the 
   'epetra_esi' target is built. If it doesn't happen by default, you can
   build it explicitly like this:
   % cd $TRILINOS_HOME/build
   % make epetra_esi


Questions about Trilinos may be directed to:
Mike Heroux (mheroux@cs.sandia.gov)
Questions about Epetra_ESI in particular may be directed to:
Alan Williams (william@sandia.gov)

