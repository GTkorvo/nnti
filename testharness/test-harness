#!/usr/bin/perl -w
# trilinos-check
#
# Jim Willenbring
#

### FIND CONFIGURE-SCRIPT rather than indicating where they are???

# The purpose of this file is to automate the process of running existing trilinos serial and
# parallel test scripts.  A simple way to automate the script is to use cron.  This must be done 
# for each new machine that the script is to be run on.  Moving to an automated system will allow 
# for frequent testing on several different platforms.  This will lead to faster bug detection by
# the Trilinos development team.

# To run this script, simply cd to the directory in which it is located and type 'perl trilinos-check'
# Currently, there are no command line options.  Before running the script, set the paths
# listed in the section 'THESE OPTIONS CAN BE CONFIGURED AS NEEDED'.  Also, see the 'subdir-list'
# file located in the same directory as this file.  

# Required files:
# trilinos-check is the main driver program.  It calls existing test scripts - autotoolsTestAll and autotoolsTestAllMpi
# which are included in the Trilinos package in Trilinos/packages/epetra/test/.  trilinos-check is 
# based on Paul Lin's salsa-check, which was adapted from Gary Hennigan's Salsa-Check.sh
#
# The directory homedir (defined below) should contain a file called "subdir-list".
# This file should list the desired combinations of Trilinos compile flags.
# In this way, multiple builds can be tested.  If this file is not present, a defalut set of
# parameters will be attempted, however, it is recommended that a subdir-list file be used.

# Other required files include:
# mpigo, mpigo_nv - wrappers around mpirun.  These are found in autotest/bin
## Add something about MIME here when I figure out exactly what is required.

# Other requirements:
# Must have access to Trilinos CVS repository - this access cannot require a password
# (See related option below: cvsroot)

# Output
# When testing is complete, or is aborted due to errors, an email is sent to the Trilinos
# developers mailing list.  (Email is not guaranteed to be sent after catastrophic errors.)
# This email includes a general summary, as well as attachments that
# summarize errors and warnings that ocurred during testing.

#
# Useful vocabulary
#

# Parameters - compile flags for building Trilinos
#              ex. TRILINOS_ID=_DEBUG TRILINOS_COMM=SERIAL

#
# THESE OPTIONS CAN BE CONFIGURED AS NEEDED
#
## May want to create a configure file to do this

### Need to redo comments to account for autotools and new directory structure (keep this file in repos) - also note that subdirs must be set up as desired.
### Try a make dist also to ensure tarballs can be made
### This would be a good place to include instructions on how to write scripts.
# location of the directory in which this file is located
# default location is just below user's home directory
my $homedir="$ENV{'HOME'}/Trilinos";
my $frequency="daily"; #default value
chomp(my $date=`date`);
if ($date =~/Sun/) {
  $frequency="weekly";
}
print "$frequency\n";
# Set proper location of cvsroot and cvscmd
my $cvsroot=":ext:jmwille\@software.sandia.gov:/space/CVS";
my $cvscmd="cvs";

# name of the file containing the names of the machines to be used for parallel jobs
# If this file doesn't exist, parallel jobs will be run on the local machine only
my $basehostfile='hostfile'; # change filename here if necessary
# Location of $basehostfile
my $hostfile="$homedir/$basehostfile"; # change path here if necessary


#
# Determine host os
#

## When porting, port in autotest dir
## need mpigo_nv somewhere in tar ball

chomp (my $hostos=`uname -a`);
chomp (my $ARCH=`uname`); # This value must match the middle portion of the name of the log
# file written to by the testAll file - for example on a Linux platform, the
# log file is called logLinux.txt, so $ARCH=Linux
SWITCH: {
## List of current supported platforms: AIX, CPLANT, DEC, IBMSP, LINUX, SGI32, 
## SGI64, SMOS, SOLARIS, TFLOP, sun
## If MIME::Lite is used in the end, include the file somewhere in Trilinos
  if ($hostos=~/^Linux/) {
    use lib "lib"; #ended up needing to use a relative address
    last SWITCH; };
  if ($hostos=~/^SunOS/) {
    use lib "/Net/pecos/home1/jmwille/lib";
    last SWITCH; };
  if ($hostos=~/^CYGWIN/) {
    MIME::Lite->send('smtp',"mailgate.sandia.gov"); #doesn't have sendmail
    use lib "/home/jmwille/lib";
    last SWITCH; };
  ## Fix the rest of the switch statement, currently functional for LINUX only
###  if ($hostos=~/^Linux.+cluster/||$hostos=~/^Linux.+node/) {$TRILINOS_ARCH='linux-lam-cluster'; last SWITCH; };
###  if ($hostos=~/^Linux.+cluster/) {$TRILINOS_ARCH='linux-lam-cluster'; last SWITCH; };
  die "hostos does not match any of the OS choices.\n";
}
print "\$hostos=$hostos\n";

# permissions needed
my $permissions=0775;

chdir"$homedir";
use lib "lib"; #ended up needing to use a relative address - don't need?
use MIME::Lite; # This is a utility to facilitate email sending

#
# Setup files to use in email
#

my $errorcount=0; # Doesn't count the actual number of errors, but rather
                  # the number of times ERRORS is written to.
my $warningcount=0; #Analogous to errorcount
my $updateerror=0; # If an error occurs during the cvs update, this 
                     # indicates that updatelog.txt should be attached
my $trilinosCompileError=0; # If an error occurs during the compilation of 
                     # Trilinos, this indicates that trilinosCompileLog.txt
                     # should be attached
my $testCompileError=0; # If an error occurs during the compilation of one of
                        # the tests, this indicates that testCompileLog.txt
                        # should be attached
open (ERRORS, ">>errors.txt") or die "$! error trying to open file";
open (WARNINGS, ">>warnings.txt") or die "$! error trying to open file";
# Summary file serves as the body of the email, rather than an attachment
open (SUMMARY, ">>summary.txt") or die "$! error trying to open file";

#
# Update Trilinos from CVS repository
#

my $result;
chdir"$homedir";
print "$cvscmd update -dP > $homedir/updatelog.txt 2>&1\n";
$result=system "$cvscmd update -dP > $homedir/updatelog.txt 2>&1";
if ($result) {
  ++$errorcount;
  ++$updateerror;
  print ERRORS "*** Error updating Trilinos ***\n Aborting tests.\nSee updatelog.txt for further information";
  &sendemail;
  die " *** ERROR updating TRILINOS! ***\n";
}


#
# Determine which Build directories are to be used in the test process
# based on the subdir-list file.
#

my @subdirs;
my $numsubdirs=0;
my $mpi=0;
my $basesubdirfile='subdir-list'; # no real need to change this
my $subdirfile="$homedir/testharness/$basesubdirfile";
if (! -f $subdirfile) {
  ++$warningcount;
  print WARNINGS "WARNING: $subdirfile does not exist.\n";
  &usedefaultparameters;
}
else {
  open SUBDIRECTORIES, "$subdirfile";
  chomp(@lines=<SUBDIRECTORIES>);
  close SUBDIRECTORIES;
  foreach $line (@lines) {
    # ignore comment lines (comment lines start with a pound sign)
    unless ($line=~/^\s*#/ || $line=~/^\s+$/ || $line=~/^$/) {
	    print "$line\n";
	    $subdirs[$numsubdirs]=$line;
	    ++$numsubdirs;
	    chdir"$homedir/$line";
	    open (SCRIPT, "configure-script") or die "$! error trying to open file";
	    my $commcheck=<SCRIPT>;
	    close SCRIPT;
	    # Check if the configure script indicates a parallel or serial build
	    if ($commcheck=~/--enable-mpi/i) {
	      ++$mpi;
	    }
	  }
  }
  if (! $numsubdirs) {
    ++$warningcount;
    print WARNINGS "WARNING: No valid parameter sets found in $subdirfile\n";
    &usedefaultparameters;
  }
}
#
# Check if any tests are parallel tests, if so, do a lamboot.
# if mpich is used, comment out this section and the lamhalt section
#

if ($mpi) {
  unless (! -f $hostfile) {
    system "lamboot $hostfile -v";
  }
  else {
    system "lamboot"; ## Could need to be another MPI implementation
  }
}

#
# Find all 'test' directories that may contain scripts that need to be executed
#
chdir"$homedir";
system "find packages/ -name test -print > list_of_test_dirs";
### May need to append to list_of_test_dirs to account for test
### directories in contrib or other directories not in packages/
### could also search from '.', but then must make sure ALL
### builddirs are blown away before find'ing.

#
# Compile the required Trilinos builds for tests determined above
#
my $comm="serial";
my $compileFail=0;
for (my $i=0; $i<$numsubdirs; $i++) {
  chdir"$homedir/$subdirs[$i]";
  open (SCRIPT, "configure-script") or die "$! error trying to open file\n$subdirs[$i]/configure-script\n";
  my $configscript=<SCRIPT>;
  close SCRIPT;
        if ($configscript =~/--enable-mpi/i) {
	  $comm="mpi";
	}
	else {
	  $comm="serial";
	}
#don't do this	$compileFail+=system "mv configure-script ../";
#don't do this	$compileFail+=system "rm -rf *";
#don't do this	$compileFail+=system "mv ../configure-script .";
#Note that the 'configure-script' script must be executable
	$compileFail+=system "./configure-script >> $homedir/trilinosCompileLog.txt 2>&1";
	$compileFail+=system "make >> $homedir/trilinosCompileLog.txt 2>&1";
	if ($compileFail) {
	  # The build process failed, skip associated tests, report the failure
	  ++$errorcount;
	  ++$trilinosCompileError;
	  print ERRORS "Trilinos compilation process failed for the $subdirs[$i] test.\nWill skip associated tests.\n";
	  &sendemail;
	  $compileFail=0; # reset so the positive value doesn't trigger an error again
	}
	else {
	  #
	  # Run tests
	  #

	  chdir"$homedir";
	  open TESTDIRECTORIES, "list_of_test_dirs";
	  chomp(@alltestdirs=<TESTDIRECTORIES>);
	  close TESTDIRECTORIES;
	  foreach $testdirectory (@alltestdirs) {
	    # for packages that have not been ported to a particular platform,
	    # the tests associated with such a package could be skipped below
	    # use unless (uname =.. && $testdirectory=..) to skip
	    # Packages excluded below (jpetra, tpetra, etc) do not yet build
	    # with autotools
	    unless ($testdirectory=~/^\s+$/ || $testdirectory=~/^$/ || $testdirectory=~/tpetra/ || $testdirectory=~/jpetra/ ) {
	      chdir "$homedir/$subdirs[$i]";
		unless (-e $testdirectory) { # This could happen if no tests
		  # in the 'test' subdir for a package have been autotool'ed
		  system "mkdir $testdirectory";
		}
	      print "$testdirectory\n";
	      chdir "$homedir/$subdirs[$i]/$testdirectory";

	      $compileFail=0;
	      system "find $homedir/$testdirectory/scripts/$frequency/$comm -maxdepth 1 -type f > list_of_files";
	      open FILELIST, "list_of_files";
	      chomp(@potentialscripts=<FILELIST>);
	      close FILELIST;
	      foreach $potentialscript (@potentialscripts) {
		if (-x $potentialscript ) {
		  print "*** $potentialscript ***";
		  $compileFail+=system "$potentialscript $subdirs[$i] True >> $homedir/testCompileLog.txt 2>&1";
		  if ($compileFail) {
		    ++$errorcount;
		    ++$testCompileError;
		    print ERRORS "Trilinos test suite failed for $subdirs[$i] tests.\n\n";
		  }
		  #
		  # Create and send an email
		  #
		  &sendemail;
		  $compileFail=0; # reset so the positive value doesn't trigger an error again
		}
	      }
	    }
	  }
	}
      }
#
# Check if any tests were parallel tests, if so, do a lamhalt.
#


chdir"$homedir";

if ($mpi) {
	system "lamhalt"; # Could need to be another MPI implementation 
}

#
# Close filehandles and delete temp files
#

close SUMMARY;
close ERRORS;
close WARNINGS;

system "rm -f list_of_test_dirs";

#
# This subroutine is called when script is forced to try default parameters
#

sub usedefaultparameters {
  ++$warningcount;
  print WARNINGS "WARNING: trying default parameters.\n";
  ## maybe should have defaults for each platform some day
  $subdirs[0]='SERIAL';
  $subdirs[1]='MPI';
  ++$mpi;
  $numsubdirs=2;
  print WARNINGS "Default subdirectories $subdirs[0] $subdirs[1]\n";
}

#
# This subroutine is called when it is time to send the email - either
# when the tests are complete or when an error occurs from which the
# script cannot recover
#

sub sendemail {
  chdir"$homedir";
  # The following line constructs the name of the log that is produced during 
  # tests whether errors occurred or not.  (-v not used.)
  my $testfile2=join("",'log',$ARCH,'.txt');
  my $scriptowner="";
  if ( -f $testfile2) {
    system "mv $homedir/$testfile2 summary.txt";
    open (OWNER, "summary.txt") or die "$! error trying to open file";
    $scriptowner=<OWNER>;
    close OWNER;
  }
  # List addresses for all emails to be sent to below - should eventually
  # make the 'To' field package specific
  my $to=join ", ", 'jmwille@sandia.gov';
  chomp $scriptowner;
  print "$scriptowner";
  my $mail_to;
  # A valid email address must contain a '@'
  if ($scriptowner =~/@/i) {
#    my $mail_to=join ", ", 'jmwille@sandia.gov','jmwille',$scriptowner;
    $mail_to=join ", ", $to,$scriptowner or die "$! error forming To: field";
  }
  else {
    # List where emails without a script owner should be sent
    $mail_to=join ", ", $to;
  }

  print "\n**$mail_to**\n";

  my $testfile="$homedir/logErrors.txt";
  my $testfile1="$homedir/logMpiErrors.txt";
#construct and send message using MIME-Lite
  open (SUMM, ">>summ.txt") or die "$! error trying to open file";
  if ($errorcount || -f $testfile ||  -f $testfile1 || $warningcount || $updateerror || $testCompileError || $trilinosCompileError) {

    # At least one problem occurred throughout the course of testing
    my $subject_line=join " - ", $ARCH,'At least one test failed';
    my $msg=MIME::Lite->new(
			    From =>'jmwille@sandia.gov',
#			    To =>'jmwille@sandia.gov, jmwille',
			    To => $mail_to,
			    Subject => $subject_line,
			    Type =>'multipart/mixed'
			   );
  $msg->attach(Type=>'TEXT',
	      Path=>'summ.txt',
	      Disposition=>'inline'
	     );
    if ($potentialscript) {
      print SUMM "Test script: ";
      print SUMM $potentialscript;
      print SUMM "\n";
    }
  if ($frequency =~/weekly/) {
    print SUMM "Results of weekly test:\n";
  }
  elsif ($frequency =~/daily/) {
    print SUMM "Results of daily test:\n";
  }
  else {
    print SUMM "Warning: Unknown test frequency, results below:\n";
  }
  if ( -f $testfile1) {
    print SUMM "--> Parallel testing did not complete successfully.\n";

    if ($testCompileError) {
    print SUMM "This failure is probably due to the compile time errors listed in the attachment \"testCompileLog.txt\".\nIf that does not appear to be the case, ";
  }

    print SUMM "See attachment \"logMpiErrors.txt\".\n\n";
    $msg->attach(Type=>'TEXT',
		 Path=>'logMpiErrors.txt',
		 Disposition=>'attachment'
		);
  }

  if ( -f $testfile) {
    print SUMM "--> Serial testing did not complete successfully.\n";

  if ($testCompileError) {
    print SUMM "This failure is probably due to the compile time errors listed in the attachment \"testCompileLog.txt\".\nIf that does not appear to be the case, ";
  }
    print SUMM "See attachment \"logErrors.txt\".\n\n";
    $msg->attach(Type=>'TEXT',
		 Path=>'logErrors.txt',
		 Disposition =>'attachment'
		);
  }

  if ($testCompileError) {
    $msg->attach(Type=>'TEXT',
		 Path=>'testCompileLog.txt',
		 Disposition=>'attachment'
		 );
  }

  if (-f "errors.txt") {
    print SUMM "--> For additional information about errors that occured, \nSee attachment \"errors.txt\".\n\n";
    $msg->attach(Type=>'TEXT',
		 Path=>'errors.txt',
		 Disposition =>'attachment'
		 );
  }
  if ($warningcount) {
    print SUMM "--> At least one non-testing warning occurred (i.e. script/paramter related).\nSee attachment \"warnings.txt\".\n\n";
    $msg->attach(Type=>'TEXT',
		 Path=>'warnings.txt',
		 Disposition =>'attachment'
		);
  }
  if ($updateerror) {
    print SUMM "--> At least one error occurred during CVS update.\nSee attachment \"updatelog.txt\".\n\n";
    $msg->attach(Type=>'TEXT',
		 Path=>'updatelog.txt',
		 Disposition=>'attachment'
		 );
  }
  if ($trilinosCompileError) {
    print SUMM "--> At least one error occurred while compiling Trilinos.\nSee attachment \"trilinosCompileLog.txt\".\n\n";
    $msg->attach(Type=>'TEXT',
		 Path=>'trilinosCompileLog.txt',
		 Disposition=>'attachment'
		 );
  }
    print SUMM "************************************************\nThe following is the output from the test script listed above (or failed compile attempt).\nPlease note that the -v option was not selected for this log.\nNOTE:Depending on your Mail User Agent (MUA), the test summary will either appear below, or it will be attached as a file called \"summary.txt\".\nSee any attachments listed above for more details.\n*************************************************\n";
    if (-f "summary.txt") {
      $msg->attach(Type =>'TEXT',
		   Path=>'summary.txt',
		   Disposition=>'inline'
		  );
    }
$msg->send;
system "rm -f logErrors.txt logMpiErrors.txt";

  }
  else {
    # No problems occurred of any kind
    my $subject_line=join " - ", $ARCH,'All tests passed';
    my $msg=MIME::Lite->new(
			    From =>'jmwille@sandia.gov',
			    To => $mail_to,
			    Subject => $subject_line,
			    Type =>'multipart/mixed'
			   );
  $msg->attach(Type=>'TEXT',
	      Path=>'summ.txt',
	      Disposition=>'inline'
	     );
    if ($potentialscript) {
      print SUMM "Test script: ";
      print SUMM $potentialscript;
      print SUMM "\n";
    }
  if ($frequency =~/weekly/) {
    print SUMM "\nResults of weekly tests:\n";
  }
  elsif ($frequency =~/daily/) {
    print SUMM "\nResults of daily tests:\n";
  }
  else {
    print SUMM "\nWarning: Unknown test frequency, results below:\n";
  }

    print SUMM "*****************************************************\nThe following is the output from the test script listed above.\nPlease note that the -v option was not selected for this log.\nWhile no errors occurred during this test, this log can still be examined to see which tests were run.\nNOTE:Depending on your Mail User Agent (MUA), the test summary will either appear below, or it will be attached as a file called 'summary.txt'\n******************************************************";

  $msg->attach(Type =>'TEXT',
	       Path=>'summary.txt',
		 Disposition=>'inline'
	      );
$msg->send;
  }

close SUMM;

# Reset error/warning indicators so that errors are not triggered for any
# remaining tests
$errorcount=0;
$warningcount=0;
$updateerror=0;
$trilinosCompileError=0;
$testCompileError=0;

system "rm -f errors.txt warnings.txt updatelog.txt summary.txt trilinosCompileLog.txt testCompileLog.txt summ.txt";

}
