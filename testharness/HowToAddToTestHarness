How to Add a Script to the Test Harness (DRAFT)

-Preliminaries:

This discussion assumes that the reader has test executables for one or more 
Trilinos packages that are produced by autotools and would like to add those
tests to the automated daily or weekly testing for Trilinos.  These tests
should return 0 to indicate 'pass' and nonzero to indicate 'fail' (See
section below on how to return status).  Developers who have written tests 
that do not return such values, but rather produce output that is visually 
inspected, can consider wrapping an additional script around their existing 
test that performs one or more string comparisons to determine whether the 
test passed or failed.  An example of this can be found in 
Trilinos/packages/aztecoo/test/AztecOO_UserOpUserMat.
Scripts should have an option that can allow the test(s) to run without any 
output to standard out or standard error.  Many tests use a "-v" 
verbose option to fulfill this requirement.  In this case, the test is run once
silently and, if errors occur, the script is run again in verbose mode.  The 
output should then be captured in a file for the test harness.  Another more 
efficient option is to produce an output file during the initial run of the 
test, and then copy the file to where the test harness can find it if errors 
occur.  

-Platforms that currently run the test harness:

Linux
SGI64
DEC/OSF1
Sun*

* Testharness is only partially operational on these platforms.

-Basic Structure

There are three primary components that form the Trilinos test harness.

1) The core file is a perl script (Trilinos/testharness/test-harness).  This 
script must be executed to run the test harness.  It performs a sequence of 
tasks necessary to complete periodic testing (update source, rebuild libraries 
and tests, call scripts that run the tests, send results emails, etc).  A 
developer does not need to know exactly how this script works, or what it does 
to contribute new tests to the test harness.

2) Shell scripts that are called by 

-Writing a script to call the test executables.

Scripts used in the test harness must follow certain requirements.  These
requirements are easy to follow for packages using a directory structure like
that of epetra.  Other directory structures require slightly more work.
See Trilinos/packages/epetra/test/scripts/daily/mpi/epetraTestAllMpi for 
an example of how to write a script that will run tests in parallel.  See 
Trilinos/packages/epetra/test/scripts/daily/serial/epetraTestAll for an 
example of how to write a script that will run tests in serial.  When 
customizing these files, pay special attention to the lines beginning with
'##'.  Also, keep in mind that paths must be specified relatively.  Reading
ahead is highly recommended as it will help a script author determine where
the finished script will live.  Questions or comments can be directed to 
jmwille@sandia.gov.

-Adding the script to the automated process.

After a script is finished, adding it to the test harness is easy.  The 
directory that the script should reside in is based on whether the script is
to be run in parallel or serial, and if the script should be run daily or 
weekly.  For example, if a script is to be run in parallel on a daily basis,
check it into the repository in the
Trilinos/packages/(name_of_package)/test/scripts/daily/mpi/ directory.  If
this directory does not exist, create it; the test harness will find it.
Note that if the automake structure needs to be constructed down to the script
level that the Makefile.am's and Makefile.in's in each directory will also 
have to be checked into the repository.  In addition, if these makefiles have 
to be added, the Makefile.am at the "test" level will have to be edited to 
include "scripts" on the SUBDIRS line.  When all necessary changes have been 
made to the automake structure, remember to bootstrap.

The owner listed inside the script will receive emails with test results.


How to indicate whether or not test passed (properly returning status)

Some description of how to define $status

-Future enhancements

In the near future we will add a trilinosdata directory to store data that
can be used as inputs for tests.  The test harness will be run on additional
platforms as the harness is ported to those platforms.

Questions, comments, and suggestions concerning these instructions and the
process in general are welcome.  Contact jmwille@sandia.gov.
