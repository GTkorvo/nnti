#!/usr/bin/perl
#==========================================================================
# gcovmerge
#
# A script for automatically extracting and merging coverage information
# from C++ programs compiled using 'g++ -fprofile-arcs -ftest-coverage'.
#
# Usage: 
#
#        gcovmerge [--with-files=min-max]           \
#                  [--with-directories]             \
#                  [--without-files]                \
#                  [--with-total]                   \
#                  [--exclude=word]                 \
#                  path
#
# Arguments:
#
#        path
#            The path to search for .bb and .bbg files (which are the
#            markers for programs compiled with the appropriate
#            arguments).
#
#        --with-files=min-max [0-100]
#            When specified, no coverage information is displayed for
#            any individual files with a coverage percent outside of 
#            the range given.
#
#        --with-directories
#            When specified, coverage percentages are displayed for
#            each directory examined.
#
#        --without-files
#            No coverage information will be given for individual files.
#
#        --exclude=word []
#            No files with word in their name or path will be examined.
#            This option may be specified more than once, in order to
#            exclude a variety of files.
#
#        --with-total   
#            The total coverage for all files examined will be displayed.
#
# Written by Joe Outzen, for the Trilinos project.
#
#==========================================================================
sub round{
    $int = $_[0];
    $int =~ s/(\d*)(\.\d*)?/$1/;
    if($_[0] - $int >= 0.5){
	$int = $int + 1;
    }else{
	$int = $int;
    }
}
use Cwd;
chomp($base = cwd);
$last = "!";
$sdir = pop;
$covmax = 100;
$covmin = 0;
$fc = 0;
$tc = 0;
$texec = 0;
$tcomp = 0;
@exlist = ();
foreach (@ARGV){
    if(/--with-files=(\d+)-(\d+)/){
	$covmin = $1;
	$covmax = $2;
    }
    elsif(/--with-directories/){
	$fc = 1;
    }
    elsif(/--without-files/){
	$covmin = 100;
	$covmax = 0;
    }
    elsif(/--exclude=(.*)/){
	push @exlist, $1;
    }
    elsif(/--with-total/){
	$tc = 1;
    }
    else{ 
	die "Invalid paramater: $_"; 
    }
}

foreach (`find $sdir -name "*.bbg"`){
    $skip = 0;
    s/((.*\/)*).*$/$1/;
    chomp;
    next if $_ eq $last;
    $last = $_;
    foreach (@exlist){
	if($last =~ /$_/){
	    $skip = 1;
	    last;
	}
    }
    if($skip){ next;}
    chdir $_ or die "could not cd to $_\n";
    unless($fc) {print "\tNow in $_.\n";}
    $fexec = 0;
    $fcomp = 0;
    %filelist = ();
    foreach (<*.bbg>){
	$file = $_;
	$skip = 0;
	foreach (@exlist){
	    if($file =~ /$_/){
		$skip = 1;
		last;
	    }
	}
	if($skip){next;}
	chomp;
	foreach $line (`gcov -n $_ 2> /dev/null`){
	    if($line =~ /\s*(\d+\.\d+)% of (\d+)( source)? lines executed in file ([^\/][\w\.\/]+)/ && !defined($filelist{$4})){
		$fcomp += $2;
		$tcomp += $2;
		$fexec += &round($1 * $2 / 100);
		$texec += &round($1 * $2 / 100);
		$filelist{$4} = $1;
	    }
	}
    }
    foreach(sort(keys(%filelist))){
	if($filelist{$_} >= $covmin && $filelist{$_} <= $covmax){
	    $s = " " x (55 - length);
	    print "\t$_$s$filelist{$_}%\n";
	}
    }   
    if($fc){
	if($fcomp > 0){
	    $fper = 100 * $fexec / $fcomp;
	}else{
	    $fper = 0;
	}
	$s = " " x (50 - length);
	s/$/$s/;
	print "$_$fper%\n";
    }
    chdir $base;
}

if($tc){
    print "Total: ".($tcomp == 0 ? 0 : 100 * $texec / $tcomp)."%\n";
}
