#!/usr/bin/perl -w
# checkin-test-harness
#
# Jim Willenbring
#

### May want to break out code for compiling and running into separate files
### that can be used for both the checkin script and the nightly test script.

# The purpose of this file is to simplify the process of running existing
# trilinos serial and parallel test scripts.  This script will run many of the
# tests that need to be run before a developer can commit changes.

# When running mpi tests, make sure to fire up mpi if necessary (ie lamboot).
# To run this script, simply cd to the directory in which it is located and
# type 'perl checkin-test-harness'
# Currently, there are no command line options.  Before running the script,
# set the paths listed in the section 'THESE OPTIONS CAN BE CONFIGURED AS 
# NEEDED'.  Before attempting to run this script, see the 'subdir-list' file 
# located in the same directory as this file for further setup instructions.

# Required files:
# checkin-test-harness is the main driver program.  It calls existing test
# scripts associated with various Trilinos packages.  checkin-test-harness is
# based on Paul Lin's salsa-check, which was adapted from Gary Hennigan's
# Salsa-Check.sh

# The directory homedir (defined below) should contain a file called
# "subdir-list".  This file should list buid directories that are to be 
# used in the testing process.  These directories must be direct subdirectories
# of  Trilinos/ and contain "invoke-configure" scripts.  These scripts, as
# the name implies, pass arguments to the "configure" script.  When writing
# these "invoke-configure" scripts keep in mind that scripts for mpi builds
# MUST contain "--enable-mpi" on the first line.  The test harness keys on this
# string when deciding which test scripts to look for.  By specifying multiple
# build directories in the subdir-list file, multiple builds can be tested.
# Minimally, developers should list at least one serial and one mpi build
# directory in the subdir-list file.  This will help ensure that the general
# serial and mpi builds of Trilinos are not broken by a commit.

# Output

#
# Useful vocabulary
#

# configure options - Those options found in the "invoke-configure" scripts.
#                     Options can include turning on mpi, library paths,
#                     enabling/disabling packages, etc.

#
# THESE OPTIONS CAN BE CONFIGURED AS NEEDED
#

# location of the top-level "Trilinos" directory
# default location is just below user's home directory
my $homedir="$ENV{'HOME'}/test/Trilinos";

#
# Determine host os
#

chomp (my $hostos=`uname -a`);
chomp (my $ARCH=`uname`); # This value must match the middle portion of the 
# name of the log file written to by the testAll file - for example on a Linux
# platform, the log file is called logLinux.txt, so $ARCH=Linux
my $frequency="daily"; #daily tests are used for commits

print "\$hostos=$hostos\n";

chdir"$homedir";
#
# Setup files used for reporting results
#
($sec,$min,$hour,$mday,$mon,$year) = localtime();
$year+=1900;
my $logdate="$mday\_$mon\_$year\_$hour\_$min\_$sec";
my $errorcount=0; # Doesn't count the actual number of errors, but rather
                  # the number of times ERRORS is written to.
my $warningcount=0; #Analogous to errorcount
my $trilinosCompileError=0; # If an error occurs during the compilation of 
                     # Trilinos, this indicates that trilinosCompileLog.txt
                     # should be attached
my $testCompileError=0; # If an error occurs while running one of
                        # the tests, this indicates that testCompileLog.txt
                        # should be attached
my $problemencountered=0; # The error and warning counting (as tracked above) 
                    #occurs on a per script basis; this variable will carry 
                    # over through all scripts and will produce the "passed" 
                    # or "failed" portion of the log file name.

open (ERRORS, ">>errors.txt") or die "$! error trying to open file";
open (WARNINGS, ">>warnings.txt") or die "$! error trying to open file";
# Summary file serves as the body of the email, rather than an attachment
open (SUMMARY, ">>summary.txt") or die "$! error trying to open file";

#
# Determine which Build directories are to be used in the test process
# based on the subdir-list file.
#

my @subdirs;
my $numsubdirs=0;
my $mpi=0;
my $basesubdirfile='subdir-list'; # no real need to change this
my $subdirfile="$homedir/testharness/$basesubdirfile";
if (! -f $subdirfile) {
  ++$warningcount;
  print WARNINGS "WARNING: $subdirfile does not exist.\n";
  &usedefaultparameters;
}
else {
  open SUBDIRECTORIES, "$subdirfile";
  chomp(@lines=<SUBDIRECTORIES>);
  close SUBDIRECTORIES;
  foreach $line (@lines) {
    # ignore comment lines (comment lines start with a pound sign)
    unless ($line=~/^\s*#/ || $line=~/^\s+$/ || $line=~/^$/) {
	    print "$line\n";
	    $subdirs[$numsubdirs]=$line;
	    ++$numsubdirs;
	    chdir"$homedir/$line";
	    open (SCRIPT, "invoke-configure") or die "$! error trying to open invoke-configure file";
	    my $commcheck=<SCRIPT>;
	    close SCRIPT;
	    # Check if the configure script indicates a parallel or serial build
	    if ($commcheck=~/--enable-mpi/i) {
	      ++$mpi;
	    }
	  }
  }
  if (! $numsubdirs) {
    ++$warningcount;
    print WARNINGS "WARNING: No valid build directories listed in $subdirfile\n";
    &usedefaultparameters;
  }
}

#
# Find all 'test' directories that may contain scripts that need to be executed
#
chdir"$homedir";
system "find packages/ -name test -print > list_of_test_dirs";
# May need to append to list_of_test_dirs to account for test
# directories in contrib or other directories not in packages/

#
# Compile the required Trilinos builds for tests determined above
#
my $comm="serial";
my $compileFail=0;
for (my $i=0; $i<$numsubdirs; $i++) {
  chdir"$homedir/$subdirs[$i]";
  open (SCRIPT, "invoke-configure") or die "$! error trying to open file\n$subdirs[$i]/invoke-configure\n";
  my $configscript=<SCRIPT>;
  close SCRIPT;
        if ($configscript =~/--enable-mpi/i) {
	  $comm="mpi";
	}
	else {
	  $comm="serial";
	}
#Note that the 'invoke-configure' script must be executable
	$compileFail+=system "./invoke-configure >> $homedir/trilinosCompileLog.txt 2>&1";
	$compileFail+=system "make >> $homedir/trilinosCompileLog.txt 2>&1";
	if ($compileFail) {
	  # The build process failed, skip associated tests, report the failure
	  ++$errorcount;
	  ++$trilinosCompileError;
	  print ERRORS "Trilinos compilation process failed for the $subdirs[$i] test.\nWill skip associated tests.\n";
	  &reportresults;
	  $compileFail=0; # reset so the positive value doesn't trigger an error again
	}
	else {
	  #
	  # Run tests
	  #

	  chdir"$homedir";
	  open TESTDIRECTORIES, "list_of_test_dirs";
	  chomp(@alltestdirs=<TESTDIRECTORIES>);
	  close TESTDIRECTORIES;
	  my $error;
	  foreach $testdirectory (@alltestdirs) {
	    # for packages that have not been ported to a particular platform,
	    # the tests associated with such a package could be skipped below
	    # use unless (uname =.. && $testdirectory=..) to skip
	    # Packages excluded below (jpetra, tpetra, etc) do not yet build
	    # with autotools
	    unless ($testdirectory=~/^\s+$/ || $testdirectory=~/^$/ || $testdirectory=~/tpetra/ || $testdirectory=~/jpetra/ ) {
	      chdir "$homedir/$subdirs[$i]/$testdirectory";
	      $compileFail=0;
	      system "find $homedir/$subdirs[$i]/$testdirectory/scripts/$frequency/$comm -type f > list_of_files 2>&1"; #This might not port
	      open FILELIST, "list_of_files";
	      chomp(@potentialscripts=<FILELIST>);
	      close FILELIST;
	      foreach $potentialscript (@potentialscripts) {
#  Ken Stanley added the following line to allow two scripts in the same directory to work
	        chdir "$homedir/$subdirs[$i]/$testdirectory";
		if (-x $potentialscript ) {
		  $compileFail+=system "$potentialscript $subdirs[$i] True >> $homedir/testCompileLog.txt";
		  if ($compileFail) {
		    ++$errorcount;
		    ++$testCompileError;
		    print ERRORS "Trilinos test suite failed for $subdirs[$i] tests.\n\n";
		  }
		  #
		  # Compile and report results
		  #
		  system "rm -f list_of_files";
		  &reportresults;
		  $compileFail=0; # reset so the positive value doesn't trigger an error again
		}
	      }
	    }
	  }
	}
      }

chdir"$homedir";

#
# Close filehandles and delete temp files
#

close SUMMARY;
close ERRORS;
close WARNINGS;

system "rm -f list_of_test_dirs list_of_files";
chdir"$homedir/testharness";
#
# Create the final log file
#

my $teststatus="passed";
if ($problemencountered) {
  $teststatus="failed";
}
system "mv results.txt log_$ARCH\_$logdate\_$teststatus.txt";
#
# This subroutine is called when script is forced to try a default set of
# build directories
#

sub usedefaultparameters {
  ++$warningcount;
  print WARNINGS "WARNING: trying default build directory set.\n";
  $subdirs[0]='SERIAL';
  $subdirs[1]='MPI';
  ++$mpi;
  $numsubdirs=2;
  print WARNINGS "Default subdirectories $subdirs[0] $subdirs[1]\n";
}

#
# This subroutine is called when it is time to create the results file - either
# when the tests are complete or when an error occurs from which the
# script cannot recover.
#

sub reportresults {
  chdir"$homedir";
  # The following line constructs the name of the log that is produced during 
  # tests whether errors occurred or not.  (-v not used.)
  my $testfile2=join("",'log',$ARCH,'.txt');
  if ( -f $testfile2) {
    system "mv $homedir/$testfile2 summary.txt";
  }

  my $testfile="$homedir/logErrors.txt";
  my $testfile1="$homedir/logMpiErrors.txt";

  open (SUMM, ">>summ.txt") or die "$! error trying to open file";
  if ($errorcount || -f $testfile ||  -f $testfile1 || $warningcount || $testCompileError || $trilinosCompileError) {

    # At least one problem occurred throughout the course of testing
    my $subject_line=join " - ", $ARCH,'At least one test failed';
    $problemencountered=1;
    print SUMM $subject_line;
    print SUMM "\n";

    if ($potentialscript) {
      print SUMM "Test script: ";
      print SUMM $potentialscript;
      print SUMM "\n";
    }

  if ($warningcount) {
    print SUMM "--> At least one non-testing warning occurred (i.e. script/build directory related).\nSee details below.\n\n";

    system "cat warnings.txt >> summ.txt";
  }
  if ($trilinosCompileError) {
    print SUMM "--> At least one error occurred while compiling Trilinos.\nSee details below.\n\n";

    system "cat trilinosCompileLog.txt >> summ.txt";
  }
  if (-f "errors.txt") {
    print SUMM "--> For additional information about errors that occured, \nSee details below.\n\n";

    system "cat errors.txt >> summ.txt";
  }

  if ($testCompileError) {
    print SUMM "--> An error occurred when executing the $potentialscript test script.  See details below.\n\n";

    system "cat testCompileLog.txt >> summ.txt";
  }

    print SUMM "************************************************\nThe following is the output from the test script listed above (or failed compile attempt).\nPlease note that the -v option was not selected for this log.\n*************************************************\n";
    if (-f "summary.txt") {

      system "cat summary.txt >> summ.txt";
    }

  if ( -f $testfile1) {
    print SUMM "--> Parallel testing did not complete successfully.  The individual tests that failed are listed below.\n\n";

    system "cat logMpiErrors.txt >> summ.txt";
  }

  if ( -f $testfile) {
    print SUMM "--> Serial testing did not complete successfully.  The individual tests that failed are listed below.\n\n";
    system "cat logErrors.txt >> summ.txt";
  }


    system "rm -f logErrors.txt logMpiErrors.txt";

  }
  else {
    # No problems occurred of any kind
    my $subject_line=join "-", $ARCH,'AllTestsPassed';
    print SUMM $subject_line;
#	      Path=>'summ.txt',
    if ($potentialscript) {
      print SUMM "-Test script: ";
      print SUMM $potentialscript;
    }
    print SUMM "\n";

    print SUMM "********************************************************************\nThe following is the output from the test script listed above.  Please note that\nthe -v option was not selected for this log.While no errors occurred during\nthis test, this log can still be examined to see which tests were run.\n********************************************************************\n";

system "cat summary.txt >> summ.txt";
  }
print SUMM "\n\n";
close SUMM;

# Reset error/warning indicators so that errors are not triggered for any
# remaining tests
$errorcount=0;
$warningcount=0;
$trilinosCompileError=0;
$testCompileError=0;

system "cat summ.txt >> testharness/results.txt";

system "rm -f errors.txt warnings.txt updatelog.txt summary.txt trilinosCompileLog.txt testCompileLog.txt summ.txt";

}
