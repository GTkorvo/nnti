###############################################################################
# Trilinos Package Test Definition File                                       #
#                                                                             #
# The Trilinos Project                                                        #
#                                                                             #
#   Mike Phenow, Jim Willenbring                                              #
#                                                                             #
###############################################################################

  This document describes the structure of test definition files to be used by 
  packages to describe the tests they have available and how they should be
  run.  These test definition files and the programs that will use them are
  intended to replace the entire test script level currently being used.

-------------------------------------------------------------------------------
I.  Placement

  There will be one test definition file per package.  It will live at
  
    Trilinos/packages/PACKAGE_NAME/test/definition

-------------------------------------------------------------------------------
II.  File Structure

  Comments can be placed anywhere in the familiar # manner.
  
  Aside from comments, the file will consist exclusively of test groups.
  There can be any number of test groups.

-------------------------------------------------------------------------------
III.  Test Group Structure

  A test group has a couple of essential elements:
  
    1. A non-empty list of categories.
    2. A non-empty set of properties (name=value pairs).
    
  A number of markup and formatting rules need to be adhered to:
  
    1. The list of categories must be enclosed within parentheses (()).
    2. The set of properties must be enclosed within curly braces ({}).
    3. Property names must be separated from their values with an equals
       sign (=).
    4. Properties must be terminated with a semicolon (;).
    5. Long values or long lists of values can be separated into multiple lines
       but line-continuation characters must not be used.  One terminating
       semi-colon for the property is imperative.
        
  A number of conventions may be followed at the developer's discretion:
        
    1. Though comments can be placed anywhere, the convention will be to only
       place comments in a block preceding the group it describes.
    2. The opening curly brace can be anywhere between the closing right 
       parenthesis of the category list and the first property, but the
       convention will be to put it on space after it.
    3. The closing curly brace can be anywhere between the last property and
       the opening left parenthesis of the next group, but the convention will
       be to put it as the first and only thing on the line following the last
       property.
    4. The set of properties need not be justified any particular way, though
       the convention will be to indent them four spaces.
    5. Whitespace is not necessary on either side of the equals sign, but the
       convention will be one space on each side.
    6. Lines can be arbitrarily long, but the convention will be to keep them
       under 80 characters.
       
  The following is a definition file (with meaningless content) that adheres
  to all of the rules and conventions:
  
    +-------------------------------------------------------------------------+
    |                                                                         |
    |#                                                                        |
    |# This group defines CATEGORY-1 and CATEGORY-2 tests.                    |
    |#                                                                        |
    |                                                                         |
    |(CATEGORY-1 CATEGORY-2) {                                                |
    |    NAME-A = VALUE-A;                                                    |
    |    NAME-B = VALUE-B;                                                    |
    |    NAME-C = VALUE-C;                                                    |
    |}                                                                        |
    |                                                                         |
    |#                                                                        |
    |# This group defines CATEGORY-3 tests.                                   |
    |#                                                                        |
    |                                                                         |
    |(CATEGORY-3) {                                                           |
    |    NAME-A = VALUE-A;                                                    |
    |    NAME-B = VALUE-B;                                                    |
    |    NAME-C = VALUE-C;                                                    |
    |}                                                                        |
    |                                                                         |
    +-------------------------------------------------------------------------+

-------------------------------------------------------------------------------
IV.  Categories

  A category is a pre-defined identifier that attaches a certain meaning to a
  given set of properties.  These identifiers will be used by programs to
  determine what tests to run and how.  This will provide package developers
  with a certain degree of control over their package testing while allowing
  framework developers the control to make informed decisions about how best to
  maximize the value yielded from the limited testing cycles available.
  
  The groups and their meanings are as follows:
    
    FRAMEWORK     The set of tests that should be run by the framework test
                  harness in the general case under normal circumstances.  This
                  could also be thought of as the "nightly" category, though
                  the testing that is currently done nightly may not always be
                  done exclusively at night.
    
    CHECKIN       The set of tests that should be run when someone wants to
                  verify a recent code change before checking it in.  This 
                  should not be an extensive list of long-running tests.
                
    PERFORMANCE   The set of tests that should be run to test the performance
                  of your package.  These will generally be defined to run once
                  on a large number of processors.
                  
    SCALABILITY   The set of tests that should be run to test the scalability
                  of your package.  These will generally be defined to be run
                  on an increasing number of processors.
                  
    COVERAGE    * The set of tests that should be run to test the test coverage
                  of your package.  Note that for these to actually test your
                  package's test coverage the code will have had to have been
                  built accordingly.
                  
    MEMORYLEAK  * The set of tests that should be run to test for memory leaks
                  in your package.
    
    MEMORYUSAGE * The set of tests that should be run to test the memory usage
                  of your package.
  
    ALL           The set of tests that should be run when someone wants to run
                  "all" of your tests.  This may or may not actually be all of
                  your package's tests.

  * Denotes categories that are not currently used, but are being reserved for
  future use.

  Any number of categories can be listed for a test group and a category can be
  used in multiple test groups.  This will allow mature packages with many
  different kinds of tests to have fine-grained control of their tests while
  making it as simple as possible for younger packages to specify all of their
  testing needs with as little duplication as possible.
  
-------------------------------------------------------------------------------
V.  Properties

  A test group is defined by a set of properties.  These are all pre-defined
  and have the familiar "name = value;" format.
  
  The accepted property names and their uses are as follows:
  
    TESTS         List the name of individual tests.  This must include the
                  path to the test relative to Trilinos/packages/PACKAGE/test.
                  This is useful when there are few tests, few tests per
                  directory, or when tests have particular needs.  This can
                  have multiple values separated by commas.  The values of
                  NAMES and DIRS will both be used to generate one list of
                  tests to be run.  It is not required that both NAMES and
                  DIRS are present, but at least on needs to be.
  
    DIRS          List the directories that contain tests.  This must be the
                  lowest directory--all executable files in the directory
                  will be considered tests.  The directory will not be
                  recursively searched.  This is useful when there are many
                  test executables in a directory.  This can have multiple
                  values separated by commas.  The values of NAMES and DIRS
                  will both be used to generate one list of tests to be run.  
                  It is not required that both NAMES and DIRS are present, but
                  at least on needs to be.
                  
    ARGS          Supply the arguments to be passed to your tests.  If
                  you list multiple argument lists, each test will be run
                  with each argument list.  This property is not required.
                  
    COMM          Accepts either one or two of the four following possible
                  values:  SERIAL, MPI, CUSTOM-SERIAL, CUSTOM-MPI.  It is
                  possible to supply SERIAL, MPI, or both.  It is also possible
                  to supply CUSTOM-SERIAL, CUSTOM-MPI, or both.  It is not
                  possible to mix the two sets.  If two values are supplied,
                  each test will be run in each comm.  This property must be
                  present and at least one value must be specified.
                  
                  MPI can be optionally followed by a list specifying the
                  number of processors to be run on.  This can be one value,
                  in which case the test will run on that many processors, or
                  not at all if that many processors are not available.  It
                  can also be a range of acceptable numbers of processors.
                  The test will be run on the highest number available in the
                  range.  An asterisk can be used for the upper end of the
                  array to indicate that the test should be run on as many
                  processors as are available.  If multiple values or ranges
                  are given, separated by spaces, then each test will be run on
                  as many processors as specified (or the most available in the
                  given range) and then again for the next value or range in
                  the list until the list is exhausted or until there aren't
                  enough processors to continue.  This functionality is useful
                  for defining performance and scalability tests.
                  
                  If CUSTOM-SERIAL or CUSTOM-MPI is supplied, it is assumed
                  that the executables files listed in either NAMES or DIRS are
                  not test executables, but instead test executable wrapper
                  scripts.
                  
    X-OS          List the operating systems to exclude.  This string must
                  match exactly the string returned by "uname -o" in the
                  given operating system.
                  
    X-ARCH        List the architectures to exclude.  This string must match
                  exactly the string returned by "uname -m" on the given
                  architecture.
                  
    X-HOST        List the hosts to exclude.  This string must match exactly
                  the string returned by "uname -n" on the given host.  This 
                  is probably the best option of all three X- options because
                  you can find out exactly what "uname -n" returns on that
                  machine, while it might not be possible to know what any 
                  given machine on a certain architecture or OS might return.

  Notice that many of the properties can cause all of the tests listed to be
  run again with a different variable changed.  These effects will compound.
  Be careful specifying everything in one test group.

-------------------------------------------------------------------------------
VI.  Example
  
  The following is an example definition file for a fictitious package.  A real
  package was not used because this file could then become out of date and
  lead to confusion.
  
    +-------------------------------------------------------------------------+
    |                                                                         |
    |#                                                                        |
    |# This group defines the standard set of ExamplePackage's tests.         |
    |#                                                                        |
    |                                                                         |
    |(FRAMEWORK, CHECKIN, ALL) {                                              |
    |    DIRS = SomeTests;                                                    |
    |    ARGS = smallMatrix, bigMatrix;                                       |
    |    COMM = SERIAL, MPI;                                                  |
    |}                                                                        |
    |                                                                         |
    |#                                                                        |
    |# This group defines a scalability testing scheme for ExamplePackage.    |
    |#                                                                        |
    |                                                                         |
    |(SCALABILITY) {                                                          |
    |    DIRS = SomeTests;                                                    |
    |    ARGS = smallMatrix, bigMatrix;                                       |
    |    COMM = MPI(1-5, 6-10, 11-15, 16-20, 21-*);                           |
    |}                                                                        |
    |                                                                         |
    +-------------------------------------------------------------------------+
  
  Given the above definitions file, when someone runs the runtests test utility
  with --category=ALL, the following is a possible set of events:
  
    Test                          Arguments       Comm      Processors
    
    SomeTests/test-1.exe          smallMatrix     SERIAL    1
    SomeTests/test-2.exe          smallMatrix     SERIAL    1
    SomeTests/test-n.exe          smallMatrix     SERIAL    1
    SomeTests/test-1.exe          bigMatrix       SERIAL    1
    SomeTests/test-2.exe          bigMatrix       SERIAL    1
    SomeTests/test-n.exe          bigMatrix       SERIAL    1
    SomeTests/test-1.exe          smallMatrix     MPI       8
    SomeTests/test-2.exe          smallMatrix     MPI       8
    SomeTests/test-n.exe          smallMatrix     MPI       8
    SomeTests/test-1.exe          bigMatrix       MPI       8
    SomeTests/test-2.exe          bigMatrix       MPI       8
    SomeTests/test-n.exe          bigMatrix       MPI       8
    
  The same would be the case if it was run with --category=CHECKIN and when it
  is run during the nightly framework test harness runs.
  
  If someone were to run the test utility with the options "ExamplePackage
  SCALABILITY", the following is a possible set of events:
  
    Test                          Arguments       Comm      Processors
    
    SomeTests/test-1.exe          smallMatrix     MPI       5
    SomeTests/test-2.exe          smallMatrix     MPI       5
    SomeTests/test-n.exe          smallMatrix     MPI       5
    SomeTests/test-1.exe          smallMatrix     MPI       10
    SomeTests/test-2.exe          smallMatrix     MPI       10
    SomeTests/test-n.exe          smallMatrix     MPI       10
    SomeTests/test-1.exe          smallMatrix     MPI       15
    SomeTests/test-2.exe          smallMatrix     MPI       15
    SomeTests/test-n.exe          smallMatrix     MPI       15
    SomeTests/test-1.exe          smallMatrix     MPI       16
    SomeTests/test-2.exe          smallMatrix     MPI       16
    SomeTests/test-n.exe          smallMatrix     MPI       16
    SomeTests/test-1.exe          bigMatrix       MPI       5
    SomeTests/test-2.exe          bigMatrix       MPI       5
    SomeTests/test-n.exe          bigMatrix       MPI       5
    SomeTests/test-1.exe          bigMatrix       MPI       10
    SomeTests/test-2.exe          bigMatrix       MPI       10
    SomeTests/test-n.exe          bigMatrix       MPI       10
    SomeTests/test-1.exe          bigMatrix       MPI       15
    SomeTests/test-2.exe          bigMatrix       MPI       15
    SomeTests/test-n.exe          bigMatrix       MPI       15
    SomeTests/test-1.exe          bigMatrix       MPI       16
    SomeTests/test-2.exe          bigMatrix       MPI       16
    SomeTests/test-n.exe          bigMatrix       MPI       16
    
-------------------------------------------------------------------------------