#!/usr/bin/perl -w
# /Trilinos/commonTools/test/utilities/runmake

################################################################################
# The Trilinos Project - runmake
# 
# Mike Phenow, Jim Willenbring
#
# This is a utility for compiliing Trilinos.  It assumes you have a properly
# configured build tree.  It is of limited value by itself.  It is best used in
# conjunction with runconfigure, as in the utility runbuild.
#
# - Check contents of report.
# - Output package names as they compile successfully.
#
################################################################################

use strict;

# Variable Declarations ========================================================

# Command line arguments:

my $trilinosDir;        # Trilinos directory        (required argument) 
my $buildDir;           # build directory           (required argument) 
my $makeCmd;            # make command              (default: make)

my $outputDir;          # output directory          (default: .)
my $verbosity;          # verbosity level           (default: 1)
my $logVerbosity;       # log file verbosity level  (default: 0)

my $resultsDir;         # absolute path to results directory

my $runStartTime;
my $runStartTimeForFilename;

# Constants
my $v0 = "0";           # quiet
my $v1 = "1";           # normal verbosity
my $v2 = "2";           # level 2 verbosity
my $v3 = "4";           # level 3 verbosity

# Package failure exit status codes.  These are needed when you are combining
# runconfigure and runmake (as in runbuild) and you want to be able to recover
# from make failures because runmake can't recover from a make failure by
# itself--it needs to communicate the broken package to runconfigure to that
# runconfigure can remove its directory and its configure flags.
my %failureCode = ();
$failureCode{'amesos'} = 10;
$failureCode{'anasazi'} = 11;
$failureCode{'aztecoo'} = 12;
$failureCode{'belos'} = 13;
$failureCode{'capo'} = 14;
$failureCode{'claps'} = 15;
$failureCode{'cmmlib'} = 16;
$failureCode{'didasko'} = 17;
$failureCode{'epetra'} = 18;
$failureCode{'epetraext'} = 19;
$failureCode{'ifpack'} = 20;
$failureCode{'jpetra'} = 21;
$failureCode{'kokkos'} = 22;
$failureCode{'komplex'} = 23;
$failureCode{'meros'} = 24;
$failureCode{'ml'} = 25;
$failureCode{'new_package'} = 26;
$failureCode{'nox'} = 27;
$failureCode{'pliris'} = 28;
$failureCode{'pytrilinos'} = 29;
$failureCode{'rythmos'} = 30;
$failureCode{'teuchos'} = 31;
$failureCode{'thyra'} = 32;
$failureCode{'tpetra'} = 33;
$failureCode{'triutils'} = 34;
$failureCode{'tsf'} = 35;
$failureCode{'tsfcore'} = 36;
$failureCode{'tsfcoreutils'} = 37;
$failureCode{'tsfextended'} = 38;
        
################################################################################
# Execution ####################################################################
################################################################################

getArgs();
init();

my $exitStatus = run();
cleanUp();
exit $exitStatus;

################################################################################
# Subroutines ##################################################################
################################################################################

    ############################################################################
    # getArgs()
    #
    # Parse command line arguments.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub getArgs {
        
        # Argument variables that don't need to be global.
        my $quiet;
        my $help;

        # Gather command line arguments.
        use Getopt::Long;
        GetOptions( "trilinos-dir=s" => \$trilinosDir,
                    "build-dir=s" => \$buildDir,
                    "make-cmd=s" => \$makeCmd,
                    "output-dir=s" => \$outputDir,
                    "verbosity=i" => \$verbosity,
                    "log-verbosity=i" => \$logVerbosity,
                    "quiet" => \$quiet,
                    "help" => \$help );
        
        # Print help and exit.
        if ($help) { 
            printHelp();
            exit;
        }
        
        # Enforce and/or prepare arguments.
        
        # check for existance of trilinos-dir argument and actual directory
        if (!$trilinosDir) {
            die "trilinos-dir value required, see --help for more information\n"; 
        } else {
            if (!stat($trilinosDir)) {
                die "cannot stat trilinos-dir: $trilinosDir\n";
            }
        }
        
        # Check for existance of build-dir argument and actual directory.
        # If it isn't given as an absolute path, prepend the Trilinos path.
        if (!$buildDir) {
            die "build-dir value required, see --help for more information\n"; 
        } else {
            if ($buildDir !~ m/^\//) {
                $buildDir = "$trilinosDir/$buildDir";
            }
            if (!stat($buildDir)) {
                die "cannot stat build-dir: $buildDir\n";
            }
        }
        
        # Check for valid make-cmd.
        if ($makeCmd) { 
            $makeCmd =~ m/^(\w*)/;
            my $testMakeCommand = $1;
            `which $testMakeCommand`;
            if ($?) {
                die "cannot find make-cmd command: $makeCmd\n";
            }
        } else {
            $makeCmd = "make"; 
        }
        
        # Check for existance of output directory, use it to create the
        # complete path for the results directory, and create the results
        # directory.
        if (!$outputDir) {
            $outputDir = "";
            $resultsDir = "$trilinosDir/commonTools/test/utilities/results"; 
        } else {
            if ($outputDir =~ m/^\//) {
                $resultsDir = $outputDir;
            } else {
                $resultsDir = "$trilinosDir/commonTools/test/utilities/$outputDir";
            }
        }
        if (!stat($resultsDir)) {
            system("mkdir $resultsDir") == 0 or die "cannot create $resultsDir, died";
        }
        
        # Set verbosity level to corresponding constant.  0, 1, 2, and 3 are
        # used for the levels the user may specify, but they are stored as 0,
        # 1, 2, and 4 so they can be combined and processed with bitwise
        # operations.
        if ($verbosity) {
            if      ($verbosity == 0) { $verbosity = $v0; }
            elsif   ($verbosity == 1) { $verbosity = $v1; }
            elsif   ($verbosity == 2) { $verbosity = $v2; }
            elsif   ($verbosity == 3) { $verbosity = $v3; }
        } else {
            $verbosity = $v1; 
        }
        
        # Set log verbosity level to corresponding constant.  Numbering scheme
        # is the same for the log verbosity as it is for the standard verbosity.
        # There is not distinct output and log output, the if a log verbosity
        # is given, then that level of output is written to a file instead of
        # to standard out.  
        if ($logVerbosity) {
            if      ($logVerbosity == 0) { $logVerbosity = $v0; }
            elsif   ($logVerbosity == 1) { $logVerbosity = $v1; }
            elsif   ($logVerbosity == 2) { $logVerbosity = $v2; }
            elsif   ($logVerbosity == 3) { $logVerbosity = $v3; }        
        } else {
            $logVerbosity = $v1; 
        }
        
        # Set quiet mode--same as passing --verbosity=0.
        if ($quiet) {
            $verbosity = $v0; 
        }            
        
    } # getArgs()

    ############################################################################
    # init()
    #
    # Prepares varibles.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub init {
    
        # Capture and format make start time.
        (my $se, my $mn, my $hr, my $da, my $mo, my $yr) = (localtime)[0..5];
        $yr = sprintf("%02d", $yr % 100);
        $mo = sprintf("%02d", $mo+1);
        $da = sprintf("%02d", $da);
        $hr = sprintf("%02d", $hr);
        $mn = sprintf("%02d", $mn);
        $se = sprintf("%02d", $se);
        $runStartTime = $yr."-".$mo."-".$da." ".$hr.":".$mn.":".$se;
        $runStartTimeForFilename = $yr."-".$mo."-".$da."_".$hr.".".$mn.".".$se;
        
        # Print list of variables for debugging.
        my $message = "";
        $message .= "init():\n";
        $message .= "  \$trilinosDir = $trilinosDir\n";
        $message .= "  \$buildDir = $buildDir\n";
        $message .= "  \$makeCmd = $makeCmd\n";
        $message .= "  \$outputDir = $outputDir\n";
        $message .= "  \$verbosity = $verbosity\n";
        $message .= "  \$logVerbosity = $logVerbosity\n";
        $message .= "  \$resultsDir = $resultsDir\n";
        $message .= "  \n";
        printMessage($message, $v3);
        
    } # init()
    
    ############################################################################
    # run()
    #
    # Moves into build-dir/ and runs make-cmd.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub run {
        
        # cd to packages directory in build directory.
        chdir $buildDir or die "cannot chdir to $buildDir, died";
            
        # Print progress message.
        my $message = "Compiling Trilinos...";
        $message = sprintf("%-30s", $message);
        printMessage($message, $v1+$v2+$v3);
        
        # Capture start time.
        my $startSeconds = time();
    
        # Run make.      
        my $makeOutput = `$makeCmd 2>&1`;
        my $makeExitStatus = $?;
    
        # Capture and format make stop time.
        (my $se, my $mn, my $hr, my $da, my $mo, my $yr) = (localtime)[0..5];
        $yr = sprintf("%02d", $yr % 100);
        $mo = sprintf("%02d", $mo+1);
        $da = sprintf("%02d", $da);
        $hr = sprintf("%02d", $hr);
        $mn = sprintf("%02d", $mn);
        $se = sprintf("%02d", $se);
        my $makeStopTime = $yr."-".$mo."-".$da." ".$hr.":".$mn.":".$se;
        my $stopSeconds = time();            
        my $runSeconds = $stopSeconds - $startSeconds;
        
        # Detect broken package.
        my $brokenPackage = "NONE";
        my $madePackages = detectMadePackages($makeOutput);
        if ($makeExitStatus) {
            $brokenPackage = detectBrokenPackage($makeOutput);
            $message = sprintf("%-25s", " broken: $brokenPackage ");
            printMessage($message, $v1+$v2+$v3);
            $message = "! FAILED ";
            printMessage($message, $v1+$v2+$v3);
        } else {
            $message = sprintf("%-25s", "");
            printMessage($message, $v1+$v2+$v3);
            $message = "  passed ";
            printMessage($message, $v1+$v2+$v3);
        }
        
        # Trim $makeOutput.
        $makeOutput = substr ($makeOutput, -1000000);
                            
        # Finish printing pass/fail message.
        $message = ($runSeconds==0?"<1":$runSeconds);
        $message = sprintf("%6s", $message);
        printMessage($message, $v1+$v2+$v3);
        $message = " second".($runSeconds>1?"s":"")."\n";
        printMessage($message, $v1+$v2+$v3);
                                                
        # Grab general information values for inclusion in machine info file. 
        my $hostName = "";          my $dnsName = "";           my $ipAddress = "";     
        my $operatingSystem = "";   my $kernelName = "";        my $kernelRelease = "";
        my $kernelVersion = "";     my $processor = "";         my $machineHardware = "";
        my $hardwarePlatform = "";  my $badCmd = 0;          
        $badCmd = system('hostname -s > /dev/null 2>&1');
        if (!$badCmd) { 
            chomp($hostName=`hostname -s`); 
        } else { 
            $badCmd = system('uname -n > /dev/null 2>&1');
            if (!$badCmd) { chomp($hostName=`uname -n`); }
        }
        $badCmd = system('hostname -d > /dev/null 2>&1');
        if (!$badCmd) { chomp($dnsName=`hostname -d`); }
        $badCmd = system('hostname -i > /dev/null 2>&1');
        if (!$badCmd) { chomp($ipAddress=`hostname -i`); }
        $badCmd = system('uname -o > /dev/null 2>&1');
        if (!$badCmd) { chomp($operatingSystem=`uname -o`); }
        $badCmd = system('uname -s > /dev/null 2>&1');
        if (!$badCmd) { chomp($kernelName=`uname -s`); }
        $badCmd = system('uname -r > /dev/null 2>&1');
        if (!$badCmd) { chomp($kernelRelease=`uname -r`); }
        $badCmd = system('uname -v > /dev/null 2>&1');
        if (!$badCmd) { chomp($kernelVersion=`uname -v`); }
        $badCmd = system('uname -p > /dev/null 2>&1');
        if (!$badCmd) { chomp($processor=`uname -p`); }
        $badCmd = system('uname -m > /dev/null 2>&1');
        if (!$badCmd) { chomp($machineHardware=`uname -m`); }
        $badCmd = system('uname -i > /dev/null 2>&1');
        if (!$badCmd) { chomp($hardwarePlatform=`uname -i`); }
        
        # Grab the repository branch tag
        my $branchTag = "";
        my $homeDirContents = `ls $trilinosDir`;
        if ($homeDirContents =~ m/CVS/) {
            my $cvsDirContents = `ls $trilinosDir/CVS`;
            if ($cvsDirContents =~ m/Tag/) {
                $branchTag = `cat $trilinosDir/CVS/Tag`;
            } else {
                $branchTag = "development";
            }      
        } else {
            $branchTag = "unknown";
        }
        
        # Create results file.
        my $resultsFile = "$resultsDir/$runStartTimeForFilename-make.txt";
        open (RESULTS, ">$resultsFile") 
            or die "can't open make result file $resultsFile for writing, died";
            
        my $resultsString = "";
        
        $resultsString .= "HOST_NAME            = $hostName\n";
        $resultsString .= "DNS_NAME             = $dnsName\n";
        $resultsString .= "IP_ADDRESS           = $ipAddress\n";
        $resultsString .= "OPERATING_SYSTEM     = $operatingSystem\n";
        $resultsString .= "KERNEL_NAME          = $kernelName\n";
        $resultsString .= "KERNEL_RELEASE       = $kernelRelease\n";
        $resultsString .= "KERNEL_VERSION       = $kernelVersion\n";
        $resultsString .= "PROCESSOR            = $processor\n";
        $resultsString .= "MACHINE_HARDWARE     = $machineHardware\n";
        $resultsString .= "HARDWARE_PLATFORM    = $hardwarePlatform\n";
        $resultsString .= "\n";
        $resultsString .= "TRILINOS_DIR         = $trilinosDir\n";
        $resultsString .= "BRANCH_TAG           = $branchTag\n";
        $resultsString .= "\n";
        $resultsString .= "BUILD_DIR            = $buildDir\n";
        $resultsString .= "\n";
        $resultsString .= "MAKE_COMMAND         = $makeCmd\n";
        $resultsString .= "\n";
        $resultsString .= "START_TIME           = $runStartTime\n";
        $resultsString .= "STOP_TIME            = $makeStopTime\n";
        $resultsString .= "RUN_TIME             = ".($runSeconds==0?"<1":$runSeconds)." seconds\n";
        $resultsString .= "\n";
        $resultsString .= "EXIT_STATUS          = $makeExitStatus\n";
        $resultsString .= "RESULT               = ".($makeExitStatus==0?"pass":"fail")."\n";
        $resultsString .= "\n";
        $resultsString .= "BROKEN_PACKAGE       = $brokenPackage\n";
        $resultsString .= "\n";
        $resultsString .= "MADE_PACKAGES {{{\n\n$madePackages\n\n}}}\n";
        $resultsString .= "\n";
        $resultsString .= "MAKE_OUTPUT {{{\n\n$makeOutput\n\n}}}\n";
        
        print RESULTS $resultsString;
        
        close RESULTS;
        
        if ($makeExitStatus) {
            return $failureCode{"$brokenPackage"};
        } else {
            return 0;
        }
        
    } # run()
    
    ############################################################################
    # detectBrokenPackage()
    #
    # Figure out which package failed to compile.
    #
    #   - args:     $makeOutput     (standard out and standard error from make)
    #
    #   - returns:  $brokenPackage  (name of the package that failed to compile)
    #

    sub detectBrokenPackage {
        my $makeOutput = $_[0];
        
        # Initialize $lastSuccessfulPackage to some placeholder for the
        # beginning of the list.  Grab the last instance of "built
        # successfully" output string.
        my $lastSuccessfulPackage = "first";
        $makeOutput =~ m/.*Trilinos package (\w*?) built successfully/ms;        
        if ($1) { $lastSuccessfulPackage = $1; }
        
        # Convert package name to the format found in subdir list.
        $lastSuccessfulPackage = uc($lastSuccessfulPackage);
        $lastSuccessfulPackage = "$lastSuccessfulPackage"."_SUBDIR";
        
        my @enabledPackageSubdirs = ();
        
        # Parse package/Makefile, compiling a list of enabled packages.
        my $packagesMakefile = "$buildDir/packages/Makefile";
        open (PACKAGES_MAKEFILE, "<$packagesMakefile")
            or die "can't open $packagesMakefile";
        while (my $line = <PACKAGES_MAKEFILE>) {
            $line =~ s/^\s*//;  # trim leading spaces
            $line =~ s/\s*$//;  # trim trailing spaces
            if ($line =~ m/^(\w*?_SUBDIR) = \w*$/) {
                push (@enabledPackageSubdirs, $1);
            }                
        } # while ($line)
        close PACKAGES_MAKEFILE;
        
        my @subdirList = ();
        push (@subdirList, "FIRST_SUBDIR");
        
        # Parse package/Makefile, extracting subdir list.
        open (PACKAGES_MAKEFILE, "<$packagesMakefile")
            or die "can't open $packagesMakefile";
        my $continue = 0;
        while (my $line = <PACKAGES_MAKEFILE>) {
            $line =~ s/^\s*//;  # trim leading spaces
            $line =~ s/\s*$//;  # trim trailing spaces
            if ($line =~ m/^SUBDIRS = .*?$/) {
                $continue = 1;
            }                
            if ($continue) {
                while ($line =~ m/\$\((\w*?)\)/) {
                    push (@subdirList, $1);
                    $line =~ s/\$\($1\)//;                      
                }
            }                
            if ($continue && $line =~ m/^.*?\\$/) {
                $continue = 1;
            } else {
                $continue = 0;
            }
        } # while ($line)
        close PACKAGES_MAKEFILE;
        
        # Find position of last successfully built package in subdir list.
        my $i;
        for ($i=0; $i<$#{@subdirList}+1; $i++) {
            if ($subdirList[$i] eq $lastSuccessfulPackage) {
                last;   # equivalent to break 
            }
        }
        
        $i++;
        my $potentialMatch = $subdirList[$i];
        my $foundBrokenPackage = 0;
        my $brokenPackage;        
        
        # Find next enabled package in subdir list--without fail, this should
        # be the broken package.
        while ($i < $#{@subdirList}+1 && !$foundBrokenPackage) {
            foreach my $entry (@enabledPackageSubdirs) {
                if ($entry eq $potentialMatch) {
                    $foundBrokenPackage = 1;
                    $brokenPackage = $potentialMatch;
                    last;   # equivalent to break;
                }
            }
            $i++;
            $potentialMatch = $subdirList[$i];
        }
        
        # Standardize package name.
        if ($foundBrokenPackage) {
            $brokenPackage =~ s/_SUBDIR//;
            $brokenPackage = lc($brokenPackage);
        }
        
        return $brokenPackage;
           
    } # detectBrokenPackage()
    
    ############################################################################
    # detectMadePackages()
    #
    # Compile a list of the packages that successfully compiled.
    #
    #   - args:     $makeOutput     (standard out and standard error from make)
    #
    #   - returns:  $madePackages   (list of packages that compiled successfully)
    #

    sub detectMadePackages {
        my $makeOutput = $_[0];
        
        my $madePackages = "";
        
        # Compile list of all "Trilinos package PACKAGE built successfully" strings.        
        my @builtStrings = $makeOutput =~ m/(Trilinos package \w*? built successfully)/g;        
        foreach my $builtString (@builtStrings) {
                            
            # Grab package name.
            my $package = "";
            if ($builtString =~ m/Trilinos package (\w*?) built successfully/) {
                $package = $1;
                $package = lc($package);
                $madePackages .= "$package; ";
            }
            
        }
        
        return $madePackages;
           
    } # detectMadePackages()
    
    ############################################################################
    # cleanUp()
    #
    # Clean up environment variables, temp files, etc.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub cleanUp {
    
        # Currently, there is nothing to clean up, but I will leave this
        # subroutine here for potential future use.
    
    } # cleanUp()
    
    ############################################################################
    # printMessage()
    #
    # Prints an event if the verbosity is set.
    #
    #   - args:     $message        (message to be printed)
    #               $level          (verbosity level of message)
    #
    #   - returns:  NONE
    #

    sub printMessage {
        my $message = $_[0];
        my $level = $_[1];
        
        if ($verbosity & $level) {
            print $message;
        }
        
        if ($logVerbosity & $level) {
            my $log = $resultsDir."/log.txt";
            open (LOG, ">>$log")
                or die "can't open $log";
            print LOG $message;
            close LOG;
        }
    } # printMessage()

    ############################################################################
    # printHelp()
    #
    # Prints help output.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub printHelp {
        print "runmake - The Trilinos Make Utility\n";
        print "\n";
        print "Usage:  perl runmake --trilinos-dir=/home/user/Trilinos --build-dir=MPI\n";
        print "\n";
        print "Options:\n";
        print "\n";
        print "  --trilinos-dir=DIR     Specify the absolute path to the top-level Trilinos\n";
        print "                         directory that contains this program.\n";
        print "                         Example: /home/user/Trilinos\n";
        print "                         REQUIRED.\n";
        print "\n";
        print "  --build-dir=DIR        Specify the name of the build directory that contains\n";
        print "                         the configured source you would like compile.  If a\n";
        print "                         relative path is given, it is assume to be in the\n";
        print "                         given Trilinos directory.\n";
        print "                         REQUIRED.\n";
        print "\n";
        print "  --make-cmd=COMMAND     Specify the make command for this system.  This can\n";
        print "                         be used to specify make flags, \"make -j4\", for\n";
        print "                         example\n";
        print "                         Default: \"make\"\n";
        print "\n";
        print "  --output-dir=DIR       Specify the directory in which to create the directory\n";
        print "                         containing the results.\n";
        print "                         Default: \".\"\n";
        print "\n";
        print "  --verbosity=LEVEL      0 = no non-fatal ouput (same as --quiet)\n";
        print "                         1 = normal output (default)\n";
        print "                         2 = level 2 verbosity\n";
        print "                         3 = level 3 verbosity\n";
        print "\n";
        print "  --log-verbosity=LEVEL  0 = no log\n";
        print "                         1 = normal output (default)\n";
        print "                         2 = level 2 verbosity\n";
        print "                         3 = level 3 verbosity\n";
        print "\n";
        print "  --quiet                Produce no non-fatal output.\n";
        print "\n";
        print "  --help                 Print this help output and exit.\n";
        print "\n";
        print "Notes:\n";
        print "  - For more information, see README-runmake in\n";
        print "    Trilinos/commonTools/test/utilities/\n";
        print "    or visit http://software.sandia.gov/trilinos/developer/\n";
        print "\n";
    } # printHelp()