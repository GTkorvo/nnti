#!/usr/bin/perl -w
# /Trilinos/commonTools/test/utilities/runbuild

################################################################################
# The Trilinos Project - runbuild
# 
# Mike Phenow, Jim Willenbring
#
################################################################################

use strict;

# Variable Declarations ========================================================

# Command line arguments:

my $trilinosdir;        # Trilinos directory        (required argument) 
my $builddir;           # build directory           (required argument) 
my $invokeConfigure;    # complete invoke-configure (required argument)
my $recover;            # recover mode?

my $outputdir;          # output directory          (default: .)
my $verbosity;          # verbosity level           (default: 1)
my $logverbosity;       # log file verbosity level  (default: 0)

my $resultsDir;         # absolute path to results directory
my %dependencies;       # package dependencies

my $runStartTime;
my $runStartTimeForFilename;

# Constants
my $v0 = "0";           # quiet
my $v1 = "1";           # normal verbosity
my $v2 = "2";           # level 2 verbosity
my $v3 = "4";           # level 3 verbosity
        
################################################################################
# Execution ####################################################################
################################################################################

getArgs();
init();
parseDependencies();
run();
cleanUp();

################################################################################
# Subroutines ##################################################################
################################################################################

    ############################################################################
    # getArgs()
    #
    # Parse command line arguments.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub getArgs {
        
        my $quiet;
        my $help;

        use Getopt::Long;
        GetOptions( "trilinosdir=s" => \$trilinosdir,
                    "builddir=s" => \$builddir,
                    "invoke-configure=s" => \$invokeConfigure,
                    "recover" => \$recover,              
                    "outputdir=s" => \$outputdir,
                    "verbosity=i" => \$verbosity,
                    "logverbosity=i" => \$logverbosity,
                    "quiet" => \$quiet,
                    "help" => \$help );
        
        # Print help and exit.
        if ($help) { 
            printHelp();
            exit;
        }
        
        # Enforce and/or prepare arguments.
        
        # check for existance of trilinosdir argument and actual directory
        if (!$trilinosdir) {
            die "trilinosdir value required, see --help for more information\n"; 
        } else {
            if (!stat($trilinosdir)) {
                die "cannot stat trilinosdir: $trilinosdir\n";
            }
        }
        
        # Check for existance of builddir argument and actual directory.
        if (!$builddir) {
            die "builddir value required, see --help for more information\n"; 
        } else {
            if ($builddir !~ m/^\//) {
                $builddir = "$trilinosdir/$builddir";
            }
            system("rm -rf $builddir");
            mkdir($builddir) or die "cannot create builddir: $builddir\n";
        }
        
        # Check for existance of invoke-configure argument and actual file
        if (!$invokeConfigure) {
            die "invoke-configure value required, see --help for more information\n"; 
        } else {
            if ($invokeConfigure !~ m/^\//) {
                $invokeConfigure = "$trilinosdir/commonTools/test/utilities/$invokeConfigure";
            }
            if (!stat($invokeConfigure)) {
                die "cannot stat invoke-configure: $invokeConfigure\n";
            } 
        }
        
        # Prevent problems with uninitialized value
        if (!$recover) {
            $recover = "";
        }
        
        # Check for existance of output directory.
        if (!$outputdir) {
            $outputdir = "";
            $resultsDir = "$trilinosdir/commonTools/test/utilities/results"; 
        } else {
            if ($outputdir =~ m/^\//) {
                $resultsDir = $outputdir;
            } else {
                $resultsDir = "$trilinosdir/commonTools/test/utilities/$outputdir";
            }
        }
        if (!stat($resultsDir)) {
            mkdir($resultsDir) or die "cannot create $resultsDir, died";
        }
        
        # Set verbosity level to corresponding constant.
        if ($verbosity) {
            if      ($verbosity == 0) { $verbosity = $v0; }
            elsif   ($verbosity == 1) { $verbosity = $v1; }
            elsif   ($verbosity == 2) { $verbosity = $v2; }
            elsif   ($verbosity == 3) { $verbosity = $v3; }
        } else {
            $verbosity = $v1; 
        }
        
        # Set log verbosity level to corresponding constant.
        if ($logverbosity) {
            if      ($logverbosity == 0) { $logverbosity = $v0; }
            elsif   ($logverbosity == 1) { $logverbosity = $v1; }
            elsif   ($logverbosity == 2) { $logverbosity = $v2; }
            elsif   ($logverbosity == 3) { $logverbosity = $v3; }        
        } else {
            $logverbosity = $v0; 
        }
        
        # Set quiet mode.
        if ($quiet) {
            $verbosity = $v0; 
        }
        
    } # getArgs()

    ############################################################################
    # init()
    #
    # Prepares varibles.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub init {
    
        # Capture and format make start time.
        (my $se, my $mn, my $hr, my $da, my $mo, my $yr) = (localtime)[0..5];
        $yr = sprintf("%02d", $yr % 100);
        $mo = sprintf("%02d", $mo+1);
        $da = sprintf("%02d", $da);
        $hr = sprintf("%02d", $hr);
        $mn = sprintf("%02d", $mn);
        $se = sprintf("%02d", $se);
        $runStartTime = $yr."-".$mo."-".$da." ".$hr.":".$mn.":".$se;
        $runStartTimeForFilename = $yr."-".$mo."-".$da."_".$hr.".".$mn.".".$se;
        
        # Create results directory.
        $resultsDir .= "/build_$runStartTimeForFilename";
        mkdir($resultsDir) or die "cannot create $resultsDir, died";
        
        # Print list of variables for debugging.
        my $message = "";
        $message .= "init():\n";
        $message .= "  \$trilinosdir = $trilinosdir\n";
        $message .= "  \$builddir = $builddir\n";     
        $message .= "  \$invokeConfigure = $invokeConfigure\n";      
        $message .= "  \$recover = $recover\n";
        $message .= "  \$outputdir = $outputdir\n";
        $message .= "  \$verbosity = $verbosity\n";
        $message .= "  \$logverbosity = $logverbosity\n";
        $message .= "  \$resultsDir = $resultsDir\n";
        $message .= "  \n";
        printMessage($message, $v3);
        
    } # init()
    
    ############################################################################
    # run()
    #
    # Moves run runconfigure and runmake
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub run {
        
    } # run()
    
    ############################################################################
    # parseDependencies()
    #
    # Parses testharness/dependencies and fills global hash of arrays of the 
    # form ({PACKAGE_A, [optionA1, optionA2, ...]}, {PACKAGE_B, [optionB1, ...]})
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub parseDependencies {
        my $filename = "$trilinosdir/commonTools/test/utilities/dependencies";
        
        open (IN_FILE, "<$filename")
            or die "can't open $filename";
            
        my $line;
        my $name;
        my $value;
        my $continue;
        while ($line = <IN_FILE>) {
            $line =~ s/^\s*//;  # trim leading spaces
            $line =~ s/\s*$//;  # trim trailing spaces
            
            if (!$line || $line =~ m/^[# ]/) {
                # skip comments and blank lines
            } else {
                if ($continue) {    # previous line ended with a (\) continuation char
                    $line =~ m/^((\S*?\s*?|".*?"\s*?)*)\s*?(\\?)$/;
                    $value = $1;
                    $continue = $3;                    
                    # print "\$value: $value\n\n"; # debugging   
                                     
                } else {            # expecting a $name [+]= $value [$value ...] pair
                    $line =~ m/^(\S+)\s*?\+?=\s*((\S*?\s*?|".*?"\s*?)*)\s*?(\\?)$/;
                    $name = $1;
                    $value = $2;
                    $continue = $4;                    
                    # print "\$name: $name, \$value: $value\n\n"; # debugging
                }
                
                if (!exists $dependencies{$name}) {  # if there isn't an option with this $name...
                    $dependencies{$name} = ();       # add a new one
                }
                
                while ($value) {
                    $value =~ s/^\s*//;  # trim leading spaces
                    $value =~ s/\s*$//;  # trim trailing spaces
                    # print "\$value: $value\n"; # debugging
                    
                    $value =~ m/^(".*?"|\S+)/;          # grab leftmost value
                    my $v = $1;                         # store temporarily in $v
                    $value =~ s/^$v//;                  # remove $v from remaining list 
                    $v =~ s/"//g;                       # remove any quotes from $v
                    push (@{$dependencies{$name}}, $v); # add $v to %options{$name}     
                }
            } # else (non-comment/blank)
        } # while ($line)
        
        close IN_FILE;
        
        # print the dependencies hash of arrays for debugging
        printMessage("\n\%dependencies:\n\n", $v3);
        for my $name (keys %dependencies) {
            my $lastElementIndex = $#{$dependencies{$name}};
            printMessage("  $name (".($lastElementIndex+1)."): \n", $v3);
            for my $i (0 .. $lastElementIndex) {
                printMessage("    $i = $dependencies{$name}[$i]\n", $v3);
            }
        }            
        
    } # parseDependencies()
    
    ############################################################################
    # cleanUp()
    #
    # Clean up environment variables, temp files, etc.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub cleanUp {
           
    } # cleanUp()
    
    ############################################################################
    # printMessage()
    #
    # Prints an event if the verbosity is set.
    #
    #   - args:     $message        (message to be printed)
    #               $level          (verbosity level of message)
    #
    #   - returns:  NONE
    #

    sub printMessage {
        my $message = $_[0];
        my $level = $_[1];
        
        if ($verbosity & $level) {
            print $message;
        }
        
        if ($logverbosity & $level) {
            my $log = $resultsDir."make_$runStartTimeForFilename"."_log.txt";
            open (LOG, ">>$log")
                or die "can't open $log";
            print LOG $message;
            close LOG;
        }
    } # printMessage()

    ############################################################################
    # printHelp()
    #
    # Prints help output.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub printHelp {
        print "runbuild - The Trilinos Build Utility\n";
        print "\n";
        print "Usage:  perl runbuild --trilinosdir=/home/user/Trilinos --buildir=MPI\n";
        print "\n";
        print "Options:\n";
        print "\n";
        print "  --trilinosdir=DIR          Specify the absolute path to the top-level\n";
        print "                             Trilinos directory that contains this program.\n";
        print "                             Example: /home/user/Trilinos\n";
        print "                             REQUIRED.\n";
        print "\n";
        print "  --builddir=DIR             Specify the name of the build directory where you\n";
        print "                             would like to build Trilnos.  If a relative\n";
        print "                             path is given, it is assumed to be in the given\n";
        print "                             Trilinos directory.\n";
        print "                             REQUIRED.\n";
        print "\n";
        print "  --invoke-configure=FILE    Relative paths to a complete invoke-configure file.\n";
        print "                             REQUIRED.\n";
        print "\n";
        print "  --recover                  If this flag is present, runbuild will attempt\n";
        print "                             to remove a broken package and its dependents and\n";
        print "                             continue until some subset builds successfully.\n";
        print "\n";
        print "  --outputdir=DIR            Specify the directory in which to create the\n";
        print "                             directory containing the results.\n";
        print "                             Default: \".\"\n";
        print "\n";
        print "  --verbosity=LEVEL          0 = no non-fatal ouput (same as --quiet)\n";
        print "                             1 = normal output (default)\n";
        print "                             2 = level 2 verbosity\n";
        print "                             3 = level 3 verbosity\n";
        print "\n";
        print "  --logverbosity=LEVEL       0 = no log (default)\n";
        print "                             1 = normal output\n";
        print "                             2 = level 2 verbosity\n";
        print "                             3 = level 3 verbosity\n";
        print "\n";
        print "  --quiet                    Produce no non-fatal output.\n";
        print "\n";
        print "  --help                     Print this help output and exit.\n";
        print "\n";
        print "Notes:\n";
        print "  - For more information, see README-runbuild in\n";
        print "    Trilinos/commonTools/test/utilities/\n";
        print "    or visit http://software.sandia.gov/trilinos/developer/\n";
        print "\n";
    } # printHelp()