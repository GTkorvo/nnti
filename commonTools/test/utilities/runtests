#!/usr/bin/perl -w
# /Trilinos/commonTools/test/utilities/runtests

################################################################################
# The Trilinos Project - runtests
# 
# Mike Phenow, Jim Willenbring
#
################################################################################

use strict;

# Variable Declarations ========================================================

# command line arguments:

my $trilinosdir;        # Trilinos directory        (required argument) 
my $comm;               # comm                      (required argument) 
my $builddir;           # build directory           (required argument) 
my $category;           # test category             (required argument) 
my $mpistart;           # mpi startup command       (default: lamboot)
my $mpistop;            # mpi shutdown command      (default: lamhalt)
my $mpigo;              # mpigo command             (default: mpigo -np )
my $outputdir;          # output directory          (default: .)
my $verbosity;          # verbosity level           (default: 1)
my $logverbosity;       # log file verbosity level  (default: 0)

my $startTime;          # start time string
my $resultsDir;         # absolute path to results directory

# Constants
my $v0 = "0";           # quiet
my $v1 = "1";           # normal verbosity
my $v2 = "2";           # level 2 verbosity
my $v3 = "4";           # level 3 verbosity
        
################################################################################
# Execution ####################################################################
################################################################################

getArgs();
init();
run();
cleanUp();

################################################################################
# Subroutines ##################################################################
################################################################################

    ############################################################################
    # getArgs()
    #
    # Parse command line arguments.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub getArgs {
        
        my $quiet;
        my $help;

        use Getopt::Long;
        GetOptions( "trilinosdir=s" => \$trilinosdir,
                    "comm=s" => \$comm,
                    "builddir=s" => \$builddir,
                    "category=s" => \$category,
                    "mpistart=s" => \$mpistart,
                    "mpistop=s" => \$mpistop,
                    "mpigo=s" => \$mpigo,
                    "outputdir=s" => \$outputdir,
                    "verbosity=i" => \$verbosity,
                    "logverbosity=i" => \$logverbosity,
                    "quiet" => \$quiet,
                    "help" => \$help );
        
        # print help and exit
        if ($help) { 
            printHelp();
            exit;
        }
        
        # enforce and/or prepare arguments
        
        if (!$trilinosdir) {
            die "trilinosdir value required, see --help for more information\n"; 
        } else {
            $trilinosdir =~ s/\/?$/\//;     # enforce trailing slash
            if (!stat($trilinosdir)) {
                die "cannot stat trilinosdir: $trilinosdir\n";
            }
        }
        
        if (!$comm) {
            die "comm value required, see --help for more information\n";
        } else {
            if (!($comm eq "serial" || $comm eq "mpi")) {
                die "comm valume must be \"serial\" or \"mpi\"\n";
            }
        }
        
        if (!$builddir) {
            die "builddir value required, see --help for more information\n"; 
        } else {
            $builddir =~ s/\/?$/\//;        # enforce trailing slash
            $builddir = $trilinosdir.$builddir;
            if (!stat($builddir)) {
                die "cannot stat builddir: $builddir\n";
            }
        }
        
        if (!$category) {
            die "category value required, see --help for more information\n"; 
        }
        
        if ($mpistart) { 
            `which $mpistart`;
            if ($?) {
                die "cannot find mpistart command: $mpistart\n";
            }
        } else {
            $mpistart = ""; 
        }
        
        if ($mpistop) {
            `which $mpistop`;
            if ($?) {
                die "cannot find mpistop command: $mpistop\n";
            }
        } else {
            $mpistop = ""; 
        }
        
        if (!$mpigo) { 
            $mpigo = "mpirun -np "; 
        }
        if ($comm eq "mpi") {
            if (system("which $mpigo")) {
                die "cannot find mpigo command: $mpigo\n";
            } else {
                $ENV{'TRILINOS_TEST_HARNESS_MPIGO_COMMAND'} = $mpigo;
            }
        }
        
        if (!$outputdir) {
            $outputdir = "./"; 
        } else {
            $outputdir =~ s/\/?$/\//;       # enforce trailing slash
            if (!stat($outputdir)) {
                die "cannot stat outputdir: $outputdir\n";
            }
        }
        
        if ($verbosity) {
            if      ($verbosity == 0) { $verbosity = $v0; }
            elsif   ($verbosity == 1) { $verbosity = $v1; }
            elsif   ($verbosity == 2) { $verbosity = $v2; }
            elsif   ($verbosity == 3) { $verbosity = $v3; }
        } else {
            $verbosity = $v1; 
        }
        
        if ($logverbosity) {
            if      ($logverbosity == 0) { $logverbosity = $v0; }
            elsif   ($logverbosity == 1) { $logverbosity = $v1; }
            elsif   ($logverbosity == 2) { $logverbosity = $v2; }
            elsif   ($logverbosity == 3) { $logverbosity = $v3; }        
        } else {
            $logverbosity = $v0; 
        }
        
        if ($quiet) {
            $verbosity = $v0; 
        }            
        
    } # getArgs()

    ############################################################################
    # init()
    #
    # Prepares varibles.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub init {
           
        # capture and format start time
        (my $se, my $mn, my $hr, my $da, my $mo, my $yr) = (localtime)[0..5];
        $yr = sprintf("%02d", $yr % 100);
        $mo = sprintf("%02d", $mo+1);
        $da = sprintf("%02d", $da);
        $hr = sprintf("%02d", $hr);
        $mn = sprintf("%02d", $mn);
        $se = sprintf("%02d", $se);
        $startTime = $yr."-".$mo."-".$da."_".$hr.".".$mn.".".$se;
        
        # create results directory
        $resultsDir = $trilinosdir;
        $resultsDir .= "commonTools/test/utilities/";
        $resultsDir .= $outputdir;
        $resultsDir .= "test_$startTime/";
        mkdir($resultsDir);
        
        # print list of variables for debugging
        my $message = "";
        $message .= "\n";
        $message .= "init():\n";
        $message .= "\$trilinosdir = $trilinosdir\n";
        $message .= "\$comm = $comm\n";
        $message .= "\$builddir = $builddir\n";
        $message .= "\$category = $category\n";
        $message .= "\$mpistart = $mpistart\n";
        $message .= "\$mpistop = $mpistop\n";
        $message .= "\$mpigo = $mpigo\n";
        $message .= "\$outputdir = $outputdir\n";
        $message .= "\$verbosity = $verbosity\n";
        $message .= "\$logverbosity = $logverbosity\n";
        $message .= "\$startTime = $startTime\n";
        $message .= "\$resultsDir = $resultsDir\n";
        printMessage($message, $v3);
        
    } # init()
    
    ############################################################################
    # run()
    #
    # Run tests
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub run {
        
        chdir $builddir or die "cannot chdir to $builddir, died";
        
    } # run()
    
    ############################################################################
    # cleanUp()
    #
    # Clean up environment variables, temp files, etc.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub cleanUp {
        delete $ENV{'TRILINOS_TEST_HARNESS_MPIGO_COMMAND'};    
    } # cleanUp()
    
    ############################################################################
    # printMessage()
    #
    # Prints an event if the verbosity is set.
    #
    #   - args:     $message        (message to be printed)
    #               $level          (verbosity level of message)
    #
    #   - returns:  NONE
    #

    sub printMessage {
        my $message = $_[0];
        my $level = $_[1];
        
        if ($verbosity & $level) {
            print $message;
        }
        
        if ($logverbosity & $level) {       
            my $log = $resultsDir."log.txt";
            open (LOG, ">>$log")
                or die "can't open $log";            
            print LOG $message;
            close LOG;       
        }            
    } # printMessage()

    ############################################################################
    # printHelp()
    #
    # Prints help output.
    #
    #   - args:     NONE
    #
    #   - returns:  NONE
    #

    sub printHelp {
        print "Trilinos Test Harness\n";
        print "\n";
        print "Usage:  perl runtests --trilinosdir=/home/user --comm=mpi --buildir=MPI\n";
        print "        --category=all\n";
        print "\n";
        print "Options:\n";
        print "\n";
        print "  --trilinosdir=DIR      Specify the absolute path to the top-level Trilinos\n";
        print "                         directory that contains this program.\n";
        print "                         Example: /home/user/Trilinos\n";
        print "                         REQUIRED.\n";
        print "\n";
        print "  --comm=COMM            Specify the type of build, either \"serial\" or \"mpi\"\n";
        print "                         REQUIRED.\n";
        print "\n";
        print "  --builddir=DIR         Specify the name of the build directory that contains\n";
        print "                         the tests you would like run.  It is assumed that this\n";
        print "                         directory is in the given Trilinos directory.\n";
        print "                         REQUIRED.\n";
        print "\n";
        print "  --category=CATEGORY    Specify the category of tests to be run.  This must be\n";
        print "                         one of the predefined tests types:  FRAMEWORK,\n";
        print "                         CHECKIN, PERFORMANCE, SCALABILITY, or ALL.  See\n";
        print "                         README-definition for more information.\n";
        print "                         REQUIRED.\n";
        print "\n";
        print "  --mpistart=COMMAND     Specify the mpi startup command for this system.\n";
        print "                         Default: \"lamboot\"\n";
        print "\n";
        print "  --mpistop=COMMAND      Specify the mpi shutdown command for this system.\n";
        print "                         Default: \"lamhalt\"\n";
        print "\n";
        print "  --mpigo=COMMAND        Specify the mpigo command for this system.\n";
        print "                         Default: \"mpigo -np \"\n";
        print "\n";
        print "  --outputdir=OUTPUTDIR  Specify the directory in which to create the directory\n";
        print "                         containing the test results.  This value must be a\n";
        print "                         path relative to trilinosdir/test/.\n";
        print "                         Default: \".\"\n";
        print "\n";
        print "  --verbosity=LEVEL      0 = no non-fatal ouput (same as --quiet)\n";
        print "                         1 = normal output (Default)\n";
        print "                         2 = level 2 verbosity\n";
        print "                         3 = level 3 verbosity\n";
        print "\n";
        print "  --logverbosity=LEVEL   0 = no log (Default)\n";
        print "                         1 = normal output\n";
        print "                         2 = level 2 verbosity\n";
        print "                         3 = level 3 verbosity\n";
        print "\n";
        print "  --quiet                Produce no non-fatal output.\n";
        print "\n";
        print "  --help                 Print this help output and exit.\n";
        print "\n";
        print "Notes:\n";
        print "  - For more information, see README-runtests in Trilinos/testharness\n";
        print "    or visit http://software.sandia.gov/trilinos/developer/\n";
        print "\n";
    } # printHelp()