# @HEADER
# @HEADER

#np# Note the following paragraph.
# ------------------------------------------------------------------------
# For each category, create two variables - NAME and NAME_H. The
# second is the list of headers to be installed, i.e., any header that
# might someday be needed by some other code outside New_Package. The first is
# the list of all source and any other header files.
# ------------------------------------------------------------------------

#
#np# There is, at present, no distinction between most of the categories, 
#np# other than those which start with EXTRA_.  All categories which do not
#np# start with EXTRA_ are included in all builds.  Categories which start
#np# with EXTRA_ are included in some builds (typically controlled by 
#np# --with-xyz or --without-xyz)
#
#np# Make sure to list all source files in one of the following categories.
CORE_H = \
	$(srcdir)/AnasaziBasicEigenproblem.hpp \
	$(srcdir)/AnasaziBasicSort.hpp \
	$(srcdir)/AnasaziBlockDavidson.hpp \
	$(srcdir)/AnasaziBlockKrylovSchur.hpp \
	$(srcdir)/AnasaziConfigDefs.hpp \
	$(srcdir)/AnasaziEigenproblem.hpp \
	$(srcdir)/AnasaziEigensolver.hpp \
	$(srcdir)/AnasaziEpetraAdapter.hpp \
	$(srcdir)/AnasaziLOBPCG.hpp \
	$(srcdir)/AnasaziModalSolverUtils.hpp \
	$(srcdir)/AnasaziMultiVec.hpp \
	$(srcdir)/AnasaziMultiVecTraits.hpp \
	$(srcdir)/AnasaziOperator.hpp \
	$(srcdir)/AnasaziOperatorTraits.hpp \
	$(srcdir)/AnasaziOutputManager.hpp \
	$(srcdir)/AnasaziReturnType.hpp \
	$(srcdir)/AnasaziSortManager.hpp

CORE = \
	$(srcdir)/AnasaziEpetraAdapter.cpp \
	$(srcdir)/AnasaziVersion.cpp

if BUILD_THYRA

THYRA_H = \
	$(srcdir)/AnasaziThyraAdapter.hpp 
THYRA = 

else

THYRA_H = 
THYRA = 

endif

UTIL_H = 

UTIL = 

ENUM_H = 

UNIPROC_H = 

UNIPROC = 

SERIAL_H = 

SERIAL = 

#
#np#  Files which are included in select builds are typically have
#np#  names that start with EXTRA
#
#np#  EXTRA_MPI is control by --with-mpi and --without-mpi which is
#np#  set up by TAC_ARC_CONFIG_MPI 
#
EXTRA_MPI_H =

EXTRA_MPI = 

if HAVE_MPI 
MPI_H = \
	$(EXTRA_MPI_H)
MPI = \
	$(EXTRA_MPI)

else

MPI_H =
MPI =

endif


USERBASE_H = 


LANG_WRAPS_H = 

LANG_WRAPS = 

DIST_H = 

DIST = 

COMP_H = \
	$(srcdir)/AnasaziBlockDavidson.hpp \
	$(srcdir)/AnasaziBlockKrylovSchur.hpp \
	$(srcdir)/AnasaziLOBPCG.hpp

COMP = 


# ------------------------------------------------------------------------
# Includes for required and optional library dependencies
# ------------------------------------------------------------------------
#np# List locations of include files within Trilinos but outside of this 
#np# package
include $(top_builddir)/Makefile.export.anasazi

if USING_GNUMAKE
EXPORT_INCLUDES = $(shell $(PERL_EXE) $(top_srcdir)/config/strip_dup_incl_paths.pl $(ANASAZI_INCLUDES))
else
EXPORT_INCLUDES = $(ANASAZI_INCLUDES)
endif

AM_CPPFLAGS = $(EXPORT_INCLUDES)
# ------------------------------------------------------------------------	
#np# The following section can be duplicated for building multiple libraries -
#np# make sure to list the correct categories with each library.
#np# replace new_package with the name of the package being autotool'ed here
# ------------------------------------------------------------------------
# New_Package library specifications
# ------------------------------------------------------------------------
#np# replace new_package with the name of the package being autotool'ed here
ANASAZI_LIB = libanasazi.a

#np# replace new_package with the name of the package being autotool'ed here
ANASAZI_H = \
	$(CORE_H) \
	$(THYRA_H) \
	$(UTIL_H) \
	$(ENUM_H) \
	$(UNIPROC_H) \
	$(SERIAL_H) \
	$(USERBASE_H) \
	$(DIST_H) \
	$(COMP_H) \
	$(MPI_H) 

#np# replace new_package with the name of the package being autotool'ed here
libanasazi_a_SOURCES = \
	$(CORE) \
	$(THYRA) \
	$(UTIL) \
	$(UNIPROC) \
	$(SERIAL) \
	$(DIST) \
	$(COMP) \
	$(MPI) 

#np# replace new_package with the name of the package being autotool'ed here
EXTRA_libanasazi_a_SOURCES = \
	$(EXTRA_MPI) \
	$(EXTRA_MPI_H) 

#We need the following to support separate build directories
#AM_CPPFLAGS=-I$(builddir)/src
# ------------------------------------------------------------------------
# For using a special archiver
# ------------------------------------------------------------------------

# SPECIAL NOTE: Why is the "else" there?  For some reason, automake
# fails to define <lib>_AR of USE_ALTERNATE_AR is false, so we have to
# define it manually.

if USE_ALTERNATE_AR

#np# replace new_package with the name of the package being autotool'ed here
libanasazi_a_AR = $(ALTERNATE_AR)
else

#np# replace new_package with the name of the package being autotool'ed here
libanasazi_a_AR = $(AR) cru

endif

# ------------------------------------------------------------------------
# Some C++ compilers create extra .o-files for templates. We need to
# be sure to include these, and this is the hack to do it.
# ------------------------------------------------------------------------

#np# replace new_package with the name of the package being autotool'ed here
libanasazi_a_LIBADD = $(TRILINOS_TEMPLATE_OBJS) $(XTRALDADD)

# ------------------------------------------------------------------------
# List of all libraries to install in $(libexecdir)
# ------------------------------------------------------------------------

#np# replace new_package with the name of the package being autotool'ed here
lib_LIBRARIES = $(ANASAZI_LIB)

# ------------------------------------------------------------------------
# List of all headers to install in $(includedir)
# ------------------------------------------------------------------------

#np# replace new_package with the name of the package being autotool'ed here
include_HEADERS = $(ANASAZI_H) 

# ------------------------------------------------------------------------
# Special stuff to install in our special $(execincludedir)
# ------------------------------------------------------------------------

# SPECIAL NOTE: New_Package_config.h is a machine-dependent file, so we need
# to install it in the machine-dependent directory. However, that is
# not a default installation directory, so we had to create it
# special.

execincludedir = $(exec_prefix)/include
nodist_execinclude_HEADERS = Anasazi_config.h

# ------------------------------------------------------------------------
# Files to be deleted by 'make maintainer-clean'
# ------------------------------------------------------------------------

MAINTAINERCLEANFILES = Makefile.in 


# ------------------------------------------------------------------------
# Library Target for Circular Dependencies
# ------------------------------------------------------------------------
if BUILD_TRIUTILS
BUILD_TRIUTILS_LIBS = cd $(top_builddir)/../triutils ; $(MAKE) all-libs
else
BUILD_TRIUTILS_LIBS =
endif

if BUILD_BELOS
BUILD_BELOS_LIBS = cd $(top_builddir)/../belos ; $(MAKE) all-libs
else
BUILD_BELOS_LIBS =
endif

if BUILD_AZTECOO
BUILD_AZTECOO_LIBS = cd $(top_builddir)/../aztecoo ; $(MAKE) all-libs
else
BUILD_AZTECOO_LIBS =
endif

if BUILD_IFPACK
BUILD_IFPACK_LIBS = cd $(top_builddir)/../ifpack ; $(MAKE) all-libs
else
BUILD_IFPACK_LIBS =
endif

if BUILD_THYRA
BUILD_THYRA_LIBS = cd $(top_builddir)/../thyra ; $(MAKE) all-libs
else
BUILD_THYRA_LIBS =
endif

all-libs:
	$(MAKE) libanasazi.a
	cd $(top_builddir)/../epetra ; $(MAKE) all-libs
	cd $(top_builddir)/../teuchos ; $(MAKE) all-libs
	$(BUILD_TRIUTILS_LIBS)
	$(BUILD_BELOS_LIBS)
	$(BUILD_AZTECOO_LIBS)
	$(BUILD_IFPACK_LIBS)
	$(BUILD_THYRA_LIBS)
