// @HEADER
// ***********************************************************************
//
//              PyTrilinos: Python Interface to Trilinos
//                 Copyright (2005) Sandia Corporation
//
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
//
// This library is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of the
// License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA
// Questions? Contact Michael A. Heroux (maherou@sandia.gov)
//
// ***********************************************************************
// @HEADER

#ifndef TEUCHOS_PYTHONPARAMETER
#define TEUCHOS_PYTHONPARAMETER

#include "Teuchos_ParameterList.hpp"

// ****************************************************************** //

// The Teuchos::ParameterList class can support parameters of any
// type, but the python wrappers need a subset of concrete parameter
// types supported a-priori.  Since this subset shows up in many
// places, the following functions are provided to handle conversion
// between PyObjects and the supported C / C++ types in a single
// place.  The following type conversions are supported:

//    Python                           C / C++
//    ---------------------      -------------
//    bool       	    <--> bool
//    int        	    <--> int
//    float      	    <--> double
//    string     	    <--> std::string
//    string     	    <--  char *
//    dict       	     --> ParameterList
//    wrapped ParameterList <--> ParameterList

//    Note: The python None type is unsupported and used for error
//    reporting in getPythonParameter().

// To convert the wrapped ParameterList class, certain SWIG functions
// are used that only exist within the wrapper code generated by swig.
// Therefore, this code only compiles correctly within the context of
// a swig interface file.

// ****************************************************************** //

namespace Teuchos {

  // Forward declaration
  ParameterList * pyDictToNewParameterList(PyObject *);

  // ****************************************************************** //

  // The setPythonParameter() function takes a ParameterList, a string
  // name and a python object as input.  An attempt is made to convert
  // the python object to a supported C / C++ type.  If successful,
  // the ParameterList set() method is called using the given name and
  // converted object, and true is returned.  If unsuccessful (ie, the
  // python object represents an unsupported type), false is returned.
  // Typically, a python error will NOT be set except in the case when
  // the python object is a dictionary with unsupported values.

  bool setPythonParameter(ParameterList     & plist,
			  const std::string & name,
			  PyObject          * value) {

    static swig_type_info * swig_TPL_ptr   = SWIG_TypeQuery("Teuchos::ParameterList *");
    void * argp;

    // Boolean values
    if (PyBool_Check(value)) {
      if (value == Py_True) plist.set(name,true );
      else                  plist.set(name,false);
    }

    // Integer values
    else if (PyInt_Check(value)) {
      plist.set(name, (int)PyInt_AsLong(value));
    }

    // Floating point values
    else if (PyFloat_Check(value)) {
      plist.set(name, PyFloat_AsDouble(value));
    }

    // String values
    else if (PyString_Check(value)) {
      plist.set(name, std::string(PyString_AsString(value)));
    }

    // Dictionary values
    else if (PyDict_Check(value)) {

      // Convert the python dictionary to a ParameterList
      ParameterList * sublist = pyDictToNewParameterList(value);

      // Store the ParameterList
      plist.set(name,*sublist);
      delete sublist;
    }

    // None object not allowed: this is a python type not usable by
    // Trilinos solver packages, so we reserve it for the
    // getPythonParameter() function to indicate that the requested
    // parameter does not exist in the given ParameterList
    else if (value == Py_None) {
      return false;
    }

    // ParameterList values
    else if (SWIG_CheckState(SWIG_Python_ConvertPtr(value, &argp, swig_TPL_ptr, 0))) {
      ParameterList *arg = reinterpret_cast<ParameterList *>(argp);
      plist.set(name, *arg);
    }

    // All other value types are unsupported
    else {
      return false;
    }

    // Successful type conversion
    return true;
  }    // setPythonParameter

  // **************************************************************** //

  // The getPythonParameter() function is the get counterpart to
  // setPythonParameter().  It takes a ParameterList and string name
  // as input.  If the requested parameter name does not exist, a new
  // reference to None is returned (a type that is guaranteed not to
  // be supported by setPythonParameter()).  If the name exists and
  // its type is supported, it is returned as a new reference to a
  // python object.  If the name exists, but the type is not
  // supported, NULL is returned, to indicate an error.  All returned
  // python object pointers are new references.  This function is
  // coded in such a way that the ParameterList "used" flags are not
  // altered.

  PyObject * getPythonParameter(const ParameterList & plist,
				const std::string   & name) {

    static swig_type_info * swig_TPL_ptr = SWIG_TypeQuery("Teuchos::ParameterList *");

    // If parameter does not exist, return None
    if (!plist.isParameter(name)) return Py_BuildValue("");

    // Get the parameter entry.  I now deal with the ParameterEntry
    // objects so that I can query the ParameterList without setting
    // the used flag to true.
    const ParameterEntry * entry = plist.getEntryPtr(name);

    // Boolean parameter values
    if (entry->isType<bool>()) {
      bool value = any_cast<bool>(entry->getAny(false));
      return PyBool_FromLong((long)value);
    }

    // Integer parameter values
    else if (entry->isType<int>()) {
      int value = any_cast<int>(entry->getAny(false));
      return PyInt_FromLong((long)value);
    }

    // Double parameter values
    else if (entry->isType<double>()) {
      double value = any_cast<double>(entry->getAny(false));
      return PyFloat_FromDouble(value);
    }

    // String parameter values
    else if (entry->isType<std::string>()) {
      std::string value = any_cast<std::string>(entry->getAny(false));
      return PyString_FromString(value.c_str());
    }

    // Char * parameter values
    else if (entry->isType<char *>()) {
      char * value = any_cast<char *>(entry->getAny(false));
      return PyString_FromString(value);
    }

    // ParameterList values
    else if (entry->isList()) {
      const ParameterList & value = getValue<ParameterList>(*entry);
      return SWIG_NewPointerObj((void*) &value, swig_TPL_ptr, 0);
    }

    // All  other types are unsupported
    return NULL;

  }    // getPythonParameter

  // **************************************************************** //

  // Function isEquivalent() is a utility for determining whether a
  // python dictionary is functionally equivalent to a ParameterList.
  // It supports interpreting ParameterList sublists as nested python
  // dictionaries, so it calls itself recursively.

  bool isEquivalent(PyObject * dict, const ParameterList & plist) {
    PyObject * key   = NULL;
    PyObject * value = NULL;
    PyObject * param = NULL;
    Py_ssize_t pos   = 0;
    string     name;

    // The dict pointer must point to a dictionary
    if (!PyDict_Check(dict)) goto fail;

    // Check that all entries in ParameterList are also in the
    // python dictionary
    for (ParameterList::ConstIterator i = plist.begin(); i != plist.end(); i++) {
      name  = plist.name(i);
      value = PyDict_GetItemString(dict,name.c_str());
      if (value == NULL) goto fail;
      if (plist.isSublist(name)) {
	if (!isEquivalent(value, plist.sublist(name)))
	  goto fail;
      }
      else {
	param = getPythonParameter(plist,name.c_str());
	if (param == NULL) goto fail;
	if (PyObject_RichCompareBool(param,value,Py_EQ) < 1) goto fail;
	Py_DECREF(param);
      }
    }
    // Check that all entries in the python dictionary are also in
    // the ParameterList
    while (PyDict_Next(dict, &pos, &key, &value)) {
      if (!PyString_Check(key)) goto fail;
      name = string(PyString_AsString(key));
      if (!plist.isParameter(name)) goto fail;
      if (plist.isSublist(name)) {
	if (!isEquivalent(value, plist.sublist(name)))
	  goto fail;
      }
      else {
	param = getPythonParameter(plist, name);
	if (param == NULL) goto fail;
	if (PyObject_RichCompareBool(param,value,Py_EQ) < 1) goto fail;
	Py_DECREF(param);
      }
    }
    // All checks passed
    return true;

  fail:
    Py_XDECREF(param);
    return false;
  }    // isEquivalent

  // **************************************************************** //

  // Function updatePyDictWithParameterList() takes all of the entries
  // in a ParameterList and updates the given python dictionary to
  // reflect the same values.  If the given python object is not a
  // dictionary, or any of the ParameterList entries are of
  // unsupported type, the function returns false.

  bool updatePyDictWithParameterList(PyObject * dict, const ParameterList & plist) {
    PyObject   * value   = NULL;
    PyObject   * param   = NULL;
    bool         result  = true;
    const char * nameStr = NULL;
    string       name;

    // The dict pointer must point to a dictionary
    if (!PyDict_Check(dict)) return false;

    // Iterate over all entries in ParameterList and ensure they are
    // mirrored in the python dictionary
    for (ParameterList::ConstIterator i = plist.begin(); i != plist.end(); i++) {
      name    = plist.name(i);
      nameStr = name.c_str();
      param   = getPythonParameter(plist,nameStr);
      value   = PyDict_GetItemString(dict,nameStr);

      // If param is NULL, then we don't support the conversion
      if (param == NULL) result = false;
      else {

	// If param is a sublist, mirror with a dictionary by calling
	// this routine recursively
	if (plist.isSublist(name)) {
	  if (value == NULL) value = PyDict_New();
	  else if (!PyDict_Check(value)) {
	    Py_DECREF(value);
	    value = PyDict_New();
	  }
	  result = result and 
	           updatePyDictWithParameterList(value, plist.sublist(name));
	  PyDict_SetItemString(dict,nameStr,value);
	}

	// Else synchronize the dictionary value to the parameter
	else PyDict_SetItemString(dict,nameStr,param);
      }
      Py_XDECREF(param);
    }
    return result;
  }    // updatePyDictWithParameterList

  // **************************************************************** //

  // Function updateParameterListWithPyDict() takes all of the entries
  // in a python dictionary and updates the given ParameterList to
  // reflect the same values.  If the given python object is not a
  // dictionary, or if any of the dictionary keys are not strings, or
  // if any of the dictionary values are of unsupported type, then the
  // function returns false.

  bool updateParameterListWithPyDict(PyObject * dict, ParameterList & plist) {
    PyObject * key     = NULL;
    PyObject * value   = NULL;
    Py_ssize_t pos     = 0;
    bool       result  = true;
    string     name;

    // The dict pointer must point to a dictionary
    if (!PyDict_Check(dict)) return false;

    // Iterate over all items in the python dictionary and ensure they
    // are synchronized with the ParameterList
    while (PyDict_Next(dict, &pos, &key, &value)) {

      // If the key is not a string, we can't synchronize
      if (!PyString_Check(key)) result = false;
      else {
	name = string(PyString_AsString(key));
	result = result and setPythonParameter(plist, name, value);
      }
    }
    return result;
  }    // updateParameterListWithPyDict

  // **************************************************************** //

  // Function synchronizeParameters() is a function for bringing the
  // given python dictionary and ParameterList into synch with each
  // other.  If a parameter exists for both the ParameterList and the
  // python dictionary, the ParameterList takes precedence.  If the
  // function returns false, it means the given PyObject was not a
  // dictionary or the ParameterList or python dictionary had at least
  // one value of an unsupported type.

  bool synchronizeParameters(PyObject * dict, ParameterList & plist) {
    bool result = true;
    result = result and updatePyDictWithParameterList(dict,plist);
    result = result and updateParameterListWithPyDict(dict,plist);
    return result;
  }    // synchronizeParameters

  // **************************************************************** //

  // Function pyDictToNewParameterList is a helper function that takes a
  // python dictionary and returns a pointer to an equivalent, new
  // ParameterList.  If dict is not a python dictionary, or dict is
  // not a valid dictionary (non-string keys or unsupported value
  // types) then the function returns NULL.

  ParameterList * pyDictToNewParameterList(PyObject * dict) {

    // The dict pointer must point to a dictionary
    if (!PyDict_Check(dict)) return NULL;

    // Create a new ParameterList and synchronize it with the python
    // dictionary
    ParameterList * plist = new ParameterList();
    if (!updateParameterListWithPyDict(dict,*plist)) {
      delete plist;
      plist = NULL;
    }
    return plist;
  }    // pyDictToNewParameterList

  // **************************************************************** //

  // Function parameterListToNewPyDict is a helper function that takes
  // a ParameterList and returns a pointer to an equivalent, new
  // python dictionary.  If the ParameterList contains entries of
  // invalid type, then a python error is raised and NULL is returned.

  PyObject * parameterListToNewPyDict(const ParameterList & plist) {
    
    // Create a new dictionary and synchronize it with the ParameterList
    PyObject * dict = PyDict_New();
    if (!updatePyDictWithParameterList(dict,plist)) {
      PyErr_SetString(PyExc_ValueError, "ParameterList has values of unsupported type");
      Py_DECREF(dict);
      dict = NULL;
    }
    return dict;
  }    // parameterListToNewPyDict

}    // namespace Teuchos

#endif // TEUCHOS_PYTHONPARAMETER
