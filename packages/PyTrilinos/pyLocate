#!/usr/bin/env python
# -*- python -*-

import getopt
import os
import sys
from   distutils.sysconfig import get_config_var
from   distutils.util      import get_platform

def main():
  (execDirName,execBaseName) = os.path.split(sys.argv[0])

  USAGE="usage: "+execBaseName+" [-h] [-v] [--build] [--include]"

  try:
    opts, args = getopt.getopt(sys.argv[1:], "hv", ["help", "verbose", \
                                                    "build", "include"])
  except getopt.GetoptError:
    # print help information and exit:
    print USAGE
    sys.exit(2)

  # Flags
  verboseMode  = False
  buildFlag    = False
  includeFlag  = False

  # Loop over options
  for (flag, value) in opts:
    if flag in ("-h", "--help"):
      print USAGE
      sys.exit()
    if flag in ("-v", "--verbose"):
      verboseMode = True
    if flag == "--build":
      buildFlag = True
    if flag == "--include":
      includeFlag = True

  # Python include directory
  if includeFlag:
    print get_config_var('INCLUDEPY')

  # Python distutils build directory.  This essentially emulates the code used
  # by distutils.commands.build to generate the name of the build directory.  If
  # that code ever changes, this could break, but it is not easily accessible
  # code, so this is my hack.
  if buildFlag:
    lib_dir = "lib.%s-%s" % (get_platform(), sys.version[0:3])
    build_dir = os.path.join('build', lib_dir)
    print build_dir

if (__name__ == '__main__'):
  main()
