/*
 * Copyright (c) 2013, Sandia Corporation.
 * Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
 * the U.S. Governement retains certain rights in this software.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 * 
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 * 
 *     * Neither the name of Sandia Corporation nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 

/** \addtogroup stk_mesh_bulk_data_parallel
 *
 *  Parallel distributed \ref stk::mesh::Entity "entities" have
 *  relations to entities that cross proessor boundaries.
 *  Such a cross-processor relation can be viewed as follows.
 *
 *  <b> ( domain_entity , domain_proc ) -> ( range_entity , range_proc ) </b>
 *
 *  Mesh-specific parallel communication operations use
 *  a collection of cross-processor relations to determine what
 *  information is sent or received among processors.
 *  These operations send data from the domain_entity on the
 *  domain_processor to the range_entity on the range_processor.
 *  These communication operations are most efficient when all
 *  message data between a given pair of processors is packaged
 *  into a single message.
 *
 *  Efficient packing and unpacking of mesh-specific
 *  parallel communication messages is supported by
 *  structuring the cross-processor relations as follows.
 *
 *  Given a collection of cross-processor relations:
 *
 *  { <b>( ( domain_entity , domain_proc ) ->
           ( range_entity , range_proc ) )</b>[k] }
 *
 *  Form the following two correlated vectors on the
 *  domain and range processors.
 *  - on the domain_proc : { ( domain_entity , range_proc )[k] }
 *  - on the range_proc  : { ( range_entity , domain_proc )[k] }
 *
 *  Members of the domain processor's vector are ordered by the
 *  domain entity key and then by range processor.
 *  Members of the range processor's vector are ordered conformally
 *  with the domain processor's ordering.
 *  Thus message packing and unpacking can be performed by
 *  iterating the cross-processor relation vectors.
 */


