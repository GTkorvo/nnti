1) It would be nice if we didn't have to include "ml_epetra_operator.h"
   or "ml_epetra_utils.h".
2) It would be nice if we did not have to give 'map' or 'comm' in the 
   ML_Epetra_Op().
3) It would be nice if things compiled easier.
4) No Amatrix on grid 0.


What have we changed:
    PetraMatrix.h    - setPetraMatrix(), getPetraMatrix()
    PetraVector.h    - getPetraPtr();
    PetraVector.cpp  - getPetraPtr();
    TSFBlockLinearOperator.cpp - don't re-allocate space in apply()
    AZTECSolver.h    - epetra_row_matrix preconditioner as last argument
    AZTECSolver.cpp  - preconditioner, recursiveIterate()
The above changes were all checked in to TSF 5/23/03. VEH




Note: In epetra's ApplyInverse(x,y), 'x' and 'y' point to the same
      data. Thus, we need to check that the ApplyInverse() in the
      Epetra_rowmatrix wrapper of TSF can handle this.


Cleaning up memory
==================

Examples:
     1) When we set the pointer in a PetraMatrix(), we want this
	concrete petra matrix deleted/cleaned when TSF's version
	is deleted or cleaned.
           ===> get petra_ptr and then delete.
     2)	Using the Aztec solver in a loop. We might need to save 
        the ILU factors for later use? Then, eventually we would
        need to remove them.
     3) Using the Aztec solver ... we need to delete the preconditioner.
           ==> get preconditioner and then delete.
