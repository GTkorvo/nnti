/*! \mainpage Trilinos/Epetra Extensions
\htmlonly
<center>
<img align=center lowsrc="../Epetra.gif" src="../Epetra.gif" 
     width=500 height=300 alt="Epetra"><br>
</center>
\endhtmlonly

\section intro Introduction
Epetra Extensions provides extensions to the Epetra package.

\section startup Overview of EpetraExt.

\subsection formulations Epetra Extensions Classes

EpetraExt contains a number of classes.  They can be categorized as follows:

<ul> 

<li> Abstract Transform: EpetraExt::Transform
     Abstract interface to transformation operations.

<li> Composition of Transforms: EpetraExt::Transform_Composite
     Composition of multiple transforms.

<li> View Transforms: EpetraExt::CrsGraph_View EpetraExt::CrsMatrix_View EpetraExt::MultiVector_View - Generate a view of contiguous subsets of the original object.

<li> Permutation Transforms: CrsGraph_SymmRCM CrsGraph_Zoltan CrsGraph_ZoltanOrder CrsGraph_BTF CrsMatrix_BTF - Generate specific permutations.

<li> Coloring: CrsGraph_MapColoring CrsGraph_MapColoringIndex

<li> Singleton Removal:

<li> Pure virtual row matrix class: Epetra_RowMatrix - Pure virtual class that specifies
     interfaces needed to do most of the common operations required by a row matrix.  
     The Epetra_LinearProblem expects the matrix as a Epetra_RowMatrix.  Both the
     Epetra_CrsMatrix and Epetra_VbrMatrix classes implement the Epetra_RowMatrix interface and
     therefore objects from either of these classes can be used with Epetra_LinearProblem and with
     AztecOO.  
\htmlonly
(See the <a href="../../../aztecoo/doc/html/index.html">AztecOO</a> home page.)
\endhtmlonly
     Furthermore, any class that implements Epetra_RowMatrix can be used with
     Epetra_LinearProblem and AztecOO.

<li> Sparse row matrix class: Epetra_CrsMatrix - Real double
     precision sparse matrix class.  Supports construction and use of
     row-wise sparse matrices.

<li> Sparse block row matrix class:  Epetra_VbrMatrix - Real double 
     precision block sparse matrix class.  Supports construction and use of
     row-wise block sparse matrices.  

<li> Import/Export classes:  Epetra_Import and Epetra_Export - Constructed from two
     Epetra_BlockMap (or Epetra_Map or Epetra_LocalMap).  Allows
     efficient transfer of objects built using one map to a new
     object with a new map.  Supports local and global permutations,
     overlapping Schwarz operations and many other data movement
     algorithms.
     


</ol>

<li> Primary serial user classes.  These classes provide object oriented interfaces to LAPACK capabilities,
     providing easy access to the most powerful numerical methods in LAPACK.

<ol>

<li> General dense matrix/vector classes: Epetra_SerialDenseMatrix, Epetra_SerialDenseVector - 
     Lightweight dense matrix and vector classes used to define matrices, left-hand-sides and 
     right-hand-sides for the serial solver classes.

<li> General dense solver class: Epetra_SerialDenseSolver - Provides dense matrix services such as 
     factorizations, solves, QR, SVD, etc., with special attention focused on numerically robust solutions.

<li> Symmetric dense matrix class: Epetra_SerialSymDenseMatrix - Similar to Epetra_SerialDenseMatrix 
     except focused specifically on symmetric matrices.

<li> Symmetric definite dense solver: Epetra_SerialSpdDenseSolver - Similar to Epetra_SerialDenseSolver 
     except focused specifically on symmetric definite systems.

</ol>

<li> Utility classes. 

<ol>
<li> Timing class: Epetra_Time - Provides timing functions for the
     purposes of performance analysis.

<li> Floating point operation class: Epetra_Flops - Provides floating point operations (FLOPS)
     counting and reporting functions for the purposes of performance analysis.  All Epetra computational
     classes accumulate FLOP counts associated with the \e this object of the computations.

<li> Distributed directory class:  Epetra_Directory - Allows construction of a distributed directory.
     Once constructed, a directory allows one to access randomly distributed objects in an efficient, scalable
     manner.  This class is intended for support of general Epetra_BlockMap and Epetra_Map objects, but is 
     useful in other settings as well.

<li> BLAS wrapper class: Epetra_BLAS - A ``thin'' layer of C++ code wrapping the basic linear algebra subprograms (BLAS).
     This class provides a single instance interface between Epetra and the BLAS.  In this way we can easily
     switch BLAS interfaces and manage the C++/Fortran translation differences that exist between different
     computer systems.  This class also provides a very convenient way to templatize the BLAS.

<li> LAPACK wrapper class: Epetra_LAPACK - A ``thin'' layer of C++ code wrapping LAPACK.  Like Epetra_BLAS,
     it provides nice C++ access to LAPACK.

</ol>
</ul>
     
