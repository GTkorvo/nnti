#@HEADER
#@HEADER

#ML_STANDALONE_MODE is set only if ml is being built by itself.
#It controls which linker is used:  in the case that ml is built
#with aztecoo and epetra support enabled, then a c++ linker is invoked
#for ML's interfaces to those two packages.

EXEEXT = .exe

# List the names of all exe's in this directory here
if ML_STANDALONE_MODE

if HAVE_MPI
noinst_PROGRAMS = mlguide mlguide_par
else
noinst_PROGRAMS = mlguide
endif #HAVE_MPI

else # not standalone

if HAVE_MPI
if ML_BENCHMARKING
noinst_PROGRAMS = mlguide mlguide_par ml_aztec_simple ml_example1d \
                  ml_example1dGS ml_example2d ml_example3d ml_simple_max \
                  ml_readfile ml_read_elas ml_recirc \
                  ml_read_salsa ml_read_maxwell \
                  ml_preconditioner \
                  ml_2level_DD \
                  ml_operator \
                  ml_AztecMsr \
                  ml_filtering \
		  ml_EpetraVbr \
		  ml_viz \
		  ml_analyze \
		  ml_maxwell \
		  ml_example_elasticity
		  ml_read_matrix_AIJ
else
noinst_PROGRAMS = mlguide mlguide_par ml_aztec_simple ml_example1d \
                  ml_example1dGS ml_example2d ml_example3d ml_simple_max \
                  ml_readfile ml_read_elas ml_recirc \
                  ml_read_salsa \
                  ml_preconditioner \
                  ml_2level_DD \
                  ml_operator \
                  ml_AztecMsr \
                  ml_filtering \
		  ml_EpetraVbr \
		  ml_viz \
		  ml_analyze \
		  ml_maxwell  \
		  ml_read_matrix_AIJ \
                  ml_multiple_rhs \
                  ml_example_elasticity
endif #ML_BENCHMARKING
else #no mpi
noinst_PROGRAMS = mlguide ml_aztec_simple ml_example1d \
                  ml_example1dGS ml_example2d ml_example3d ml_simple_max \
		  ml_readfile ml_read_elas ml_recirc \
                  ml_read_salsa \
                  ml_preconditioner \
                  ml_2level_DD \
                  ml_operator \
                  ml_AztecMsr \
                  ml_filtering \
		  ml_EpetraVbr \
		  ml_viz \
		  ml_analyze \
		  ml_maxwell  \
		  ml_read_matrix_AIJ \
                  ml_multiple_rhs \
                  ml_example_elasticity
endif #HAVE_MPI

endif # ML_STANDALONE_MODE
#The following line cleans up bootstrap problems because these programs
#are not built when nothing is defined.
EXTRA_PROGRAMS = ml_read_maxwell mlguide_par

# One SOURCES primary is needed for EACH exe listed above.  (Notice for all 
# of the  following primaries that the pattern is 
# "(Exe_name)_(PRIMARY_NAME) = ").
# List all source files needed to compile the exe.
mlguide_SOURCES = $(srcdir)/mlguide.c
mlguide_par_SOURCES = $(srcdir)/mlguide_par.c
if !ML_STANDALONE_MODE
ml_aztec_simple_SOURCES = $(srcdir)/ml_aztec_simple.c
ml_example1d_SOURCES = $(srcdir)/ml_example1d.c
ml_example1dGS_SOURCES = $(srcdir)/ml_example1dGS.c
ml_example2d_SOURCES = $(srcdir)/ml_example2d.c
ml_example3d_SOURCES = $(srcdir)/ml_example3d.c
ml_simple_max_SOURCES = $(srcdir)/ml_simple_max.c
ml_readfile_SOURCES = $(srcdir)/ml_readfile.c
ml_read_elas_SOURCES = $(srcdir)/ml_read_elas.c
ml_recirc_SOURCES = $(srcdir)/ml_recirc.c
ml_read_salsa_SOURCES = $(srcdir)/ml_read_salsa.c
ml_preconditioner_SOURCES = $(srcdir)/ml_preconditioner.cpp
ml_2level_DD_SOURCES = $(srcdir)/ml_2level_DD.cpp
ml_operator_SOURCES = $(srcdir)/ml_operator.cpp
ml_AztecMsr_SOURCES = $(srcdir)/ml_AztecMsr.cpp
ml_filtering_SOURCES = $(srcdir)/ml_filtering.cpp
ml_EpetraVbr_SOURCES= $(srcdir)/ml_EpetraVbr.cpp
ml_viz_SOURCES= $(srcdir)/ml_viz.cpp
ml_analyze_SOURCES= $(srcdir)/ml_analyze.cpp
ml_maxwell_SOURCES = $(srcdir)/ml_maxwell.cpp
ml_example_elasticity_SOURCES = $(srcdir)/ml_example_elasticity.c
ml_read_matrix_AIJ_SOURCES= $(srcdir)/ml_read_matrix_AIJ.cpp
ml_multiple_rhs_SOURCES = $(srcdir)/ml_multiple_rhs.cpp

if ML_BENCHMARKING
ml_read_maxwell_SOURCES = $(srcdir)/ml_read_maxwell.c
endif # ML_BENCHMARKING
endif # !ML_STANDALONE_MODE

# One DEPENDENCIES primary is needed for each exe listed above.  List any
# libraries that the exe depends on.  (This primary is not absolutely
# essential.)

# This is not working.  
# It should be ok to omit it because when _DEPENDENCIES is not
# specified, the value is calculated from the corresponding _LDADD value.
#if ML_STANDALONE_MODE
#mlguide_DEPENDENCIES =
#else
#mlguide_DEPENDENCIES = ${ml_integrated_dependencies}
#endif

if ML_USING_AZTECOO
aztecoo_incdir = -I$(top_srcdir)/../aztecoo/src -I$(top_builddir)/../aztecoo/src
else
aztecoo_incdir = 
endif
if ML_USING_AMESOS
amesos_incdir = -I$(top_srcdir)/../amesos/src -I$(top_builddir)/../amesos/src
else
amesos_incdir = 
endif
if ML_USING_IFPACK
ifpack_incdir = -I$(top_srcdir)/../ifpack/src -I$(top_builddir)/../ifpack/src 
else
ifpack_incdir = 
endif
if ML_USING_TEUCHOS
teuchos_incdir = -I$(top_srcdir)/../teuchos/src -I$(top_builddir)/../teuchos/src
else
teucho_incdir =
endif
if ML_USING_ANASAZI
anasazi_incdir = -I$(top_srcdir)/../anasazi/src -I$(top_builddir)/../anasazi/src
else
anasazi_incdir =
endif
if ML_USING_TRIUTILS
triutils_incdir = -I$(top_srcdir)/../triutils/src -I$(top_builddir)/../triutils/src
else
triutils_incdir =
endif
if ML_USING_EPETRA
epetra_incdir = -I$(top_srcdir)/../epetra/src -I$(top_builddir)/../epetra/src
else
epetra_incdir =
endif

ml_common_include_locations = -I$(top_srcdir)/src/Include \
                   -I$(top_srcdir)/src/Coarsen            \
                   -I$(top_srcdir)/src/Comm               \
                   -I$(top_srcdir)/src/FEGrid             \
                   -I$(top_srcdir)/src/Include            \
                   -I$(top_srcdir)/src/Krylov             \
                   -I$(top_srcdir)/src/Main               \
                   -I$(top_srcdir)/src/Operator           \
                   -I$(top_srcdir)/src/Smoother           \
                   -I$(top_srcdir)/src/Utils              \
	           $(aztecoo_incdir) \
	           $(ifpack_incdir) \
	           $(amesos_incdir) \
	           $(teuchos_incdir) \
	           $(anasazi_incdir) \
	           $(triutils_incdir) \
	           $(epetra_incdir)

if ML_STANDALONE_MODE
#I'm defining the linker in this way, rather than
#       ml_invididual_example_LINK = ${CC}
#because the above definition will not use the compiler and loader flags
#specified in AM_CFLAGS, CFLAGS, AM_LDFLAGS, and LDFLAGS.
mllink = $(CC) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
ml_libs = $(top_builddir)/src/libml.a        \
                $(LIBS)             \
                $(LAPACK_LIBS)                            \
                $(BLAS_LIBS)                            \
                $(FLIBS)
else
mllink = $(CXX) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@

if ML_USING_AZTECOO
aztecoo_lib = $(top_builddir)/../aztecoo/src/libaztecoo.a
else
aztecoo_lib =
endif

if ML_USING_EPETRA
epetra_lib = $(top_builddir)/../epetra/src/libepetra.a
else
epetra_lib =
endif

if ML_USING_AMESOS
amesos_lib = $(top_builddir)/../amesos/src/libamesos.a
else
amesos_lib =
endif

if ML_USING_ANASAZI
anasazi_lib = $(top_builddir)/../anasazi/src/libanasazi.a
else
anasazi_lib = 
endif

if ML_USING_TEUCHOS 
teuchos_lib = $(top_builddir)/../teuchos/src/libteuchos.a
else
teuchos_lib =
endif

if ML_USING_TRIUTILS
triutils_lib = $(top_builddir)/../triutils/src/libtriutils.a
else
triutils_lib =
endif

if ML_USING_IFPACK
ifpack_lib = $(top_builddir)/../ifpack/src/libifpack.a
else
ifpack_lib =
endif
#
ml_libs = $(top_builddir)/src/libml.a \
                $(aztecoo_lib)        \
                $(ifpack_lib)         \
                $(amesos_lib)         \
                $(anasazi_lib)        \
                $(teuchos_lib)        \
                $(triutils_lib)       \
                $(epetra_lib)         \
                $(LIBS)               \
                $(LAPACK_LIBS)        \
                $(BLAS_LIBS)          \
                $(FLIBS)
endif

# One CXXFLAGS primary can be defined for each exe listed above.  Include 
# any -I's necessary for building the exe.

# One LDADD primary can be defined for each exe listed above.  Include any
# LDFLAGS  necessary for building the exe.

mlguide_CFLAGS = ${ml_common_include_locations}
mlguide_LDADD = ${ml_libs}
mlguide_LINK = ${mllink}

mlguide_par_CFLAGS = ${ml_common_include_locations}
mlguide_par_LDADD = ${ml_libs}
mlguide_par_LINK = ${mllink}

if !ML_STANDALONE_MODE
ml_aztec_simple_CFLAGS = ${ml_common_include_locations}
ml_aztec_simple_LDADD = ${ml_libs}
ml_aztec_simple_LINK = ${mllink}

ml_example1d_CFLAGS = ${ml_common_include_locations}
ml_example1d_LDADD = ${ml_libs}
ml_example1d_LINK = ${mllink}

ml_example1dGS_CFLAGS = ${ml_common_include_locations}
ml_example1dGS_LDADD = ${ml_libs}
ml_example1dGS_LINK = ${mllink}

ml_example2d_CFLAGS = ${ml_common_include_locations}
ml_example2d_LDADD = ${ml_libs}
ml_example2d_LINK = ${mllink}

ml_example3d_CFLAGS = ${ml_common_include_locations}
ml_example3d_LDADD = ${ml_libs}
ml_example3d_LINK = ${mllink}

ml_simple_max_CFLAGS = ${ml_common_include_locations}
ml_simple_max_LDADD = ${ml_libs}
ml_simple_max_LINK = ${mllink}

ml_readfile_CFLAGS = ${ml_common_include_locations}
ml_readfile_LDADD = ${ml_libs}
ml_readfile_LINK = ${mllink}

ml_read_elas_CFLAGS = ${ml_common_include_locations}
ml_read_elas_LDADD = ${ml_libs}
ml_read_elas_LINK = ${mllink}

ml_recirc_CFLAGS = ${ml_common_include_locations}
ml_recirc_LDADD = ${ml_libs}
ml_recirc_LINK = ${mllink}

ml_read_salsa_CFLAGS = ${ml_common_include_locations}
ml_read_salsa_LDADD = ${ml_libs}
ml_read_salsa_LINK = ${mllink}

ml_preconditioner_CPPFLAGS = ${ml_common_include_locations}
ml_preconditioner_CXXFLAGS = ${ml_common_include_locations}
ml_preconditioner_LDADD = ${ml_libs} 
ml_preconditioner_LINK = ${mllink}

ml_2level_DD_CPPFLAGS = ${ml_common_include_locations}
ml_2level_DD_CXXFLAGS = ${ml_common_include_locations}
ml_2level_DD_LDADD = ${ml_libs} 
ml_2level_DD_LINK = ${mllink}

ml_AztecMsr_CPPFLAGS = ${ml_common_include_locations}
ml_AztecMsr_CXXFLAGS = ${ml_common_include_locations}
ml_AztecMsr_LDADD = ${ml_libs} 
ml_AztecMsr_LINK = ${mllink}

ml_operator_CPPFLAGS = ${ml_common_include_locations}
ml_operator_CXXFLAGS = ${ml_common_include_locations}
ml_operator_LDADD = ${ml_libs}
ml_operator_LINK = ${mllink}

ml_filtering_CPPFLAGS = ${ml_common_include_locations}
ml_filtering_CXXFLAGS = ${ml_common_include_locations}
ml_filtering_LDADD = ${ml_libs}
ml_filtering_LINK = ${mllink}

ml_EpetraVbr_CPPFLAGS = ${ml_common_include_locations}
ml_EpetraVbr_CXXFLAGS = ${ml_common_include_locations}
ml_EpetraVbr_LDADD = ${ml_libs}
ml_EpetraVbr_LINK = ${mllink}

ml_viz_CPPFLAGS = ${ml_common_include_locations}
ml_viz_CXXFLAGS = ${ml_common_include_locations}
ml_viz_LDADD = ${ml_libs}
ml_viz_LINK = ${mllink}

ml_analyze_CPPFLAGS = ${ml_common_include_locations}
ml_analyze_CXXFLAGS = ${ml_common_include_locations}
ml_analyze_LDADD = ${ml_libs}
ml_analyze_LINK = ${mllink}

ml_read_matrix_AIJ_CPPFLAGS = ${ml_common_include_locations}
ml_read_matrix_AIJ_CXXFLAGS = ${ml_common_include_locations}
ml_read_matrix_AIJ_LDADD = ${ml_libs}
ml_read_matrix_AIJ_LINK = ${mllink}

ml_maxwell_CPPFLAGS = ${ml_common_include_locations}
ml_maxwell_CXXFLAGS = ${ml_common_include_locations}
ml_maxwell_LDADD = ${ml_libs}
ml_maxwell_LINK = ${mllink}

ml_multiple_rhs_CPPFLAGS = ${ml_common_include_locations}
ml_multiple_rhs_CXXFLAGS = ${ml_common_include_locations}
ml_multiple_rhs_LDADD = ${ml_libs}
ml_multiple_rhs_LINK = ${mllink}

ml_example_elasticity_CFLAGS = ${ml_common_include_locations}
ml_example_elasticity_LDADD = ${ml_libs}
ml_example_elasticity_LINK = ${mllink}

if ML_BENCHMARKING
ml_read_maxwell_CFLAGS = ${ml_common_include_locations}
ml_read_maxwell_LDADD = ${ml_libs}
ml_read_maxwell_LINK = ${mllink}
endif #ML_BENCHMARKING
endif #!ML_STANDALONE_MODE
