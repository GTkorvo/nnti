Example of using Epetra_ML_Preconditioner
=========================================

The constructor requires and Epetra_RowMatrix and a Teuchos parameter
list (here called MLList). This list is copied by the constructor.
All the required parameters are set using MLList.

Let A be an * Epetra_RowMatrix, and MLList a Teuchos::ParameterList.  
An Epetra_ML_Preconditioner object can be constructed as:

  Epetra_ML_Preconditioner * MLPrec = new Epetra_ML_Preconditioner(A,MLList,false);

The last parameter tells the constructor not to build the ML hierarchy.
This will be done using

  MLPrec->ComputePreconditioner();

(which supposed that A is still a valid pointer). Data are destroyed
using

  MLPrec->DestroyPreconditioner();

Then, The user can change the structure and the values of A (including
its Epetra_Map), and then recall ComputePreconditioner() to create a new
ML hierarchy. (However, MLList is not supposed to change.)

Finally, the object can be destroyed as

  delete MLPrec;

Each parameter has a default level, here indicated as the second entry
of setParameter. Some parameters refer to all levels, other are specific
for each level, and they are here identified by "(level X)". In this
file, "X" indicates the level for which the considered parameter is
valid, and should be replaced by the desired level number. This can be
obtained as follows: one can define

  char parameter[80]; 

and use sprint to specify the parameter name: 

  sprintf(parameter,"aggregation: type (level %d)",level).

If not specified for a given level, the required parameter is
taken from the last specified level if available, of default value
otherwise.


+-----------------------------------+
| Parameters that affect all levels |
+-----------------------------------+

- Set the maximum number of levels for AMG. [int]

  MLList.setParameter("max levels", 10);


- Set the output level, from 0 to 10, 10 begin verbose. [int]

  MLList.setParameter("output", 10);


- Set debug flag (print the parameter list and some more
  information) [bool]

  MLList.setParameter("debug",false);


- Set the aggregation damping factor. If `0.0', Epetra_ML_Preconditioner
  will produce non-smoothed aggregates. [double]

   MLList.setParameter("aggregation: damping factor",0.01);


- Set the threshold for aggregation. Aggregation is perfomed on a graph,
  derived from the graph of the current level matrix. All elements below
  the threshold will not be included in the graph to partition. [double]

  MLList.setParameter("aggregation: threshold", 0.0);


- Set the number of aggregates to assign to each processor. This means
  that the unknowns for the next level will be redistributed among the
  available processes so that at least the specified number is assegned to
  the first processes. [int]

  MLList.setParameter("aggregation: req aggregates per process", 128);


- Specifies the maximum coarse size. ML will not coarsen any more is the
  local level size is smaller than this value. [int]

  MLList_.setParameter("coarse: max size", 512);


- Specifies how many degrees of freedom are related to the same grid node. This
  parameter is considered only if the Epetra_RowMatrix cannot be casted to
  an Epetra_VbrMatrix. Note also that it is supposed that all the
  degrees of freedom for the same node are ordered consicutively. Also,
  all nodes must share the same number of degrees of freedom. [int]

  MLList_.setParameter("PDE equations",1);


- Define the coarse solver. Can be: "Jacobi", "Gauss-Seidel", "SuperLU",
  "Amesos_KLU", "Amesos_UMFPACK", "Amesos_Superludist",
  "Amesos_MUMPS". SuperLU requires ml to be configured with support for
  SuperLU. Amesos options require ML to be configured with support
  for Amesos, and Amesos to be configured with support for
  the specified libraries. [string]

  MLList.setParameter("coarse: type","Amesos_KLU");


- Defines the damping factor for coarse smoother (only for Jacobi and
  Gauss-Seidel). [double]

  MLList.setParameter("coarse: damping factor", 0.67);
    
- Defines the sweeps for coarse smoother (only for Jacobi and
  Gauss-Seidel). [int]

  MLList.setParameter("coarse: sweeps", 1);


- Specifies the maximum number of processes Amesos should use (this will
  affect only some Amesos packages, notably SuperluDIST). If -1, all the
  avaialable processes will be used. [int]

  MLList.setParameter("coarse: max processes", 1);


+--------------------------+
| Parameter for each level |
+--------------------------+

- Set the aggregation scheme for a given level. Can be: "Uncoupled",
  "MIS", "METIS", "ParMETIS". Uncoupled and MIS build tiny aggregate, of
  "optimal" dimension (9 in 2D, and 27 in 3D). MIS should be avoided as
  coarsen scheme for large matrices, as it requires a product A * A (where
  A is the graph of the linear system matrix for the current level). METIS
  and ParMETIS will require a further parameter, which is the number of
  local aggregates, or the number of nodes per aggregate (described
  below). [string]

  MLLIst.setParameter("aggregation: type (level X)", "METIS");


- Set the number of local aggregates (used by METIS and ParMETIS only). 

  MLList.getParameter("aggreegation: local aggregates (level X)",1);


- Set the global number of aggregates (used by METIS and ParMETIS only). 

  MLList.getParameter("aggregation: global aggregates (level X)",1);


- Set the number of nodes to be included in each aggregate (used by METIS and ParMETIS only). 

  MLList.getParameter("aggregation: nodes per aggregate (level X)",512);

  NOTE: if none of the above three parameters is specified, the code
  assumed one aggregate per process.


- Define the smoother for the given level.  Can be: "Jacobi",
  "Gauss-Seidel", "symmetric Gauss-Seidel", "block Gauss-Seidel", "MLS",
  "aztec", "ifpack". [string]

  MLList.setParameter("smoother: type (level X)", "Jacobi");
   

- Enable presmoothing or postsmoothing (or both). Possible choices are:
  "pre", "post", "both". [string]

  MLLIst.setParameter("smoother: pre or post (level X)", "post");


- Set the order of MLS smoother. [int]

  MLList.setParameter("smoother: MLS polynomial order (level X)", 3);


- Set the alpha value for MLS smoother. Default: 30.0 (should be the
  ratio between the number of unkonwns in this level and next level). [int]

  MLList.setParameter("smoother: MLS alpha (level X)", 30.0);


- Set the damping factor for smoother (used by Jacobi, Gauss-Seidel,
  symmetric Gauss-Seidel). [int]

  MLList.setParameter("smoother: damping factor (level X)",1);


- Set the number of sweeps for smoother (used by Jacobi, Gauss-Seidel0. [int]

  MLList.setParameter("smoother: sweeps (level X)",1);


- Set options and params vector to be used by Aztec smoother. If not
  specified, the code assumes AZ_dom_decomp with AZ_ilut. [int *, double*]

  MLList.setParameter("smoother: aztec options (level X)",NULL);
  MLList.setParameter("smoother: aztec params (level X)",NULL);


- Use Aztec as a solver in the smoothing phase. If false, use Aztec's
  preconditioning function as smoother. [bool]

  MLList.setParameter("smoother: aztec as solver (level X)",false);





MS, Albuquerque, 09-Feb-04