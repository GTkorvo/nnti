#!/bin/sh
echo 
echo "                ML installer ..."
echo
echo
echo "This program attempts to build all the libraries that can be used"
echo "with ML. We are still debugging the installer ... and so there are"
echo "lots of things that might go wrong (especially when compiling other"
echo "packages). It is recommended that casual users work with as few "
echo "packages as possible (e.g. just MPI or just MPI & SuperLU)."
echo
echo "Currently, the following libraries can be optionally"
echo "used with ML:"
echo
echo "    1) MPI  "
echo "    2) Aztec"
echo "    3) SuperLU or Distributed SuperLU"
echo "    4) ParaSails                     " 
echo "    5) ParMetis                      " 
echo
echo "If you are not sure what libraries you need, you can compile"
echo "without libraries and then you will get a message when executing"
echo "if something needs to be added."
echo 
echo "==> If something goes WRONG ... you have to do things manually"
echo "==>"
echo "==> 1) If you don't have 'Obj/' --> 'cd etc; flatten; cd ..'"
echo "==> 2) Compile any package not built"
echo "==> 3) setenv ARCH machine"
echo "==>       where machine is one of CPLANT, DEC, HP, PCLINUX, SGI, "
echo "==>       SMOS, SOLARIS, SP2, SUN, TFLOP."
echo "==> 4) create the file 'make_\${ARCH}.variables' in \'ml/\' listing"
echo "==>    all packages being used, include paths, and libraries."
echo "==>    For example:"
echo "==>            PACKAGES=-DML_MPI -DAZTEC -DSUPERLU -DPARASAILS -DMETIS"
echo "==>            LIB_HOME=/home/doe/ml/lib"
echo "==>            INC_PATH=-I\${LIB_HOME}/ParMetis-2.0/METISLib -I\${LIB_HOME}/ParaSails \\"
echo "==>                     -I\${LIB_HOME}/DSuperLU/SRC -I\${LIB_HOME}/Aztec/lib \\"
echo "==>                     -I/usr/local/mpich/include"
echo "==>            LIBRARIES= -L\${LIB_HOME}/ParMetis-2.0 -lmetis -L\${LIB_HOME}/ParaSails \\"
echo "==>                       -lParaSails \${LIB_HOME}/DSuperLU/superluPCLINUX.a \\"
echo "==>                       -L\${LIB_HOME}/Aztec/lib -laztec -L/usr/local/mpich/lib -lmpich"
echo
echo
USING_MPI=no
GOT_BLAS=no
GOT_LAPACK=no
ARCH=
PACKAGES=-Dbinary
INC_PATH=
LIBRARIES=
ML_HOME=$PWD

echo
echo
echo "At this point you need to tell us what platform you are using"
echo "Currently available machines include:"
echo "    CPLANT, DEC, HP, PCLINUX, SGI, SMOS, SOLARIS, SP2, SUN, TFLOP"
echo "To add another machine, create a new etc/makefile.xxx and put"
echo "machine in this script's list."
echo
echo -n "What machine? [PCLINUX] "
read ARCH
ARCH=`echo ${ARCH},`
if test `expr $ARCH` = ','
then
   ARCH=PCLINUX,
fi
ARCH=`echo ${ARCH} | sed s/,//`
#
#
if test `expr $ARCH` != 'CPLANT'   &&
   test `expr $ARCH` != 'DEC'     &&
   test `expr $ARCH` != 'HP'       &&
   test `expr $ARCH` != 'PCLINUX'  && 
   test `expr $ARCH` != 'SGI'      &&
   test `expr $ARCH` != 'SMOS'     &&
   test `expr $ARCH` != 'SOLARIS'  &&
   test `expr $ARCH` != 'SP2'      &&
   test `expr $ARCH` != 'SUN'      &&
   test `expr $ARCH` != 'TFLOP'   
then
   echo Unsupported machine
   exit
fi
#
# Make the Obj directory with links to the source code and 
# makefile.
#
if test -d Obj 
then
  rm -f make_${ARCH}.variables
  echo >  make_${ARCH}.variables
  cd Obj; make clean; cd ..
else
  cd etc; flatten;  cd ..
fi
#
# Set up the machine dependent environment variables
#
\rm -f .arch_env
grep "=" etc/makefile.${ARCH} | grep -v "^\#"  \
         | sed "s/\#.*//"  \
         | sed "s/=/=\"/" | sed "s/$/\"/" \
         | sed "s/(/{/g"  | sed "s/)/}/g"  > .arch_env
chmod a+x .arch_env

#
# See what packages are needed and take appropriate action
#
echo
echo
echo "At this point you need to tell us which libraries are needed"
echo
echo
echo -n "Does your machine have the lapack library? [no] "
read yes_or_no
yes_or_no=`echo ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   echo -n "Where is the Lapack library? [/usr/local/lib] "
   read directory
   tdirectory=`echo ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=/usr/local/lib
   fi
   echo -n "What is the name of the Lapack library? [lapack] "
   read library
   tlibrary=`echo ${library}x`
   if test `expr $tlibrary ` = 'x'
   then
      library=lapack
   fi
   PACKAGES=`echo $PACKAGES -DUSE_VENDOR_LAPACK`
   LIBRARIES=`echo $LIBRARIES -L${directory} -l${library}`
   GOT_LAPACK=yes
   echo "=================================================================="
fi

echo -n "Does your machine have a blas library? [no] "
read yes_or_no
yes_or_no=`echo ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   echo -n "Where is the Blas library? [/usr/local/lib] "
   read directory
   tdirectory=`echo ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=/usr/local/lib
   fi
   echo -n "What is the name of the Blas library? [blas] "
   read library
   tlibrary=`echo ${library}x`
   if test `expr $tlibrary ` = 'x'
   then
      library=blas
   fi
   PACKAGES=`echo $PACKAGES -DUSE_VENDOR_BLAS` 
   LIBRARIES=`echo $LIBRARIES -L${directory} -l${library}`
   GOT_BLAS=yes
   echo "=================================================================="
fi

echo -n "Do you want to use MPI? [yes] "
read yes_or_no
yes_or_no=`echo ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess' ||
   test `expr $yes_or_no` = 's'
then
   USING_MPI=yes
   PACKAGES=`echo $PACKAGES -DML_MPI`
#
#  Haven't finished the mpicc stuff yet so I am turning it off
#
#   echo -n "Do you use mpicc? [no] "
#   read yes_or_no
   yes_or_no=no
   yes_or_no=`echo ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' 
   then 
      cdirectory= 
      fdirectory= 
      echo "Is mpicc in your path? [yes] "
      read yes_or_no
      yes_or_no=`echo ${yes_or_no}s`
      if test `expr $yes_or_no` = 'nos' 
      then
         echo -n "Where is mpicc? [/usr/local/mpich] "
         read cdirectory
         cdirectory=`echo ${cdirectory}/`
         if test `expr $cdirectory` = '/'
         then
            cdirectory=/usr/local/mpich/
         fi
         echo -n "Where is mpif77? [/usr/local/mpich] "
         read fdirectory
         fdirectory=`echo ${fdirectory}/`
         if test `expr $fdirectory` = '/'
         then
            fdirectory=/usr/local/mpich/
         fi
      fi
      \rm -f .t1
      cat .arch_env | sed "s/^CC.*/CC=\${cdirectory}mpicc/" > .t1
      \rm -f .arch_env
      cat .t1       | sed "s/^FC.*/FC=${fdirectory}mpif77/" > .arch_env
      \rm -f .t1
   fi
   echo -n "Does compiler need to know location of MPI include files? [yes] "
   read yes_or_no
   yes_or_no=`echo ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      echo
      echo "List each include directory on a line followed by a line with just 'x'"
      read directory
      MPI_INC_PATH=
      while (test `expr $directory ` != 'x')
      do
         INC_PATH=`echo ${INC_PATH}  -I$directory`
         MPI_INC_PATH=`echo ${MPI_INC_PATH}  -I$directory`
         read directory
      done
   fi
   echo -n "Does compiler need to know location of MPI library? [yes] "
   read yes_or_no
   yes_or_no=`echo ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      echo 
      echo "Enter directory containing library"
      read directory
      LIBRARIES=`echo ${LIBRARIES} -L$directory`
      echo
      echo "Enter library name (e.g. mpich)"
      read directory
      LIBRARIES=`echo ${LIBRARIES} -l$directory`
   else
      echo "Enter any compiler flag needed for mpi (e.g. -lmpi)."
      read directory
      LIBRARIES=`echo ${LIBRARIES} $directory`
   fi
   echo "=================================================================="
fi 
echo 
echo "Aztec can be used to supply some smoothers and an outer Krylov"
echo "iteration (i.e. using ML as a preconditioner)."
echo
echo -n "Do you want to use Aztec? [yes] "
read yes_or_no
yes_or_no=`echo ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess' ||
   test `expr $yes_or_no` = 's'
then
   AZTEC_INTERNAL=no 
   PACKAGES=`echo $PACKAGES -DAZTEC`
   echo -n "Where is the Aztec directory? [$PWD/lib/Aztec] "
   read directory
   tdirectory=`echo ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/Aztec
   fi
   echo -n "Are you using an internal developer distribution of Aztec? [no] "
   read yes_or_no
   yes_or_no=`echo ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess'
   then
      echo -n "Where is y12m and blas? "
      read dir
      AZTEC_INTERNAL=yes 
      LIBRARIES=`echo -L${dir} -ly12m -lblas ${LIBRARIES}`
      INC_PATH=`echo -I${directory}/../az ${INC_PATH}`
      LIBRARIES=`echo $directory/libaztec.a ${LIBRARIES}`
   else
      INC_PATH=`echo -I${directory}/lib ${INC_PATH}`
      LIBRARIES=`echo $directory/lib/libaztec.a ${LIBRARIES}`

      echo
      echo -n "Do you need to build Aztec? [yes] "
      read yes_or_no
      yes_or_no=`echo ${yes_or_no}s`
      if test `expr $yes_or_no` = 'yess' ||
         test `expr $yes_or_no` = 's'
      then
         source .arch_env
         tFLAGS=-Dappend
         ttt=`grep matched .arch_env | sed "s/ /_/g"` 
         ttt=`echo ${ttt}s`
         if test `expr $ttt` = 's'
         then
            tFLAGS=-Dappend
         else
            tFLAGS=-Dmatched
         fi

         cd ${directory}/lib
         if test `expr $USING_MPI` = 'no'
         then
            AZCOMM=md_wrap_scalar_c.c
         else 
            AZCOMM=md_wrap_mpi_c.c
            tFLAGS=`echo ${tFLAGS} -DAZ_MPI ${MPI_INC_PATH}`
         fi
         BLAS=
         if test `expr $GOT_BLAS` = 'no'
         then
            BLAS="blas1.f blas2.f blas3.f"
         fi
         if test `expr ${GOT_LAPACK}` = 'no'
         then
            LA_SRC="blas1.f blas2.f blas3.f"
            make "CC=${CC}" "FC=${FC}" "AR=${AR}" "TIMER=md_timer_generic.c" \
                 "COMMUNICATION=${AZCOMM}" "RNLIB=${RANLIB}" \
                 "CFLAGS=${tFLAGS} ${ARCH_FLAGS} -Dbinary" "BLAS=${BLAS}" \
                 -f Makefile.template
         else
            make "CC=${CC}" "FC=${FC}" "AR=${AR}" "TIMER=md_timer_generic.c" \
                 "COMMUNICATION=${AZCOMM}" "RNLIB=${RANLIB}" \
                 "CFLAGS=${tFLAGS} ${ARCH_FLAGS} -Dbinary" "LA_SRC=" "BLAS=${BLAS}" \
                 -f Makefile.template
         fi
      fi
      cd $ML_HOME
   fi
   echo "=================================================================="
fi
echo
echo "SuperLU (serial or distributed) can be used as a coarsest grid "
echo "solver within ML."
echo
echo -n "Do you want to use Serial SuperLU? [yes] "
read yes_or_no
yes_or_no=`echo ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess' ||
   test `expr $yes_or_no` = 's'
then
   PACKAGES=`echo $PACKAGES -DSUPERLU`
   echo -n "Where is the superlu directory? [$PWD/lib/DSuperLU] "
   read directory
   tdirectory=`echo ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/DSuperLU
   fi
   SUPERLU_INC_PATH=`echo -I$directory/SRC`
   INC_PATH=`echo -I${directory}/SRC ${INC_PATH}`
   LIBRARIES=`echo ${directory}/superlu${ARCH}.a ${LIBRARIES}`
   echo
   echo -n "Do you need to build SuperLU? [yes] "
   read yes_or_no
   yes_or_no=`echo ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      echo "Here goes ..."
      source .arch_env
      cd ${directory}/SRC
      make "CC=${CC}" "ARCH=${AR}" "RANLIB=${RANLIB}" "PLAT=${ARCH}" \
           "CFLAGS=${ARCH_FLAGS}" "LOADER=${LINKER}"  double
      cd $ML_HOME
   fi
   echo "=================================================================="
else
   echo -n "Do you want to use Distributed SuperLU? [yes] "
   read yes_or_no
   yes_or_no=`echo ${yes_or_no}s`
   if  test `expr $USING_MPI` = 'no' &&
      (test `expr $yes_or_no` = 'yess' ||
       test `expr $yes_or_no` = 's')
   then
      echo
      echo "====> Must use MPI with Distributed SuperLU ... IGNORING"
      echo
      yes_or_no=no
   fi
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      PACKAGES=`echo $PACKAGES -DDSUPERLU`
      echo -n "Where is the superlu directory? [$PWD/lib/SuperLU_DIST] "
      read directory
      tdirectory=`echo ${directory}x`
      if test `expr $tdirectory` = 'x'
      then
         directory=$PWD/lib/SuperLU_DIST
      fi
      INC_PATH=`echo -I${directory}/SRC ${INC_PATH}`
      LIBRARIES=`echo ${directory}/superlu_${ARCH}.a ${LIBRARIES}`
      echo
      echo -n "Do you need to build SuperLU? [yes] "
      read yes_or_no
      yes_or_no=`echo ${yes_or_no}s`
      if test `expr $yes_or_no` = 'yess' ||
         test `expr $yes_or_no` = 's'
      then
         echo "This is not done yet ..."
      fi
      echo "=================================================================="
   fi
fi

echo
echo "ParaSails can be  used to supply a sparse approximate inverse "
echo "smoother on any level."
echo
echo -n "Do you want to use ParaSails? [no] "
read yes_or_no
yes_or_no=`echo ${yes_or_no}s`
if test `expr $USING_MPI` = 'no' &&
   test `expr $yes_or_no` = 'yess' 
#   test `expr $yes_or_no` = 's')
then
   echo
   echo "====> Must use MPI with ParaSails ... IGNORING"
   echo
   yes_or_no=no
fi
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   PACKAGES=`echo $PACKAGES -DPARASAILS`
   echo -n "Where is the ParaSails directory? [$PWD/lib/ParaSails] "
   read directory
   tdirectory=`echo ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/ParaSails
   fi
   INC_PATH=`echo -I${directory} ${INC_PATH}`
   LIBRARIES=`echo ${directory}/libParaSails.a ${LIBRARIES}`
   echo
   echo -n "Do you need to build ParaSails? [yes] "
   read yes_or_no
   yes_or_no=`echo ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      echo "Here goes ..."
      source .arch_env
      cd ${directory}
      t=`echo ${ARCH_FLAGS} ${MPI_INC_PATH} -DPARASAILS_DEBUG -DPARASAILS_CG_PRINT`
      make "CC=${CC}" "RANLIB=${RANLIB}" \
           "CFLAGS=${t}"
      cd $ML_HOME
   fi
   echo "=================================================================="
fi

echo
echo "ParMetis  can be  used to create variable sized blocks for block"
echo "Jacobi or block Gauss-Seidel smoothers" 
echo
echo -n "Do you want to use ParMetis? [no] "
read yes_or_no
yes_or_no=`echo ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   PACKAGES=`echo $PACKAGES -DMETIS`
   echo -n "Where is the ParMetis directory? [$PWD/lib/ParMetis-2.0] "
   read directory
   tdirectory=`echo ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/ParMetis-2.0
   fi
   INC_PATH=`echo -I${directory}/METISLib ${INC_PATH}`
   LIBRARIES=`echo ${directory}/libmetis.a ${LIBRARIES}`

   echo
   echo -n "Do you need to build ParMetis? [yes] "
   read yes_or_no
   yes_or_no=`echo ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      echo "Here goes ..."
      source .arch_env
      cd ${directory}/METISLib
      t=`echo ${ARCH_FLAGS} -I. ${MPI_INC_PATH}`
      make "CC=${CC}" "RANLIB=${RANLIB}" "INCDIR=${MPI_INC_DIR}" \
           "AR=${AR} rcv" "CFLAGS=${t}"
      cd $ML_HOME
   fi
   echo "=================================================================="
fi



echo "The  file 'makefile_${ARCH}.variables will being created with environment variables."
echo "This file will be sourced when trying to compile ml"

rm -f make_${ARCH}.variables
echo ARCH=$ARCH                    >  make_${ARCH}.variables
echo PACKAGES=$PACKAGES            >> make_${ARCH}.variables
echo INC_PATH=$INC_PATH            >> make_${ARCH}.variables
echo LIBRARIES=$LIBRARIES          >> make_${ARCH}.variables

echo
echo "Now trying to make the ml library with a sample program ..."
sleep 2

cd Obj
make ARCH=${ARCH}
echo "=================================================================="
echo
echo "In the future you can set the ARCH environment variable and do a make in"
echo "the Obj subdirectory (if you don't need to rebuild other libararies)"
echo
echo "That is"
echo
echo "setenv ARCH " $ARCH
echo "cd Obj"
echo "make"
\rm -f .arch_env
