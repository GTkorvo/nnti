#!/bin/sh
#
# This script is used for running a series of benchmark tests.
# Users indicate a directory containing subdirectories which 
# describe data corresponding to different problems (one directory
# for each problem). The script automatically descends each 
# subdirectory and runs the appropriate executable within the subdirectory. 
# The name of the executable is given within the subdirectory in a file
# named 'exe.name'. If this executable does not exist in the 
# executable directory, it is compiled. All data necessary to run the 
# executable must be within this subdirectory. The problem is run and the 
# output is compared with an output file in this subdirectory. Some summary
# statistics are reported.
# Note: This script is often used with the executable ml_readfile
#        which contains comments on setting up problems. 
#
#echo "Usage: run_benchmarks [bench_directory executable_directory scratch_directory parallel={TRUE,FALSE}]

BENCH_DIRECTORY=/home/tuminaro/ml_bench
EXECUTABLE_DIRECTORY=/home/tuminaro/codes/Aztec/ml/Obj
SCRATCH_DIRECTORY=/tmp/poop
PARALLEL=TRUE

#echo "Usage: run_benchmarks [bench_directory executable_directory scratch_directory paralel={TRUE,FALSE}]

#echo $* $#
#
# Take command line arguments and replace defaults
#
#if test `expr ${*}` -ge `expr 3`
if test $# -ge 5
then
  echo "Usage: run_benchmarks [bench_directory executable_directory scratch_directory parallel={TRUE,FALSE}]"
  exit
fi
if test $# -eq 0
then
  echo "Taking defaults for everything:"
  echo "      BENCH DIRECTORY      = " $BENCH_DIRECTORY
  echo "      EXECUTABLE DIRECTORY = " $EXECUTABLE_DIRECTORY
  echo "      SCRATCH DIRECTORY    = " $SCRATCH_DIRECTORY
  echo 
  echo "If defaults not wanted, overwrite using ..."
  echo "    Usage: run_benchmarks [bench_directory executable_directory scratch_directory parallel={TRUE,FALSE} ]"
  echo
fi
if test $# -ge 1
then
  BENCH_DIRECTORY=$1
fi
if test $# -ge 2
then
  EXECUTABLE=$2
fi
if test $# -ge 3
then
  SCRATCH_DIRECTORY=$3
fi
if test $# -ge 4
then
  PARALLEL=$4
fi

#
#  Check for the benchmark directory containing the 
#  valid input/output data.
#

if test -d ${BENCH_DIRECTORY}
then
  touch ${BENCH_DIRECTORY}
else
  echo "The directory ${BENCH_DIRECTORY} does not exist?"
  exit
fi

#
#  Check for the executable directory
#
temp=`echo ${EXECUTABLE} | sed "s/ .*//"`
if test -d ${EXECUTABLE_DIRECTORY}
then
  touch ${EXECUTABLE_DIRECTORY}
else
  echo "The directory ${EXECUTABLE_DIRECTORY} does not exist?"
  exit
fi


#
#  Check for the work space directory where current run output 
#  will be stored.
#

if test -d ${SCRATCH_DIRECTORY}
then
  touch ${SCRATCH_DIRECTORY}
else
  echo "Creating the directory ${SCRATCH_DIRECTORY}"
  mkdir ${SCRATCH_DIRECTORY}
fi


#
# Run program within each subdirectory and compare output
# with that contained in the corresponding ${BENCH_DIRECTORY}.
#
rm -f ${SCRATCH_DIRECTORY}/summary
echo " *********** Summary ***************" >> ${SCRATCH_DIRECTORY}/summary
echo >> ${SCRATCH_DIRECTORY}/summary
echo >> ${SCRATCH_DIRECTORY}/summary
echo
tail -3 ${SCRATCH_DIRECTORY}/summary


cd ${BENCH_DIRECTORY}
for i in *
do 
   if test `expr ${i}` != 'CVS' -a \
           `expr ${i}` != '*'
   then
      cd ${i}
#      echo -n $i "  "
      if test -d ${SCRATCH_DIRECTORY}/${i}
      then
         touch ${SCRATCH_DIRECTORY}/${i}
      else
         mkdir ${SCRATCH_DIRECTORY}/${i}
      fi
      /bin/rm -f ml_inputfile
#     check that the executable file name is there
      if test -f exe.name
      then
#         check if the executable exists
#       
          temp=`cat exe.name`
          EXE=`echo ${EXECUTABLE_DIRECTORY}/$temp`
          if test -f $EXE
          then
             touch $EXE
          else
             cd ${EXECUTABLE_DIRECTORY}
             make APPLICATION_C=${temp}.c TESTING=-DBENCHMARK
             cd ${BENCH_DIRECTORY}/$i
          fi
#
#
#     execute any file that starts with ml_inputfile ...
#
      for j in ml_inputfile*
      do
        ttt=`echo $j | sed "s/ml_inputfile//"`
        /bin/rm -f ${SCRATCH_DIRECTORY}/${i}/output${ttt} ${SCRATCH_DIRECTORY}/${i}/difs${ttt}
        /bin/rm -f ml_inputfile
        cp $j ml_inputfile
        Nprocs=`grep -i "^Number of processors" ml_inputfile | sed s"/.*=//"`
#
#       run only if parallel=TRUE or nprocs = 1 or []
#
        temp=`echo xx${Nprocs}xx | sed "s/ *//g"`
        if test `expr ${PARALLEL}` = 'TRUE' -o \
           `expr ${temp}` = 'xxxx' -o \
           `expr ${temp}` = 'xx1xx' 
        then
        ${EXE} ${Nprocs} | grep -v ime > ${SCRATCH_DIRECTORY}/${i}/output${ttt}
        diff -w output${ttt} ${SCRATCH_DIRECTORY}/${i}/output${ttt} > \
                                    ${SCRATCH_DIRECTORY}/${i}/difs${ttt}
        wc ${SCRATCH_DIRECTORY}/${i}/difs${ttt} >> ${SCRATCH_DIRECTORY}/summary
        tail -1 ${SCRATCH_DIRECTORY}/summary
        cat ${SCRATCH_DIRECTORY}/${i}/difs${ttt} | grep "total iterations"
        cat ${SCRATCH_DIRECTORY}/${i}/difs${ttt} | grep "total iterations" >> ${SCRATCH_DIRECTORY}/summary
        cat ${SCRATCH_DIRECTORY}/${i}/difs${ttt} | grep "gid = "
        cat ${SCRATCH_DIRECTORY}/${i}/difs${ttt} | grep "gid = " >> ${SCRATCH_DIRECTORY}/summary
      fi
      done
      /bin/rm -f ml_inputfile
      else 
         echo "The file does not exist ${BENCH_DIRECTORY}/$i/exe.name?"
      fi
      cd ..
   fi
done
