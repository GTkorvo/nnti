#!/bin/sh
#
# It is intended that users invoke `installer' which will eventually
# invoke this function.
#
PWD=`pwd`
#
# See what packages are needed and take appropriate action
#
${echo}
${echo}
${echo} "Here are the libraries we currently have:" 
grep "^ARCH_LIB" etc/makefile.${ARCH} | sed "s/ARCH_LIB.*=/              /"
${echo}
${echo} "At this point you need to tell us what other libraries are needed"
${echo}
${echo}
${echo} -n "Do you want to supply the lapack library? [no] " | sed "s/-n//"
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess'
then
   GOT_LAPACK=yes
   PACKAGES=`${echo} $PACKAGES -DUSE_VENDOR_LAPACK`
fi
${echo} -n "Do you want to supply the blas library? [no] " | sed "s/-n//"
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   GOT_BLAS=yes
   PACKAGES=`${echo} $PACKAGES -DUSE_VENDOR_BLAS` 
fi

${echo} -n "Do you want to use MPI? [yes] " | sed "s/-n//"
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess' ||
   test `expr $yes_or_no` = 's'
then
   USING_MPI=yes
   PACKAGES=`${echo} $PACKAGES -DML_MPI`
   temp=`which mpicc 2>/dev/null | wc | sed "s/^ *//" | sed "s/. *//" | sed "s/ .*//"`
   if test `expr $temp` = '1'
   then
      cur_ins_mpicc=`which mpicc 2>/dev/null`
   else
      cur_ins_mpicc='no'
   fi
   ${echo} -n "Where is mpicc (enter 'no' to not use mpicc)[${cur_ins_mpicc}]:" | sed "s/-n//"
   read ins_mpicc
   temp=`${echo} ${ins_mpicc}s`
   if test `expr $temp` = 's'
   then
      ins_mpicc=${cur_ins_mpicc}
   fi
   if test `expr $ins_mpicc` = 'no'
   then
      temp= #nop
   else
      \rm -f etc/Makefile.${ARCH}_MPI
      cat etc/makefile.${ARCH} | sed "s/^CC.*//" | sed "s/^FC.*//" > etc/makefile.${ARCH}_MPI
      echo  >> etc/makefile.${ARCH}_MPI
      temp=`${echo} "CC="${ins_mpicc}`
      echo ${temp} >> etc/makefile.${ARCH}_MPI
      temp=`${echo} "FC="${ins_mpicc} | sed "s/mpicc$/mpif77/"`
      echo ${temp} >> etc/makefile.${ARCH}_MPI
      ARCH=${ARCH}_MPI
      CC=${ins_mpicc}
      FC=`${echo} ${ins_mpicc} | sed "s/mpicc$/mpif77/"`
   fi
fi



${echo} "=================================================================="
   ${echo} "Does the compiler need to know the location of these libraries or any"
   ${echo} -n "other libraries (not including: Aztec, SuperLU, ParaSails, Metis)? [yes] " | sed "s/-n//"
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      ${echo}
      ${echo} "List each library include path (e.g. /usr/local/mympi/include) on a"
      ${echo} "separate line followed by a line with just 'x'"
      ins_MPI_INC_PATH=
      read directory
      while (test `expr $directory ` != 'x')
      do
         INC_PATH=`${echo} ${INC_PATH}  -I$directory`
         ins_MPI_INC_PATH=`${echo} ${ins_MPI_INC_PATH}  -I$directory`
         read directory
      done
      ${echo}
      ${echo} "List each directory where a library is located (e.g. /usr/local/mympi/lib)"
      ${echo} "on a separate line followed by a line with just 'x'"
      read directory
      while (test `expr $directory ` != 'x')
      do
         LIBRARIES=`${echo} ${LIBRARIES} -L$directory`
         read directory
      done
      ${echo}
      ${echo} "List each library in correct order (e.g. mpich) on a separate line"
      ${echo} "followed by a line with just 'x'"
      read directory
      while (test `expr $directory ` != 'x')
      do
         LIBRARIES=`${echo} ${LIBRARIES} -l$directory`
         read directory
      done
   fi
${echo} 
${echo} "Aztec can be used to supply some smoothers and an outer Krylov"
${echo} "iteration (i.e. using ML as a preconditioner)."
${echo}
${echo} -n "Do you want to use Aztec? [yes] " | sed "s/-n//"
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess' ||
   test `expr $yes_or_no` = 's'
then
   AZTEC_INTERNAL=no 
   PACKAGES=`${echo} $PACKAGES -DAZTEC`
   ${echo} -n "Where is the Aztec include directory? [$PWD/lib/Aztec/lib] " | sed "s/-n//"
   read directory
   tdirectory=`${echo} ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/Aztec/lib
   fi
   ${echo} -n "Are you using an internal developer distribution of Aztec? [no] " | sed "s/-n//"
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess'
   then
      ${echo} -n "Where is y12m and blas? " | sed "s/-n//"
      read dir
      AZTEC_INTERNAL=yes 
      LIBRARIES=`${echo} -L${dir} -ly12m -lblas ${LIBRARIES}`
      INC_PATH=`${echo} -I${directory} ${INC_PATH}`
      ${echo} -n "Where is Aztec library? " | sed "s/-n//"
      read dir
      LIBRARIES=`${echo} ${dir}/libaztec.a ${LIBRARIES}`
   else
      INC_PATH=`${echo} -I${directory} ${INC_PATH}`
      LIBRARIES=`${echo} ${directory}/libaztec.a ${LIBRARIES}`

      ${echo}
      ${echo} -n "Do you need to build Aztec? [yes] " | sed "s/-n//"
      read yes_or_no
      yes_or_no=`${echo} ${yes_or_no}s`
      if test `expr $yes_or_no` = 'yess' ||
         test `expr $yes_or_no` = 's'
      then
         tFLAGS=-Dappend
         ttt=`grep matched .arch_env | sed "s/ /_/g"` 
         ttt=`${echo} ${ttt}s`
         if test `expr $ttt` = 's'
         then
            tFLAGS=-Dappend
         else
            tFLAGS=-Dmatched
         fi

         cd ${directory}
         if test `expr $USING_MPI` = 'no'
         then
            AZCOMM=md_wrap_scalar_c.c
         else 
            AZCOMM=md_wrap_mpi_c.c
            tFLAGS=`${echo} ${tFLAGS}  ${ins_MPI_INC_PATH}`
         fi
         BLAS=
         if test `expr $GOT_BLAS` = 'no'
         then
            BLAS="blas1.f blas2.f blas3.f"
         fi
         mb=`grep "^DEFINES" ../../../etc/flat_Makefile | grep MB_MODIF | wc | \
             sed "s/^ *//" | sed "s/ .*//"`
         if test $mb -eq 1
         then
            tFLAGS=`${echo} ${tFLAGS}  -DMB_MODIF`
         fi
         tfFLAGS=`${echo} ${tFLAGS} ${ARCH_FLAGS} | sed "s/-Dmatched//g" | sed "s/-DNoChange//g"`
         if test `expr ${GOT_LAPACK}` = 'no'
         then
            LA_SRC="blas1.f blas2.f blas3.f"
            make "CC=${CC}" "FC=${FC}" "AR=${AR}" "TIMER=md_timer_generic.c" \
                 "COMMUNICATION=${AZCOMM}" "RNLIB=${RANLIB}" \
                 "CFLAGS=${tFLAGS} -Dlint ${ARCH_FLAGS} ${PACKAGES}" "FFLAGS=${tfFLAGS}" \
		 "BLAS=${BLAS}" -f Makefile.template
         else
            make "CC=${CC}" "FC=${FC}" "AR=${AR}" "TIMER=md_timer_generic.c" \
                 "COMMUNICATION=${AZCOMM}" "RNLIB=${RANLIB}" \
                 "CFLAGS=${tFLAGS} ${ARCH_FLAGS} ${PACKAGES}" "FFLAGS=${tfFLAGS}" "LA_SRC=" "BLAS=${BLAS}" \
                 -f Makefile.template
         fi
      fi
      cd $ML_HOME
   fi
   ${echo} "=================================================================="
fi

${echo}
${echo} "SuperLU (serial or distributed) can be used as a coarsest grid "
${echo} "solver within ML."
${echo}
${echo} -n "Do you want to use Serial SuperLU? [yes] " | sed "s/-n//"
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess' ||
   test `expr $yes_or_no` = 's'
then
   PACKAGES=`${echo} $PACKAGES -DSUPERLU`
   ${echo} -n "Where is the superlu directory? [$PWD/lib/DSuperLU] " | sed "s/-n//"
   read directory
   tdirectory=`${echo} ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/DSuperLU
   fi
   SUPERLU_INC_PATH=`${echo} -I$directory/SRC`
   INC_PATH=`${echo} -I${directory}/SRC ${INC_PATH}`
   LIBRARIES=`${echo} ${directory}/superlu${ARCH}.a ${LIBRARIES}`
   ${echo}
   ${echo} -n "Do you need to build SuperLU? [yes] " | sed "s/-n//"
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      ${echo} "Here goes ..."
      cd ${directory}/SRC
      make "CC=${CC}" "ARCH=${AR}" "RANLIB=${RANLIB}" "PLAT=${ARCH}" \
           "CFLAGS=${ARCH_FLAGS}" "LOADER=${LINKER}"  double
      cd $ML_HOME
   fi
   ${echo} "=================================================================="
else
   ${echo} -n "Do you want to use Distributed SuperLU? [no] " | sed "s/-n//"
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if  test `expr $USING_MPI` = 'no' &&
      (test `expr $yes_or_no` = 'yess')
   then
      ${echo}
      ${echo} "====> Must use MPI with Distributed SuperLU ... IGNORING"
      ${echo}
      yes_or_no=no
   fi
   if test `expr $yes_or_no` = 'yess' 
   then
      PACKAGES=`${echo} $PACKAGES -DDSUPERLU`
      ${echo} -n "Where is the superlu directory? [$PWD/lib/SuperLU_DIST] " | sed "s/-n//"
      read directory
      tdirectory=`${echo} ${directory}x`
      if test `expr $tdirectory` = 'x'
      then
         directory=$PWD/lib/SuperLU_DIST
      fi
      INC_PATH=`${echo} -I${directory}/SRC ${INC_PATH}`
      LIBRARIES=`${echo} ${directory}/superlu_${ARCH}.a ${LIBRARIES}`
      ${echo}
      ${echo} -n "Do you need to build SuperLU? [yes] " | sed "s/-n//"
      read yes_or_no
      yes_or_no=`${echo} ${yes_or_no}s`
      if test `expr $yes_or_no` = 'yess' ||
         test `expr $yes_or_no` = 's'
      then
         ${echo} "Here goes ..."
         cd ${directory}/SRC
         make "CC=${CC}" "ARCH=${AR}" "RANLIB=${RANLIB}" "PLAT=${ARCH}" \
              "CFLAGS=${ARCH_FLAGS} ${ins_MPI_INC_PATH}" "LOADER=${LINKER}"  double
         cd $ML_HOME
      fi
      ${echo} "=================================================================="
   fi
fi

${echo}
${echo} "ParaSails can be  used to supply a sparse approximate inverse "
${echo} "smoother on any level."
${echo}
${echo} -n "Do you want to use ParaSails? [no] " | sed "s/-n//"
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $USING_MPI` = 'no' &&
   test `expr $yes_or_no` = 'yess' 
#   test `expr $yes_or_no` = 's')
then
   ${echo}
   ${echo} "====> Must use MPI with ParaSails ... IGNORING"
   ${echo}
   yes_or_no=no
fi
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   PACKAGES=`${echo} $PACKAGES -DPARASAILS`
   ${echo} -n "Where is the ParaSails directory? [$PWD/lib/ParaSails] " | sed "s/-n//"
   read directory
   tdirectory=`${echo} ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/ParaSails
   fi
   INC_PATH=`${echo} -I${directory} ${INC_PATH}`
   LIBRARIES=`${echo} ${directory}/libParaSails.a ${LIBRARIES}`
   ${echo}
   ${echo} -n "Do you need to build ParaSails? [yes] " | sed "s/-n//"
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      ${echo} "Here goes ..."
      cd ${directory}
      t=`${echo} ${ARCH_FLAGS} ${ins_MPI_INC_PATH} -DPARASAILS_DEBUG -DPARASAILS_CG_PRINT`
      make "CC=${CC}" "RANLIB=${RANLIB}" \
           "CFLAGS=${t}"
      cd $ML_HOME
   fi
   ${echo} "=================================================================="
fi

${echo}
${echo} "ParMetis  can be  used to create variable sized blocks for block"
${echo} "Jacobi or block Gauss-Seidel smoothers" 
${echo}
${echo} -n "Do you want to use ParMetis? [no] " | sed "s/-n//"
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   PACKAGES=`${echo} $PACKAGES -DMETIS`
   ${echo} -n "Where is the ParMetis directory? [$PWD/lib/ParMetis-2.0] " | sed "s/-n//"
   read directory
   tdirectory=`${echo} ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/ParMetis-2.0
   fi
   INC_PATH=`${echo} -I${directory}/METISLib ${INC_PATH}`
   LIBRARIES=`${echo} ${directory}/libmetis.a ${LIBRARIES}`

   ${echo}
   ${echo} -n "Do you need to build ParMetis? [yes] " | sed "s/-n//"
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      ${echo} "Here goes ..."
      cd ${directory}/METISLib
      t=`${echo} ${ARCH_FLAGS} -I. ${ins_MPI_INC_PATH}`
      make "CC=${CC}" "RANLIB=${RANLIB}" "INCDIR=${MPI_INC_DIR}" \
           "AR=${AR} rcv" "CFLAGS=${t}"
      cd $ML_HOME
   fi
   ${echo} "=================================================================="
fi


${echo}
${echo} "The  file 'makefile_${ARCH}.variables will being created with environment variables."
${echo} "This file will be sourced when trying to compile ml"

rm -f make_${ARCH}.variables
${echo} ARCH=$ARCH                    >  make_${ARCH}.variables
${echo} PACKAGES=$PACKAGES  \\          >> make_${ARCH}.variables
cd etc
#./find_undefs "${CC}" "${ARCH_FLAGS}" "${LINKER}" "$LIBRARIES" "$ARCH_LIBS"
./find_missing_lapack_functions "${CC}" "${ARCH_FLAGS}" "${LINKER}" "$LIBRARIES" "$ARCH_LIBS"
cd ..
cat etc/.thedefs >>  make_${ARCH}.variables
\rm -f etc/.thedefs
${echo} INC_PATH=$INC_PATH            >> make_${ARCH}.variables
${echo} LIBRARIES=$LIBRARIES          >> make_${ARCH}.variables

${echo}
${echo} "Now trying to make the ml library with a sample program ..."

cd Obj
make ARCH=${ARCH}
temp=`${echo} ${1}s`
if test `expr $temp` = 's'
then
   chdir_command="cd Obj"
else
   if test `expr ${1}` = 'CALLED_BY_ML_INSTALL'
   then
      chdir_command="cd ../Obj"
   else
      chdir_command="cd Obj"
   fi
fi
${echo} "=================================================================="
${echo}
${echo} "In the future you can set the ARCH environment variable and do a make in"
${echo} "the Obj subdirectory (if you don't need to rebuild other libraries)"
${echo}
${echo} "That is"
${echo}
${echo} "setenv ARCH " $ARCH
${echo} ${chdir_command}
${echo} "make"
${echo}
${echo} "or just"
${echo} ${chdir_command}
${echo} "make ARCH=${ARCH}"
cd ..
\rm -f .arch_env etc/a.out
