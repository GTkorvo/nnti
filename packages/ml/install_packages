#!/bin/sh
#
# It is intended that users invoke `installer' which will eventually
# invoke this function.
#
PWD=`pwd`
#
# See what packages are needed and take appropriate action
#
${echo}
${echo}
${echo} "At this point you need to tell us which libraries are needed"
${echo}
${echo}
${echo} -n "Does your machine have the lapack library? [no] "
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   ${echo} "Where is the Lapack library?"
   grep "LAPACK PATH" etc/makefile.${ARCH} | sed "s/.*Note/  Note/"
   ${echo} -n "  Enter NA if not needed? [/usr/local/lib] "
   read directory
   tdirectory=`${echo} ${directory}x | sed "s/ /x/g"`
   if test `expr $tdirectory` = 'x'
   then
      directory=/usr/local/lib
   fi
   ${echo} "What is the name of the Lapack library?"
   grep "LAPACK LIB" etc/makefile.${ARCH} | sed "s/.*Note/  Note/"
   ${echo} -n "  Enter NA if not needed? [lapack] "
   read library
   tlibrary=`${echo} ${library}x | sed "s/ /x/g"`
   if test `expr $tlibrary ` = 'x'
   then
      library=lapack
   fi
   PACKAGES=`${echo} $PACKAGES -DUSE_VENDOR_LAPACK`
   if test `expr $tdirectory ` != 'NAx'
   then
      LIBRARIES=`${echo} $LIBRARIES -L${directory}`
   fi
   if test `expr $tlibrary ` != 'NAx'
   then
      LIBRARIES=`${echo} $LIBRARIES -l${library}`
   fi
   GOT_LAPACK=yes
   ${echo} "=================================================================="
fi

${echo} -n "Does your machine have a blas library? [no] "
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   GOT_BLAS=yes
   PACKAGES=`${echo} $PACKAGES -DUSE_VENDOR_BLAS` 
   ${echo} "Where is the Blas library?"
   grep "BLAS PATH" etc/makefile.${ARCH} | sed "s/.*Note/  Note/"
   ${echo} "  Enter NA if not needed? [/usr/local/lib] "
   read directory
   tdirectory=`${echo} ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=/usr/local/lib
   fi
   ${echo}    "What is the name of the Blas library?"
   grep "BLAS LIB" etc/makefile.${ARCH} | sed "s/.*Note/  Note/"
   ${echo} -n "  Enter NA if not needed? [blas] "
   read library
   tlibrary=`${echo} ${library}x`
   if test `expr $tlibrary ` = 'x'
   then
      library=blas
   fi
   if test `expr $directory ` != 'NA'
   then
      LIBRARIES=`${echo} $LIBRARIES -L${directory}`
   fi
   if test `expr $library ` != 'NA'
   then
      LIBRARIES=`${echo} $LIBRARIES -l${library}`
   fi
   ${echo} "=================================================================="
fi

${echo} -n "Do you want to use MPI? [yes] "
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess' ||
   test `expr $yes_or_no` = 's'
then
   USING_MPI=yes
   PACKAGES=`${echo} $PACKAGES -DML_MPI`
#
#  Haven't finished the mpicc stuff yet so I am turning it off
#
#   ${echo} -n "Do you use mpicc? [no] "
#   read yes_or_no
   yes_or_no=no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' 
   then 
      cdirectory= 
      fdirectory= 
      ${echo} "Is mpicc in your path? [yes] "
      read yes_or_no
      yes_or_no=`${echo} ${yes_or_no}s`
      if test `expr $yes_or_no` = 'nos' 
      then
         ${echo} -n "Where is mpicc? [/usr/local/mpich] "
         read cdirectory
         cdirectory=`${echo} ${cdirectory}/`
         if test `expr $cdirectory` = '/'
         then
            cdirectory=/usr/local/mpich/
         fi
         ${echo} -n "Where is mpif77? [/usr/local/mpich] "
         read fdirectory
         fdirectory=`${echo} ${fdirectory}/`
         if test `expr $fdirectory` = '/'
         then
            fdirectory=/usr/local/mpich/
         fi
      fi
      \rm -f .t1
      cat .arch_env | sed "s/^CC.*/CC=\${cdirectory}mpicc/" > .t1
      \rm -f .arch_env
      cat .t1       | sed "s/^FC.*/FC=${fdirectory}mpif77/" > .arch_env
      \rm -f .t1
   fi
   ${echo} -n "Does compiler need to know location of MPI include files? [yes] "
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      ${echo}
      ${echo} "List each include directory on a line followed by a line with just 'x'"
      read directory
      MPI_INC_PATH=
      while (test `expr $directory ` != 'x')
      do
         INC_PATH=`${echo} ${INC_PATH}  -I$directory`
         MPI_INC_PATH=`${echo} ${MPI_INC_PATH}  -I$directory`
         read directory
      done
   fi
   ${echo} -n "Does compiler need to know location of MPI library? [yes] "
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      ${echo} 
      ${echo} "Enter directory containing library"
      read directory
      LIBRARIES=`${echo} ${LIBRARIES} -L$directory`
      ${echo}
      ${echo} "Enter library name (e.g. mpich), type <enter> if no library needs to be given"
      read directory
      tdirect=`${echo} ${directory}s`
      if test `expr $tdirect` != 's'
      then
      LIBRARIES=`${echo} ${LIBRARIES} -l$directory`
      fi
   else
      ${echo} "Enter any compiler flag needed for mpi (e.g. -lmpi)."
      read directory
      LIBRARIES=`${echo} ${LIBRARIES} $directory`
   fi
   ${echo} -n "Does the compiler need to know the location of any other libraries? [no] "
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess'
   then
      ${echo}
      ${echo} "List each library path on a line followed by a line with just 'x'"
      read directory
      while (test `expr $directory ` != 'x')
      do
         LIBRARIES=`${echo} ${LIBRARIES} -L$directory`
         read directory
      done
      ${echo}
      ${echo} "List each library on a line followed by a line with just 'x'"
      read directory
      while (test `expr $directory ` != 'x')
      do
         LIBRARIES=`${echo} ${LIBRARIES} -l$directory`
         read directory
      done
   fi
   ${echo} "=================================================================="
fi 
${echo} 
${echo} "Aztec can be used to supply some smoothers and an outer Krylov"
${echo} "iteration (i.e. using ML as a preconditioner)."
${echo}
${echo} -n "Do you want to use Aztec? [yes] "
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess' ||
   test `expr $yes_or_no` = 's'
then
   AZTEC_INTERNAL=no 
   PACKAGES=`${echo} $PACKAGES -DAZTEC`
   ${echo} -n "Where is the Aztec include directory? [$PWD/lib/Aztec/lib] "
   read directory
   tdirectory=`${echo} ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/Aztec/lib
   fi
   ${echo} -n "Are you using an internal developer distribution of Aztec? [no] "
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess'
   then
      ${echo} -n "Where is y12m and blas? "
      read dir
      AZTEC_INTERNAL=yes 
      LIBRARIES=`${echo} -L${dir} -ly12m -lblas ${LIBRARIES}`
      INC_PATH=`${echo} -I${directory} ${INC_PATH}`
      ${echo} -n "Where is Aztec library? "
      read dir
      LIBRARIES=`${echo} ${dir}/libaztec.a ${LIBRARIES}`
   else
      INC_PATH=`${echo} -I${directory} ${INC_PATH}`
      LIBRARIES=`${echo} ${directory}/libaztec.a ${LIBRARIES}`

      ${echo}
      ${echo} -n "Do you need to build Aztec? [yes] "
      read yes_or_no
      yes_or_no=`${echo} ${yes_or_no}s`
      if test `expr $yes_or_no` = 'yess' ||
         test `expr $yes_or_no` = 's'
      then
         tFLAGS=-Dappend
         ttt=`grep matched .arch_env | sed "s/ /_/g"` 
         ttt=`${echo} ${ttt}s`
         if test `expr $ttt` = 's'
         then
            tFLAGS=-Dappend
         else
            tFLAGS=-Dmatched
         fi

         cd ${directory}
         if test `expr $USING_MPI` = 'no'
         then
            AZCOMM=md_wrap_scalar_c.c
         else 
            AZCOMM=md_wrap_mpi_c.c
            tFLAGS=`${echo} ${tFLAGS}  ${MPI_INC_PATH}`
         fi
         BLAS=
         if test `expr $GOT_BLAS` = 'no'
         then
            BLAS="blas1.f blas2.f blas3.f"
         fi
         mb=`grep "^DEFINES" ../../../etc/flat_Makefile | grep MB_MODIF | wc | \
             sed "s/^ *//" | sed "s/ .*//"`
         if test $mb -eq 1
         then
            tFLAGS=`${echo} ${tFLAGS}  -DMB_MODIF`
         fi
         if test `expr ${GOT_LAPACK}` = 'no'
         then
            LA_SRC="blas1.f blas2.f blas3.f"
            make "CC=${CC}" "FC=${FC}" "AR=${AR}" "TIMER=md_timer_generic.c" \
                 "COMMUNICATION=${AZCOMM}" "RNLIB=${RANLIB}" \
                 "CFLAGS=${tFLAGS} -Dlint ${ARCH_FLAGS} ${PACKAGES}" "FFLAGS=${tFLAGS} ${ARCH_FLAGS}" \
		 "BLAS=${BLAS}" -f Makefile.template
         else
            make "CC=${CC}" "FC=${FC}" "AR=${AR}" "TIMER=md_timer_generic.c" \
                 "COMMUNICATION=${AZCOMM}" "RNLIB=${RANLIB}" \
                 "CFLAGS=${tFLAGS} ${ARCH_FLAGS} ${PACKAGES}" "LA_SRC=" "BLAS=${BLAS}" \
                 -f Makefile.template
         fi
      fi
      cd $ML_HOME
   fi
   ${echo} "=================================================================="
fi

${echo}
${echo} "SuperLU (serial or distributed) can be used as a coarsest grid "
${echo} "solver within ML."
${echo}
${echo} -n "Do you want to use Serial SuperLU? [yes] "
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess' ||
   test `expr $yes_or_no` = 's'
then
   PACKAGES=`${echo} $PACKAGES -DSUPERLU`
   ${echo} -n "Where is the superlu directory? [$PWD/lib/DSuperLU] "
   read directory
   tdirectory=`${echo} ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/DSuperLU
   fi
   SUPERLU_INC_PATH=`${echo} -I$directory/SRC`
   INC_PATH=`${echo} -I${directory}/SRC ${INC_PATH}`
   LIBRARIES=`${echo} ${directory}/superlu${ARCH}.a ${LIBRARIES}`
   ${echo}
   ${echo} -n "Do you need to build SuperLU? [yes] "
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      ${echo} "Here goes ..."
      cd ${directory}/SRC
      make "CC=${CC}" "ARCH=${AR}" "RANLIB=${RANLIB}" "PLAT=${ARCH}" \
           "CFLAGS=${ARCH_FLAGS}" "LOADER=${LINKER}"  double
      cd $ML_HOME
   fi
   ${echo} "=================================================================="
else
   ${echo} -n "Do you want to use Distributed SuperLU? [yes] "
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if  test `expr $USING_MPI` = 'no' &&
      (test `expr $yes_or_no` = 'yess' ||
       test `expr $yes_or_no` = 's')
   then
      ${echo}
      ${echo} "====> Must use MPI with Distributed SuperLU ... IGNORING"
      ${echo}
      yes_or_no=no
   fi
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      PACKAGES=`${echo} $PACKAGES -DDSUPERLU`
      ${echo} -n "Where is the superlu directory? [$PWD/lib/SuperLU_DIST] "
      read directory
      tdirectory=`${echo} ${directory}x`
      if test `expr $tdirectory` = 'x'
      then
         directory=$PWD/lib/SuperLU_DIST
      fi
      INC_PATH=`${echo} -I${directory}/SRC ${INC_PATH}`
      LIBRARIES=`${echo} ${directory}/superlu_${ARCH}.a ${LIBRARIES}`
      ${echo}
      ${echo} -n "Do you need to build SuperLU? [yes] "
      read yes_or_no
      yes_or_no=`${echo} ${yes_or_no}s`
      if test `expr $yes_or_no` = 'yess' ||
         test `expr $yes_or_no` = 's'
      then
         ${echo} "Here goes ..."
         cd ${directory}/SRC
         make "CC=${CC}" "ARCH=${AR}" "RANLIB=${RANLIB}" "PLAT=${ARCH}" \
              "CFLAGS=${ARCH_FLAGS} ${MPI_INC_PATH}" "LOADER=${LINKER}"  double
         cd $ML_HOME
      fi
      ${echo} "=================================================================="
   fi
fi

${echo}
${echo} "ParaSails can be  used to supply a sparse approximate inverse "
${echo} "smoother on any level."
${echo}
${echo} -n "Do you want to use ParaSails? [no] "
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $USING_MPI` = 'no' &&
   test `expr $yes_or_no` = 'yess' 
#   test `expr $yes_or_no` = 's')
then
   ${echo}
   ${echo} "====> Must use MPI with ParaSails ... IGNORING"
   ${echo}
   yes_or_no=no
fi
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   PACKAGES=`${echo} $PACKAGES -DPARASAILS`
   ${echo} -n "Where is the ParaSails directory? [$PWD/lib/ParaSails] "
   read directory
   tdirectory=`${echo} ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/ParaSails
   fi
   INC_PATH=`${echo} -I${directory} ${INC_PATH}`
   LIBRARIES=`${echo} ${directory}/libParaSails.a ${LIBRARIES}`
   ${echo}
   ${echo} -n "Do you need to build ParaSails? [yes] "
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      ${echo} "Here goes ..."
      cd ${directory}
      t=`${echo} ${ARCH_FLAGS} ${MPI_INC_PATH} -DPARASAILS_DEBUG -DPARASAILS_CG_PRINT`
      make "CC=${CC}" "RANLIB=${RANLIB}" \
           "CFLAGS=${t}"
      cd $ML_HOME
   fi
   ${echo} "=================================================================="
fi

${echo}
${echo} "ParMetis  can be  used to create variable sized blocks for block"
${echo} "Jacobi or block Gauss-Seidel smoothers" 
${echo}
${echo} -n "Do you want to use ParMetis? [no] "
read yes_or_no
yes_or_no=`${echo} ${yes_or_no}s`
if test `expr $yes_or_no` = 'yess'
#   test `expr $yes_or_no` = 's'
then
   PACKAGES=`${echo} $PACKAGES -DMETIS`
   ${echo} -n "Where is the ParMetis directory? [$PWD/lib/ParMetis-2.0] "
   read directory
   tdirectory=`${echo} ${directory}x`
   if test `expr $tdirectory` = 'x'
   then
      directory=$PWD/lib/ParMetis-2.0
   fi
   INC_PATH=`${echo} -I${directory}/METISLib ${INC_PATH}`
   LIBRARIES=`${echo} ${directory}/libmetis.a ${LIBRARIES}`

   ${echo}
   ${echo} -n "Do you need to build ParMetis? [yes] "
   read yes_or_no
   yes_or_no=`${echo} ${yes_or_no}s`
   if test `expr $yes_or_no` = 'yess' ||
      test `expr $yes_or_no` = 's'
   then
      ${echo} "Here goes ..."
      cd ${directory}/METISLib
      t=`${echo} ${ARCH_FLAGS} -I. ${MPI_INC_PATH}`
      make "CC=${CC}" "RANLIB=${RANLIB}" "INCDIR=${MPI_INC_DIR}" \
           "AR=${AR} rcv" "CFLAGS=${t}"
      cd $ML_HOME
   fi
   ${echo} "=================================================================="
fi



${echo} "The  file 'makefile_${ARCH}.variables will being created with environment variables."
${echo} "This file will be sourced when trying to compile ml"

rm -f make_${ARCH}.variables
${echo} ARCH=$ARCH                    >  make_${ARCH}.variables
${echo} PACKAGES=$PACKAGES  \\          >> make_${ARCH}.variables
cd etc
#./find_undefs "${CC}" "${ARCH_FLAGS}" "${LINKER}" "$LIBRARIES" "$ARCH_LIBS"
./find_missing_lapack_functions "${CC}" "${ARCH_FLAGS}" "${LINKER}" "$LIBRARIES" "$ARCH_LIBS"
cd ..
cat etc/.thedefs >>  make_${ARCH}.variables
\rm -f etc/.thedefs
${echo} INC_PATH=$INC_PATH            >> make_${ARCH}.variables
${echo} LIBRARIES=$LIBRARIES          >> make_${ARCH}.variables

${echo}
${echo} "Now trying to make the ml library with a sample program ..."
sleep 2

cd Obj
make ARCH=${ARCH}
${echo} "=================================================================="
${echo}
${echo} "In the future you can set the ARCH environment variable and do a make in"
${echo} "the Obj subdirectory (if you don't need to rebuild other libraries)"
${echo}
${echo} "That is"
${echo}
${echo} "setenv ARCH " $ARCH
${echo} "cd Obj"
${echo} "make"
${echo}
${echo} "or just"
${echo} "cd Obj"
${echo} "make ARCH=${ARCH}"
cd ..
\rm -f .arch_env
