		SuperLU_DIST (version 1.0)
		==========================

SuperLU_DIST contains a set of subroutines to solve a sparse linear system 
A*X=B. It uses Gaussian elimination with static pivoting (GESP). 
Static pivoting is a technique that combines the numerical stability of
partial pivoting with the scalability of Cholesky (no pivoting),
to run accurately and efficiently on large numbers of processors. 

SuperLU_DIST is a parallel extension to the serial SuperLU library.
It is targeted for the distributed memory parallel machines.
SuperLU_DIST is implemented in ANSI C, and MPI for communications.
Currently, the LU factorization and triangular solution routines,
which are the most time-consuming part of the solution process,
are parallelized. The other routines, such as static pivoting and 
column preordering for sparsity are performed sequentially. 
This "alpha" release contains double-precision real and double-precision
complex data types.

The distribution contains the following directory structure:

  SuperLU_DIST/README    instructions on installation
  SuperLU_DIST/CBLAS/    needed BLAS routines in C, not necessarily fast
  SuperLU_DIST/DOC/  	 the Users' Guide
  SuperLU_DIST/EXAMPLE/  example programs
  SuperLU_DIST/INSTALL/  test machine dependent parameters
  SuperLU_DIST/SRC/      C source code, to be compiled into a library
  SuperLU_DIST/Makefile  top level Makefile that does installation and testing
  SuperLU_DIST/make.inc  compiler, compile flags, library definitions and C
                         preprocessor definitions, included in all Makefiles.
                         (You may need to edit it to be suitable for your
			  system before compiling the whole package.)

Before installing the package, please examine the three things dependent 
on your system setup:

1. Edit the make.inc include file.
   This make include file is referenced inside each of the Makefiles
   in the various subdirectories. As a result, there is no need to 
   edit the Makefiles in the subdirectories. All information that is
   machine specific has been defined in this include file. 

   The following machine-specific SuperLU_DIST/make.inc files are
   provided in the top-level directory:

	make.inc	Platforms
        --------        ---------
        make.t3e        SGI/Cray T3E
        make.sp2        IBM SP2

   When you have selected the machine to which you wish to install
   SuperLU_DIST, copy the appropriate sample include file (if one is present)
   into make.inc. For example, if you wish to run SuperLU_DIST on a
   Cray T3E,  you can do

        cp make.t3e make.inc
   
   For the systems other than listed above, some porting effort is needed
   for parallel factorization routines. Please refer to the Users' Guide 
   for detailed instructions on porting.
   
2. The BLAS library.
   The parallel routines in SuperLU_DIST uses some sequential BLAS routines
   on each process. If there is BLAS library available on your machine,
   you may define the following in the file make.inc:
        BLASDEF = -DUSE_VENDOR_BLAS
        BLASLIB = <BLAS library you wish to link with>

   The CBLAS/ subdirectory contains the part of the C BLAS needed by 
   SuperLU_DIST package. However, these codes are intended for use only if
   there is no faster implementation of the BLAS already available on your
   machine. In this case, you should go to the top-level SuperLU_DIST/
   directory and do the following:

    1) In make.inc, undefine (comment out) BLASDEF, and define:
          BLASLIB = ../blas$(PLAT).a

    2) Type:
          make blaslib
       to make the BLAS library from the routines in the CBLAS/ subdirectory.

3. C preprocessor definition CDEFS.
   In the header file SRC/Cnames.h, we use macros to determine how
   C routines should be named so that they are callable by Fortran.
   (Some vendor-supplied BLAS libraries do not have C interfaces. So the 
    re-naming is needed in order for the SuperLU BLAS calls (in C) to 
    interface with the Fortran-style BLAS.)
   The possible options for CDEFS are:

       o -DAdd_: Fortran expects a C routine to have an underscore
		 postfixed to the name;
       o -DNoChange: Fortran expects a C routine name to be identical to
		     that compiled by C;
       o -DUpCase: Fortran expects a C routine name to be all uppercase.
   
A Makefile is provided in each subdirectory. The installation can be done
completely automatically by simply typing "make" at the top level.


REFERENCES

[1] Making Sparse Gaussian Elimination Scalable By Static Pivoting.
    Xiaoye S. Li and James W. Demmel,
    The Proceedings of SC98, November 7-13, 1998, Orlando, Florida.

[2] http://www.nersc.gov/~xiaoye/SuperLU


Xiaoye S. Li,    NERSC, Lawrence Berkeley National Lab, xiaoye@nersc.gov
James Demmel,    Univ. of California Berkeley, demmel@cs.berkeley.edu

