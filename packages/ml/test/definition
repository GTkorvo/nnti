#
# FRAMEWORK group
#

(FRAMEWORK, MLExamples) {
    DIRS = ../examples/BasicExamples,
	  #../examples/Advanced,
          #../examples/Elasticity,
          # ../examples/MatrixFormats,
	  #../examples/MatrixReading,
	   ../examples/Maxwell,
	   ../examples/MultipleRHS,
	  #../examples/Other,
	  # ../examples/StandAlone,
	   ../examples/TwoLevelDD,
          #../examples/Visualization,
	   ../examples/MLAPI;
    COMM = SERIAL, MPI;
}

(FRAMEWORK, MLTests) {
    DIRS = AztecSimple,
           Communicator,
           IFPACKSmoothers,
           ML_Operator2Epetra_RowMatrix,
           MultiLevelPreconditioner_Maxwell,
           MultiLevelPreconditioner_NonSym,
           MultiLevelPreconditioner_Sym,
           Scalability,
           SelfSmoother,
           VerySimple,
           Zoltan;
    COMM = SERIAL, MPI;
}

# These tests should only be run on 1, 4, 9, 16, or 25 processors.
(FRAMEWORK, MLTests) {
     DIRS = MultiLevelPreconditioner_Aux,
            MLAPICompare;
     COMM = SERIAL, MPI(4 9 16 25);
}

#
# 2d_Poisson group
# Notice that this also runs in the nightly FRAMEWORK tests
#

(FRAMEWORK,2d_Poisson) {
    DIRS = 2d_Poisson;
    COMM = SERIAL;
    # use the compareTestOutput script
    EXIT-STATUS  = compareTestOutput;
    # this line specified what parts of the test result should be
    # compared to the gold copy
    COMMAND-FILE = 2dPoissonEvaluateDefinitions;
    # this line specifies that the result of using ml_inputfileX should
    # be compared to the gold copy in baselineX.
    ARG-MASTER-PAIRS  = ml_inputfile1:baseline1, ml_inputfile2:baseline2,
                        ml_inputfile3:baseline3, ml_inputfile5:baseline5,
                        ml_inputfile6:baseline6;
}

#
# 2d_Poisson_parallel group
# Notice that this also runs in the nightly FRAMEWORK tests
#

(FRAMEWORK,2d_Poisson_parallel) {
    DIRS = 2d_Poisson;
    COMM = MPI(4);
    # use the compareTestOutput script
    EXIT-STATUS  = compareTestOutput;
    # this line specified what parts of the test result should be
    # compared to the gold copy
    COMMAND-FILE = 2dPoissonEvaluateDefinitions;
    # this line specifies that the result of using ml_inputfileX should
    # be compared to the gold copy in baselineX.
    ARG-MASTER-PAIRS  = ml_inputfile7:baseline7;
}

#
# 3d_Poisson group
# Notice that this also runs in the nightly FRAMEWORK tests
#

(FRAMEWORK,3d_Poisson) {
    DIRS = 3d_Poisson;
    COMM = SERIAL;
    # use the compareTestOutput script
    EXIT-STATUS  = compareTestOutput;
    # this line specified what parts of the test result should be
    # compared to the gold copy
    COMMAND-FILE = 3dPoissonEvaluateDefinitions;
    # this line specifies that the result of using ml_inputfileX should
    # be compared to the gold copy in baselineX.
    ARG-MASTER-PAIRS  = ml_inputfile1:baseline1, ml_inputfile2:baseline2,
                        ml_inputfile3:baseline3, ml_inputfile5:baseline5,
                        ml_inputfile6:baseline6;
}

#
# 3d_Poisson_parallel group
# Notice that this also runs in the nightly FRAMEWORK tests
#

(FRAMEWORK,3d_Poisson_parallel) {
    DIRS = 3d_Poisson;
    COMM = MPI(4);
    # use the compareTestOutput script
    EXIT-STATUS  = compareTestOutput;
    # this line specified what parts of the test result should be
    # compared to the gold copy
    COMMAND-FILE = 3dPoissonEvaluateDefinitions;
    # this line specifies that the result of using ml_inputfileX should
    # be compared to the gold copy in baselineX.
    ARG-MASTER-PAIRS  = ml_inputfile7:baseline7;
}

(FRAMEWORK, INSTALL, MLPyExamples) {
    DIRS = ../python/example;
    COMM = SERIAL, MPI(1-4);
}

(FRAMEWORK, INSTALL, MLPyTests) {
    DIRS = ../python/test;
    COMM = SERIAL, MPI(1-4);
}
