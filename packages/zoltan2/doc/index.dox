/*! \mainpage Trilinos/Zoltan2: Load Balancing and Combinatorial Scientific Computing.

\section mainpage_contents Contents
<ul>
<li> \ref z2_main_intro
<li> \ref z2_main_building
<li> \ref z2_main_overview
</ul>


<hr>

Information specifically for developers can be found at \ref z2_developer.

<hr>

\section z2_main_intro Introduction to Zoltan2

Zoltan2 is a package for partitioning, load balancing and 
combinatorial scientific computing. It can be viewed as
a complete redesign/refactoring of the well known
<a href=http://www.cs.sandia.gov/Zoltan > Zoltan </a>
library into C++ in order to support template programming,
to scale to larger problems, and to support architecture aware partitioning.
This library is currently under active development.
The capabilities in Zoltan2 roughly fall within the following areas (click on the link for a full description
of an area and how Zoltan2 can be used in this context):
<ul>
<li> \ref partitionPage 
<li> \ref orderingPage
<li> \ref coloringPage  
</ul>


<hr>

\section z2_main_building Building and Installing Zoltan2

Zoltan2 is part of the Trilinos framework and uses the Trilinos CMake build system for
configuration and builiding.  In order to build Zoltan2, you need to use the Trilinos_ENABLE_Zoltan2
cmake directive.  The most basic way to build Zoltan2 is to execute the following two commands in
your build directory (typically distinct from the source directory):

<ol>
<li>	cmake -D Trilinos_ENABLE_Zoltan2:BOOL=ON /path/to/Trilinos/src/directory
<li>    make
</ol>

The first statement is the cmake configuration step that configures the build, creates Makefiles, etc.
The second statement builds the Zoltan2 library and all required libraries.
Zoltan2 requires several of the other Trilinos packages to be built. 
(Tpetra, KokkosClassic, Epetra, Teuchos, Xpetra and the packages that are required for those). The
Trilinos framework should automatically enable these required packages during the configuration process
if Zoltan2 is enabled.






Zoltan2 configuration refers to these CMake directives:

  \li \c Trilinos_ENABLE_OpenMP if enabled, use OpenMP for multithreaded execution. (Note not all of Zoltan2 is thread-safe.)
  \li \c Trilinos_ENABLE_Zoltan if enabled Zoltan2 will build a test that compares the performance of Zoltan1 and Zoltan2
  \li \c Zoltan2_ENABLE_Experimental if enabled, code which is still under development will be available for use
  \li \c Explicit Instantiation if explicit instantiation is on, all Zoltan2 tests will be compiled with the instantiated types
  \li \c Zoltan2_ENABLE_Scotch for graph partitioning using the Scotch package
  \li \c Zoltan2_ENABLE_OVIS
  \li \c Zoltan2_ENABLE_AMD

These are some of the compilation flags used by Zoltan2:

  \li \c Z2_OMIT_ALL_STATUS_MESSAGES The \ref debug_level parameter controls the verbosity of status messages.  When compiled with this option, the checks for \ref debug_level are bypassed and all status output code is ignored.
  \li \c Z2_OMIT_ALL_PROFILING Checks are done at runtime to determine whether any of the memory or timer parameters were set, prior to checking memory in use or to start or stop a ttimer.  When compiled with this option, those checks are bypassed.
  \li \c Z2_OMIT_ALL_ERROR_CHECKING  The \ref error_check_level parameter controls the amount of error checking done at runtime.  When this flag is set, all error checking code is compiled out.


<hr>


\section z2_main_build2 Building Projects with Zoltan


<hr>

\section z2_main_overview Overview of the library usage

\subsection z2_main_overview_partitioning Basic partitioning

Here we describe the typical user interaction with Zoltan2.  We use partitioning as an example.

1. Create a Zoltan2::InputAdapter object for your data.  This adapter provides a uniform interface to user data for the Zoltan2 library.  Adapter interfaces exist for the following classes of data:

<ul>
<li> Zoltan2::MatrixInput (a row oriented matrix with optional row weights)
<li> Zoltan2::GraphInput (an undirected weighted graph)
<li> Zoltan2::VectorInput (a single or multi-vector with optional weights, also used for geometric coordinates)
<li> Zoltan2::IdentifierInput (simple collection of identifiers)
</ul>

Zoltan2::MeshInput will be available soon.

2. Create a Teuchos::ParameterList with your Zoltan2 parameters.  If you are using a third party library (PT-Scotch, ParMetis) you can include a sublist of parameters for this library.  See \ref z2_parameters for a detailed list of parameterse.

3. Create a Zoltan2::PartitioningProblem.  It is templated on your Zoltan2::InputAdapter type.  The constructor arguments are typically your input adapter and your parameter list.

4. Call Zoltan2::PartitioningProblem::solve().

5. Obtain a Zoltan2::PartitioningSolution object from the Zoltan2::PartitioningProblem.




*/
