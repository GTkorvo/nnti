/*! \mainpage Isorropia: Partitioning and Rebalancing package
\htmlonly
\endhtmlonly

\section isorropia_intro Introduction

Isorropia is a repartitioning/rebalancing package, intended to assist
with redistributing objects such as matrices and matrix-graphs in a
parallel execution setting, to allow for more efficient computations.
To enable Isorropia in your Trilinos build, provide the argument
'--enable-isorropia' to configure.

Isorropia is primarily an interface to the Zoltan library, but can be
built and used with minimal capability without Zoltan. To enable Isorropia's
Zoltan support, you need to add '--enable-isorropia-zoltan' and
'--enable-epetraext' to your Trilinos configure command, and provide
include-paths and library specifications
for Zoltan version 2.0 (provide these to configure using the
'--with-incdirs' and '--with-libs' configure arguments).

\section isorropia_startup Overview of Isorropia.

Isorropia's user interface consists primarily of the Isorropia::Partitioner,
Isorropia::Redistributor and Isorropia::CostDescriber classes, as well as the
Isorropia::create_balanced_copy functions.

The Isorropia::create_balanced_copy functions are free-standing functions
(not class members) which simply take an input object (Epetra_CrsGraph,
Epetra_CrsMatrix, etc.) and return a copy which is balanced across
partitions.

For more sophisticated use-cases, such as performing one partitioning
and then using it to redistribute multiple objects, it is more
efficient to use the Isorropia::Partitioner and Isorropia::Redistributor
classes. The general usage model is to:<br>
<ol>
<li> create a Isorropia::Partitioner instance (providing as input the
 matrix-graph or row-matrix object that is to be re-partitioned, and
 optionally a Isorropia::CostDescriber instance with weights/costs to
 influence the partitioning).
<li> create a Isorropia::Redistributor object (providing as input a
Isorropia::Partitioner instance)
<li> Use the Isorropia::Redistributor to redistribute one or more objects
 to the new partitioning.
</ol>

Isorropia is currently aimed primarily at repartitioning/redistributing
Epetra objects, including Epetra_CrsGraph, Epetra_RowMatrix (which includes
Epetra_CrsMatrix and Epetra_VbrMatrix) and Epetra_MultiVector.

\section zoltanparams Passing parameters through to Zoltan

Some Isorropia classes accept a Teuchos::ParameterList object. To
specify that Zoltan be used to perform the partitioning, create a
sublist with name "Zoltan" in the parameter-list object. Then, any
parameters that should be passed to Zoltan itself, can be stored in
the sublist exactly as they appear in the Zoltan users guide. Example:
\verbatim
  Teuchos::ParameterList params;
  Teuchos::ParameterList& sublist = params.sublist("Zoltan");
  sublist.set("LB_METHOD", "GRAPH");
  sublist.set("PARMETIS_METHOD", "PARTKWAY");
\endverbatim
Refer to the Zoltan users guide (available at
<a href=http://www.cs.sandia.gov/zoltan>www.cs.sandia.gov/zoltan</a>)
for available Zoltan parameters.

\section isorropia_example Example Codes

A couple of example programs which demonstrate using Isorropia are
provided in the 'packages/isorropia/example' subdirectory.

The program shown below is packages/isorropia/example/part_redist.cpp, which
demonstrates a simple repartitioning operation which does not use
user-specified weights/costs. Other programs in the example subdirectory
demonstrate the use of weights/costs data to influence the partitioner. See
vert_weights.cpp, graph_edge_weights.cpp and hgedge_weights.cpp.

\verbinclude ../example/part_redist.cpp

*/
