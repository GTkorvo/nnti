#
#  This file specifies memory errors which we want valgrind to ignore when running 
#  TestOptions.
#
#
#  The errors suppressed in this file can be grouped as follows:
#    1)  Two memory leaks in DSCPACK
#    2)  Eight errors in write, mwrite and writev
#    3)  An overlap error in lam_memcpy
#    4)  A memory leak in AmesosClasses
#    5)  A memory leak in fopen
#
#  The memory leak in AmesosClasses is, I claim, bogus.  Valgrind objects to the following construct:
#     
# 

#    1)  Two memory leaks in DSCPACK
{
   <Leak in DSCPACK::DSC_Analayze>
   Memcheck:Leak
   fun:malloc
   fun:DSC_Analyze
   fun:main
   fun:__libc_start_main
}
{
   <Leak in DSCPACK::order_and_make_tree2>
   Memcheck:Leak
   fun:malloc
   fun:order_and_make_tree2
   fun:DSC_Order
   fun:main
}

 {
   <Leak in DSC_Begin in DSCPACK>
   Memcheck:Leak
   fun:malloc
   fun:DSC_Begin
   fun:_ZN14Amesos_DscpackC1ERK20Epetra_LinearProblem
   fun:_ZN6Amesos6CreateESsRK20Epetra_LinearProblem
}

#    2)  Eight errors in write, mwrite and writev
{
   <mwrite #1>
   Memcheck:Param
   write(buf)
   fun:__GI___libc_write
   fun:mwrite
   fun:_cio_kreqfront
   fun:_cio_kreq
}
{
   <mwrite #2>
   Memcheck:Param
   writev(vector[...])
   fun:vgAllRoadsLeadToRome_writev
   fun:__writev
   fun:mwritev
   fun:_cio_send
}
{
   <mwrite #3>
   Memcheck:Param
   write(buf)
   fun:__GI___libc_write
   fun:mwrite
   fun:_cio_kreqfront
   fun:_cipc_ksrfront
}
{
   <mwrite #4>
   Memcheck:Param
   writev(vector)
   fun:vgAllRoadsLeadToRome_writev
   fun:__writev
   fun:mwritev
   fun:_cio_send
}
{
   <mwrite #5>
   Memcheck:Param
   write(buf)
   fun:__GI___libc_write
   fun:mwrite
   fun:_cio_kreqfront
   fun:kdetach
}
 {
   <another AllRoadsLeadToRome unitialized value>
   Memcheck:Param
   readv(vector)
   fun:vgAllRoadsLeadToRome_readv
   fun:__readv
   fun:mreadv
   fun:_cio_recv
}
{
   <mwrite A#1>
   Memcheck:Param
   write(buf)
   fun:__GI___libc_write
   fun:mwrite
   fun:_cio_kreq
   fun:kattach
}
{
   <mwrite uninitialized>
   Memcheck:Param
   write(buf)
   fun:__GI___libc_write
   fun:mwrite
   fun:_cio_kreq
   fun:_cipc_ksend
}
{
   <mwrite uninitialized 2>
   Memcheck:Param
   write(buf)
   fun:__GI___libc_write
   fun:new_do_write
   fun:_IO_do_write@@GLIBC_2.1
   fun:_IO_file_sync@@GLIBC_2.1
}

#    3)  An overlap error in lam_memcpy
{
   <Overlap in lam_memcopy>
   Memcheck:Overlap
   fun:memcpy
   fun:lam_memcpy
   fun:lam_dtsndrcv
   fun:lam_ssi_coll_lam_basic_gather
}
#  I wonder if this might be the same error in a different lam (this one on my Fedora box)
#  this one happens on mpirun -np 4 TestOptions.exe but not on mpirun -np 2 TestOptions.exe
 {
   <another overlap in lam_memcpy>
   Memcheck:Overlap
   fun:memcpy
   fun:lam_arr_remove
   fun:lam_ssi_rpi_tcp_finalize
   fun:MPI_Finalize
}


#    4)  A memory leak in AmesosClasses
{
   <vector string AmesosClasses memory leak>
   Memcheck:Leak
   fun:__builtin_new
   fun:_Znwj
   fun:_ZNSt24__default_alloc_templateILb1ELi0EE14_S_chunk_allocEjRi
   fun:_ZNSt24__default_alloc_templateILb1ELi0EE9_S_refillEj
}
#    5)  A memory leak in fopen
{
   <insert a suppression name here>
   Memcheck:Leak
   fun:malloc
   fun:__fopen_internal
   fun:_IO_fopen@@GLIBC_2.1
   fun:_Z27Trilinos_Util_ReadHb2EpetraPcRK11Epetra_CommRP10Epetra_MapRP16Epetra_CrsMatrixRP13Epetra_VectorSB_SB_
}


{
   <memory leak in SuperLU>
   Memcheck:Leak
   fun:malloc
   fun:MPI_Type_contiguous
   fun:superlu_gridmap
   fun:superlu_gridinit
}
{
   <memory leak in Superludist>
   Memcheck:Leak
   fun:malloc
   fun:superlu_malloc_dist
   fun:pxgstrs_init
   fun:dSolveInit
}

 {
   <another memory leak in Superludist>
   Memcheck:Leak
   fun:malloc
   fun:superlu_malloc_dist
   fun:intMalloc_dist
   fun:pdgssvx
}


#
#  These showed up when running amesos/test/Test_Detailed on ken's Fedora linux box
#
{
   <sendmsg unitialized value>
   Memcheck:Param
   socketcall.sendmsg(msg)
   fun:__libc_sendmsg
   fun:sfh_send_fd
   fun:lam_lfopenfd
   fun:set_stdio
}
{
   <second sendmsg unitialized value>
   Memcheck:Param
   socketcall.sendmsg(msg)
   fun:__libc_sendmsg
   fun:sfh_send_fd
   fun:send_stdio_fds
   fun:rpcreatev
}


#  These showed up running Amesos_Klu on Ken Stanley's linux box running Fedora 
 {
   <unitialized or unaddressable bytes in lam or libc>
   Memcheck:Param
   write(buf)
   fun:__GI___libc_write
   fun:swrite
   fun:tcp_req_send_ack_long
   fun:lam_ssi_rpi_tcp_adv1
}
{
   <try-catch in EpetraCrsMatrix::CheckSizes >
   Memcheck:Leak	
   fun:malloc
   fun:__cxa_get_globals 
}

#


#
#  Neededby TestOptions:
{
   <Leak in Epetra_MpiComm>
   Memcheck:Leak 
   fun:__builtin_new
   fun:_Znwj
   fun:_ZNK14Epetra_MpiComm5CloneEv
   fun:_ZTv0_n12_NK14Epetra_MpiComm5CloneEv
}
#  These appear not to be needed anymore, at least not in TestOptions
#
#
#{
#   <Leak in MPID>
#   Memcheck:Leak
#   fun:malloc
#   fun:MPID_SBinit
#   fun:MPID_InitQueue
#   fun:MPID_Init
#}
#{
#   <Leak in Trilinos_Util_ReadMatrixMaket2Epetra>
#   Memcheck:Leak
#   fun:__builtin_new
#   fun:_Znwj
#   fun:_Z37Trilinos_Util_ReadMatrixMarket2EpetraPcRK11Epetra_CommRP10Epetra_MapRP16Epetra_CrsMatrixRP13Epetra_VectorSB_SB_
#   fun:_Z15CreateCrsMatrixPcR11Epetra_CommP10Epetra_MapbbRbRP16Epetra_CrsMatrix
#}
#{
#   <Leak in Epetra_Object Set Label>
#   Memcheck:Leak
#   fun:__builtin_vec_new
#   fun:_Znaj
#   fun:_ZN13Epetra_Object8SetLabelEPKc
#   fun:_ZN13Epetra_ObjectC2EPKci
#}
#{
#   <Leak B in MPID>
#   Memcheck:Leak
#   fun:malloc
#   fun:MPID_SBiAllocate
#   fun:MPID_SBinit
#   fun:MPID_InitQueue
#}
#{
#   <Leak B in Epetra_MpiComm>
#   Memcheck:Leak
#   fun:__builtin_new
#   fun:_Znwj
#   fun:_ZN14Epetra_MpiCommC1Ei
#   fun:main
#}




#
#  Some more memory leaks found by TestOptions 
#

{
   <insert a suppression name here>
   Memcheck:Leak
   fun:__builtin_vec_new
   fun:_Znaj
   fun:_ZN13Epetra_Object8SetLabelEPKc
   fun:_ZN13Epetra_ObjectC2EPKci
}
 {
   <insert a suppression name here>
   Memcheck:Leak
   fun:__builtin_new
   fun:_Znwj
   fun:_ZNK14Epetra_MpiComm5CloneEv
   fun:_ZN19Epetra_BlockMapDataC1EiiiRK11Epetra_Comm
}

{
   <insert a suppression name here>
   Memcheck:Leak
   fun:malloc
   fun:MPI_Group_incl
   fun:superlu_gridmap
   fun:superlu_gridinit
}
 {
   <insert a suppression name here>
   Memcheck:Leak
   fun:__builtin_vec_new
   fun:_Znaj
   fun:_ZN19Epetra_CrsGraphDataC1E17Epetra_DataAccessRK15Epetra_BlockMapb
   fun:_ZN15Epetra_CrsGraphC1E17Epetra_DataAccessRK15Epetra_BlockMapib
}

 {
   <insert a suppression name here>
   Memcheck:Leak
   fun:malloc
   fun:superlu_malloc_dist
   fun:int*alloc_dist
   fun:get_diag_procs
}

 {
   <insert a suppression name here>
   Memcheck:Leak
   fun:malloc
   fun:superlu_malloc_dist
   fun:int*alloc_dist
   fun:dSolveInit
}



#
#
#
#  The following are needed to run TestOptions on herouxsmp:
#
 {
   <insert a suppression name here>
   Memcheck:Overlap
   fun:memcpy
   fun:lam_arr_remove_index
   fun:finalize1
   fun:lam_ssi_rpi_usysv_finalize
}
 {
   <insert a suppression name here>
   Memcheck:Leak
   fun:DISABLE_FOR_NOW__builtin_new
   fun:_Znwj
   fun:_ZN18Epetra_MultiVectorclEi
   fun:_ZN10Amesos_Klu5SolveEv
}
