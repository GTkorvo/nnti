PaperID: 277

Authors: Marzio Sala, Kendall Stanley and Micheal A. Heroux.

Answers to the referee.

> Referee 1 
> =========
> 
> The article clearly describes the objectives of AMESOS 
> project. 
> The main unclear choice of AMESOS library is why 
> you do not consider 
> numerical values during the symbolic preprocessing phase. 
> This phase is really  critical for the 
> performance of the subsequent factorization phase. 
> Two general comments about AMESOS projet: 
> - the user may loose part of the efficiency or of the functionalities of the
> solvers; 
> - the user will rely of the reactivity of AMESOS group to get access to new
> solvers or new releases of solvers. 
>  You could comment on those issues in the article. 

Done.

>
> List of detailed comments: 
> -------------------------- 
> - Page 2, Line 9: 
>   usually requires --> may require 

Done.

> - Page 2, 3rd paragraph: 
>   most of it was already mentioned before in this section. 

The paragraph has been shortened.

> - Page 2, Line -7: 
>   suppress or expand: "and others" 

Done.

> - Page 3, first paragraph: 
>   Please note that one drawback for the user however is that the availability of
>   a new soft or of recent versions of a soft will depend of the reactivity of
>   AMESOS group. 

A note has been added in the conclusions. In fact, several mailing lists are
available on the AMESOS web page, and the text now refers to them.

> - Page 3, line -11: 
>   I am not sure that is is that easy to interface FORTRAN 90 

We agree that interfacing FORTRAN90 depends on the considered compilers and on
the actions to be performed. We have a ``relatively'' to mean this.

> - Page 4, workflow structure: 
>   In many solvers the so called symbolic phase also referred to as the
>   analysis phase (step 2) involves numerical preprocessing that require the
>   numerical values of A.  On both unsymmetric and symmetric matrices this is
>   quite critical for the performance.  Could you comment on how this will be
>   handled in your workflow ? 

A note has been added. In fact, the interface is general, and a concrete
implementation may decide to do nothing in SymbolicFactorization(), and
perform all the work in NumericFactorization().

> - Page 4, line 8: 
>   Could you justify the choice of a per row distribution which 
>   is not the most general? 

A note has been added. Row distributions are used by most distributed linear
algebra libraries.

> - Page 5, again the fact the the symbolic factorization does not handle
>   numerical values is a strong limitation. 

See comment above.

> - Page 5, iterative refinement is not a pre-defined class? 

Iterative refinement can be implemented within the Solve() method, and turned
off and on using SetParameters(). Not all libraries support iterative
refinement.

> - Page 6, line 2 and figure 1: 
>   Please note that UMFPACK is a sequential solver. Figure 1 suggests that 
>   an MPI based solver was used. 

The figure caption has been extended. One of the strength of Amesos is to
support serial solvers in parallel environments: this means that UMFPACK can
be used with distributed matrices (of course, Amesos will gather the linear
system on processor 0 and use UFMPACK in serial).

> - Page 6, paragraph 1: 
>   Could you comment on the fact that 
>   if the matrix is created independently of the solver then a 
>   copy will be needed. This can be a significant overcost. 

This overcost is minimal if the fill-in of the L and U factors is important.
Of course this is problem dependent.

> - Page 6, Lines -8:-5 
>   Do you mean that the output of a symbolic preprocessing phase 
>   performed by one solver can be used by another one ? 

This is currently not possible.

> - Page 8, Figure 2 : 
>   All legends have funny characters in my output. 

Hope they work now...

> - Page 9, "some hacks": 
>   At which level ? 

It really depends on the MPI, C and FORTRAN implementations. On some machines
(SGI) is quite simple, or others really difficult...


> Referee 2 
> =========
> 
> This technical report presents the AMESOS C++ framework within the Trilinos 
> project - the aim was to build a flexible and efficient interface to several 
> state-of-the art sparse direct linear solver packages. 
> I would advise against a publication in LNCS; the topic of interfacing C++ code 
> to other packages is, in my opinion, not specific enough to support an 
> inclusion in LNCS. Furthermore, I can not see any research results from the 
> report and the  work of interfacing C++ code to sparse solvers is of little 
> interest for the LNCS readers. 
> There are number of issues I think need to be addressed before a 
> publication could be recommended such as detailed experience with each package 
> and other software engineering or performance issues with the interface. 
> A much more interesting work has been published recently by  J. Scott/Y. Hu, 
> RAL-TR-2005-014 "Experiences of sparse direct symmetric solve". They highlight 
> some of the experience that they had with interfacing sparse direct solver and 
> with the evaluation of the different performance results. 

The goal of this proceeding is not to compare different solvers, but rather
to report our design on general interfaces to third-party direct solvers. We
make no claims on which solver should be used; instead, we try to develop a
framework focused on ease of use, so that application developers can test
direct solvers on their problems.


> Referee 3 
> =========
> 
> An excellent paper.  
> page 3: "It should not be much more difficult in a production code" should 
> read "It should not be much more difficult in a non-MATLAB code", since 
> MATLAB is used for production computing, and will be more so even in the 
> parallel case as the package is being extended to distributed computing. 

Done.

> Figure 2 should be split into two figures, since it looks like a comparison 
> between UMFPACK and SuperLU.  The interface/solver time ratio is for each 
> method, and doesn't compare (if one method were a 1000 times faster than 
> the other - which of course it isn't - then it would appear to have a 
> higher overhead). 
> I think it would be fine to replace figure 2 with a simple table with 
> a few results on a few matrices.  n=27 isn't interesting, I think ... 
> The main point is that the overhead is low.  I think the space taken 
> by Figure 2 would be better spent on more discussion - such as how much 
> effort it takes to plug in a new solver package into Amesos. 

Done. We only reference SuperLU (as UMFPACK was used in the small example).
The Figure is now table. To limit the pages to 10, only a few of the matrices
in the FIDAP collections are reported.


> Referee 4 
> =========
> 
> My main concerns with this paper are originality. Does it contain 
> anything that is not also in either the final reference (that has been 
> also submitted for publication) or in other papers? 
> The authors state there for distributed sparse solvers there is no gold 
> standard. This suggests that for serial solvers there is a gold standard. 
> In which case, what is it? Recent reported comparisons of direct solvers 
> showed there is no one code that outperforms all others and might 
> be regarded as a gold standard. Or have I misunderstood the 
> term "gold standard"? 

The sentence has been correct.

> Is the approach able to deal with problems in element form? The matrix 
> rows are referred to but what if the matrix is unassembled? (some 
> solvers avoid assembling the elements, which is essential 
> if they are to solve very large problems). 
> Also, what about out-of-core solvers? 

A sentence has been added in the conclusions. The current design and
implementation does not any support for matrices in elemental format.

> Some solver use the numerical values during the symbolic preprocessing phase. 
> This can be very important for some problems for performance. 
> Can this case be handled? 

A note has been added on this suject.

> Results are presented for SuperLU and UMFPACK. But these 
> are serial codes. Why are results not included for parallel 
> codes. This would be of greater interest to readers of the PARA06 
> proceedings.

Results in parallel are very application dependent: for example, the data
layout can dramatically influence the performances. Since this paper is not
about comparing third-party solvers, we have preferred to report only a few,
serial results. (The result section has been changed as suggested by referee
3.)

> Has AMESOS been used for real by application developers? 
> If so, it would be interesting to learn of their experiences. 
> There are some problems with the presentation. The English used 
> is not always corrected. 
> In the abstract, "composed by" should be "composed of" (also Page 3) 

Done.

> and "allow to access" should be "allow access to". 

Done.

> The second paragraph on page 2 repeats what was already said in 
> the first paragraph of page 2 (although the list is slightly different); 
> also repetitions in the third paragraph. 

Done.

> Page 5 "great details" should be "greater detail". 

Done.

> Page 9. What does "working the presented abstract interfaces" mean? 

The sentence has been changed.

> Page 9. "For linear solver libraries' developers" should be 
> "For the developers of libraries of linear solvers". 

Done.

> The references are a mess. They use a mixture of upper and lower case 
> letters and different character strings. Why not use [1], [2] etc 
> or author names such as (Amestoy and Duff, 2003)? 

This depends on the bibliographystyle -- we'll leave it to LNCS editors.
