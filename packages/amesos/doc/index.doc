/*! \mainpage Amesos:  Direct Sparse Solver Package.
\htmlonly
\endhtmlonly

\section intro Introduction 
Amesos provides an object-oriented interface
to several direct sparse solvers.  The first direct sparse solvers 
in Amesos are SuperlLU serial and SuperLU distributed.  SuperLU serial is Xiaoye Li's 
serial sparse solver code. SuperLU dist is the distributed memory version of
SuperLU.  Amesos allows flexible construction of matrix and vector
arguments via Epetra matrix and vector classes.  

\section startup Overview of Amesos.

Amesos contains two supported classes:

<ul> 

<li> SuperludistOO - Interface to Xiaoye Li's SuperLU Distributed memory code with serial input interface.
<li> Epetra_SLU - Interface to Xiaoye Li's SuperLU Serial. 
</ul>

Amesos is migrating toward a base class model:  Amesos_BaseSolver.  All future Amesos classes will implement the 
base class.  

Amesos will soon support the following classes:
<ul> 
<li> Amesos_Superludist - Interface to Xiaoye Li's SuperLU Distributed memory code with distributed memory input interface. 
<li> Amesos_Dscpack - Interface to Padma Raghavan's DSCPACK


</ul>

\section install  Installing Amesos 

Each of the Amesos classes provides an interface to a third
party direct sparse solver code.  In order to install a particular
class, you must first install the underlying direct sparse solver
code.  Amesos installation requires four steps:
<ul>
<li>Finding MPI for your machine.
<li>Finding optimized BLAS for your machine.
<li>Installing the third party code needed by the Amesos class that you intend to use
<li>Configuring Trilinos with Amesos.
</ul>

Additional architecture specific hints can be found in the CVS repositiory ~/Trilinos3PL/config.   A copy, albeit a potentially out-of-date copy, of ~/Trilinos3PL/config can be found at:  <a href="http://www.cs.utk.edu/~kstanley/Trilinos3PL/config">http://www.cs.utk.edu/~kstanley/Trilinos3PL/config</a>.  

\subsection mpi Finding MPI for your architecture
<ul><li>
Most parallel sparse direct solvers are built on MPI.  
If Trilinos/config has a configure invocation script for your
architecture, you can look for --with-mpi there.  
Mpich, a portable implementation of MPI, is available from 
the <a href="http://www-unix.mcs.anl.gov/mpi/mpich">MPICH website</a>. 
LAM/MPI  is available from the <a href="http://www.lam-mpi.org/"> LAM/MPI website</a>.  On many systems using the right mpicc and mpif77 for compilation and linking avoids the need to specify the mpi libraries and include path.  LAM/MPI uses hcc and hf77.  

<li><b>For existing Trilinos users:</b> Trilinos uses configure to help
find mpi and the blas.  If you have already configured Trilinos with
mpi, configure presumably found mpi and the blas.  To find a link
command which configure used, cd to packages/epetra in your build
directory and type: "grep conftest config.log | tail" and examine the
last line.
</ul>


\subsection blas Finding Optimized BLAS for your architecture

<ul> <li>Most sparse direct
solvers require BLAS, or at least take advantage of them.  
If Trilinos/config has a configure invocation script for your
architecture, you can look for --with-blas there.
If your architecture does not offer optimized BLAS,
<a href="http://math-atlas.sourceforge.net">ATLAS</a> will create an 
optimized BLAS library for you.  

</ul>

\subsection thirdparty Installing third party software




<ul>
<li> SuperLU distributed 
<ul>
<li>Obtain the distribution from <a href="http://www.nersc.gov/~xiaoye/SuperLU/index.html#superlu_dist">Xiaoye Li's SuperLU web site</a> by clicking on the download link in the "SuperLU_DIST Version 2.0" section.
<li>Untar the SuperLU dist code in your Trilinos3PL directory.
<li>Follow the intructions in README (edit make.inc, 'make lib'), ignoring the section on MATLAB
<li>Run an example, following the instructions in EXAMPLE/README (make pddrive; mpirun -np 4 pddrive -r 1 -c 4 pddrive )
<li>Expected output:
<pre>
(0) .. ||X-Xtrue||/||X|| = 1.110223e-15
        EQUIL time             0.01
        COLPERM time           0.00
        ROWPERM time           0.02
        SYMBFACT time          0.00
        DISTRIBUTE time        0.01
        FACTOR time            0.05
        Factor flops    9.957800e+04    Mflops      2.11
        SOLVE time             0.03
        Solve flops     3.325800e+04    Mflops      1.18
        REFINEMENT time        0.03     Steps       1
</pre>
<li><b>Copyright.</b> It is the intent of the SuperLU team to make
SuperLU freely available without any copyright restrictions, i.e. not
even GPL restrictions.  However, as of the last I checked, they still
included one or two codes that have more restrictive copyrights.  

</ul>
<li> SuperLU serial
<ul>
<li>Obtain the distribution from <a href="http://www.nersc.gov/~xiaoye/SuperLU/index.html#superlu">Xiaoye Li's SuperLU web site</a> by clicking on the download link in the "SuperLU Version 2.0" section.
<li>Untar the SuperLU serial code in your Trilinos3PL directory.
<li>Follow the intructions in README (edit make.inc, 'make lib'), ignoring the section on MATLAB
<li>Run an example, following the instructions in EXAMPLE/README (make dlinsol; dlinsol <g10 )
<li>Expected output:
<pre>
10x10 grid, with COLMMD order                                                   
Dimension 100x100; # nonzeros 460
Use minimum degree ordering on A'*A.
Factor time  =    -0.00
Factor flops = 2.038800e+04     Mflops = -48922564965826384.00
Solve time   =    -0.00
Solve flops = 3.854000e+03      Mflops = -9247967695619722.00
||X - Xtrue||/||X|| = 3.796963e-14
No of nonzeros in factor L = 914
No of nonzeros in factor U = 1113
No of nonzeros in L+U = 1927
L\U MB 0.022    total MB needed 0.042   expansions 0
</pre>

<li><b>Copyright.</b> It is the intent of the SuperLU team to make
SuperLU freely available without any copyright restrictions, i.e. not
even GPL restrictions.  However, as of the last I checked, they still
included one or two codes that have more restrictive copyrights.  

</ul>

<li>DSCPACK 
<ul>
<li>Obtain the DSCPACK distribution from <a
href="http://www.cse.psu.edu/~raghavan/Dscpack">Padma Raghavan's DSCPACK
web site</a>.  You will have to submit a form asking for a password.
Dr. Raghavan typically answers within a day - if she does not, let me
know (kstanley@cs.utk.edu).  

<li> Building DSCPACK
<p>This is quoted verbatim from the DSCPACK/Readme file:
<pre>
To Install
-----------

cd DSC_LIB
edit Makefile to provide MPI/BLAS include file paths
make lib_dbl ( to make double precision version)

cd ..
edit Makefile to provide MPI/BLAS include file paths
and libraries 
make  all  
     (to make double precision version of all examples)
</pre>
<p>Note:  "make Solve1" will not work, use "make all".
<li>Running an example:
<p>Type:
<pre>
mpirun -np 2 ./Solve1 2 3 4 1 1 1 1 2 1
</pre>
<p>Expected output:
<pre>
...starting with 2 processors in solver group

...Grid  2X 3X 4, Order 1, Factor 1, Solve  1, RHS 1, Processor 2, 
 NumLocalNonz = 35
Stats after Matrix number 1 [1]

_________________________________________________________________________________________________________
                    P       Type       rank     |A|(K)  #solves         sol-err       count-err          sample
                    2     TS-LLT         24       0.07        1    0.0000000000    0.0000000000    1.0000000000
            O-time(s)  S-time(s)  N-time(s)   N-ops(M)  N-rate(M)     |L|(K) SO-time(s)  SO-ops(M) SO-rate(M) 
       min       0.00       0.00       0.00       0.00       0.52       0.07       0.00       0.00       ----
       max       0.00       0.00       0.00       0.00       0.55       0.07       0.00       0.00       ----
   overall       ----       ----       ----       0.00       0.96       0.15       ----       0.00       1.14
      Memory(Mbytes)        min        max    overall
            Estimate       0.00  NumLocalNonz = 35
      0.00       0.01
            Observed       0.00       0.00       0.01
      Observed L-mem       0.00       0.00       0.00
      Observed stack       0.00       0.00       0.00
        Solve-memory       0.00       0.00       0.00

_________________________________________________________________________________________________________
</pre>

Refer to the Readme for more complete testing and for an explanation
of the above execution of Solve1.  There is nothing particular about
those parameters, many other combinations work.  

<li><b>Copyright.</b>
</ul>
</ul>

\subsection Common link errors

<ul>
<li>e_wsfe, do_fio and other undefined externals are fortran I/O routines required by some BLAS libraries.  Use a fortran linker or see the instructions above for determining find how configure links.
<li>dgemm, dgemv, daxpy and other undefined externals are in the BLAS library.  See above for instructions on how to find a blas library.  
<li>MPI_Init, MPI_Barrier and other undefined externals are from the MPI library.  See instructions above for finding the MPI library for your system.  
</ul>

\section config Configuring and building Trilinos with Amesos


You will need to add three switches to your configure invocation script.
<ul>
<li>Include the Amesos code in the configuration:  
<ul>
<li><b>--enable-amesos </b>
</ul>
<li>Enable one of the Amesos classes:
<ul>
<li><b>--enable-amesos-slus</b> - SuperLU serial
<li><b>--enable-amesos-slud </b> - SuperLU distributes
</ul>
<li>Specify where to find the third party code in one of the following ways:
<ul>
<li><b>--with-trilinos3pldir=/home/somedir/Trilinos3PL</b>
<li><b>--with-amesos-sluddir=/home/somedir/SuperLU_DIST_2.0</b>
<li><b>--with-amesos-sludlib=/home/somedir/SuperLU_DIST_2.0/libsuperludist.a</b> <br>and <br><b>--with-amesos-sludincdir=/home/somedir/SuperLU_DIST_2.0/SRC</b>
</ul>
</ul>
Amesos is not built with either of the two supported classes by default.  You must choose one.
At present, you cannot configure with both  SuperLU serial and SuperLU dist because of name conflicts between the two.

\subsection testsuperludist  Testing Amesos with SuperLU distributed

<pre>
cd packages/amesos/test
source AmesosShortScript.exe
echo $status
</pre>

<p>In the 3.0.1 tar ball, the test will print a message upon success.  In the current development version of the code, under CVS control, the test is silent.  However there are two ways to test whether the test succeeded:
<ul>
<li>If the test passes, "echo $status" will return 0 
<li>Another way to check that this test passed is to compare the number of lines (the first number shown on the line) in each of the following two csh commands.  If this test was successful, OK will be printed once for each call to mpirun that is not in commented out, hence the following two calls to wc will show the same number of lines:
<pre>
grep OK SST.summary | wc
grep mpirun AmesosShortScript.exe | grep -v comment | wc
</pre>
</ul>

<p>Note: If AmesosShortScript.exe is not in amesos/test, it is likely that the make in the 
amesos/test directory failed.

<p>AmesosShellScript.exe contains a slightly longer test including larger matrices.

\subsection testsuperluserial  Testing Amesos with SuperLU serial

<p>Amesos as contained in the trilinos3.0.1 tar ball does not include a test for SuperLU serial.  

<p>AmesosShortSuperLU.exe, found only in the CVS repository at the moment, tests Amesos with SuperLU serial.  Follow the instruction for testing with SuperLU distributed above, using AmesosShortSuperLU.exe instead of AmesosShortScript.exe.


\subsection testdescpack  Testing Amesos with DSCPACK

<pre>
cd packages/amesos/test
source AmesosDscpackShort.exe
echo $status
</pre>

<ul>
<li>If the test passes, "echo $status" will return 0 
<li>Another way to check that this test passed is to compare the number of lines (the first number shown on the line) in each of the following two csh commands.  If this test was successful, OK will be printed once for each call to mpirun that is not in commented out, hence the following two calls to wc will show the same number of lines:
<pre>
grep OK SST.summary | wc
grep mpirun AmesosShortScript.exe | grep -v comment | wc
</pre>
</ul>

<p>Note: If AmesosDscpackShort.exe is not in amesos/test, it is likely that the make in the 
amesos/test directory failed.

<p>AmesosDscpack.exe contains a slightly longer test.

\subsection bugs Known bugs

<ul>
<li> SuperludistOO
<ul>
<li><b>--with-amesos-slud2</b> switch does not work on cygwingcc.  
make in amesos/test fails with SuperLUdist_2.0 because dlsum_bmod and 
dlsum_fmod are multiply defined. 

<p><b>Patch:</b> To build with slud2 on cygwingcc, you will need SuperLUdist_2.0.amesos.tar, a patch file 
for superlu_dist_2.0.tar.  Both SuperLUdist_2.0.amesos.tar and 
superlu_dist_2.0.tar have been installed in ~/Trilinos3PL under CVS.  If you 
use SuperLUdist_2.0.amesos.tar, you should start from the CVSd version of 
superlu_dist_2.0.tar for consistency.
<br><p>
<li><b>Superludist_2.0 tar file requires --with-amesos-sluddir=/home/somedir/SuperLU_DIST_2.0</b>.  By default, Amesos configuration assumes that you are using superlu_dist_1.0.tar which installs in SuperLU_DIST.  superlu_dist_2.0.tar installs in SuperLU_DIST_2.0.  
</ul>
</ul>
\section HomePages Amesos Home Pages

<p>The official 
<a href="http://software.sandia.gov/Trilinos/doc/amesos/doc/html/index.html>Amesos Home Page</a> is kept at Sandia. 

<p>My <a
href="http://www.cs.utk.edu/~kstanley/amesos/doc/html/index.html">
UTK Amesos home page</a> may be more up-to-date on occasion.

<p>This page last updated 30 May 2003.

*/
