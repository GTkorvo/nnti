#!/bin/csh 
##############################################################################
# Zoltan Dynamic Load-Balancing Library for Parallel Applications            #
# Copyright (c) 2000, Sandia National Laboratories.                          #
# For more info, see the README file in the top-level Zoltan directory.      # 
##############################################################################
##############################################################################
# CVS File Information
#    $RCSfile$
#    $Author$
#    $Date$
#    $Revision$
##############################################################################
#
# This C-shell script runs all the test examples 
# and compares the results against pre-computed results.
#
# Usage: test_zoltan [-arch arch-type] [-cmd command] 
#
# where arch-type is one of {generic, solaris, gcc, smos, tflop, cplant, dec}.
# Alternatively, give a run command with the -cmd option.
#
# Initial version by Erik Boman, SNL 9226, 99/09/15.
#

# Chaco problems to run, ordered by increasing size/difficulty
set ch_name = (simple nograph vwgt ewgt grid20x19 film hammond)
set ch_nproc = (4 4 3 4 5 6 8) # no. of procs

# Nemesis problems to run  
set nem_name = (box_064 ti_300 ti_4k)
set nem_nproc = (5 6 9) # no. of procs
set nem_pdisk = (1 2 2) # parallel disk info

# Set default options
@ no_chaco = 0
@ no_nemesis = 0
@ no_parmetis = 0
@ yes_fortran = 0
set out_tag = out
set logfile = test_zoltan.log
set answers = answers
set outdir = output
unset run

# Check for environment variables.
if ($?ZOLTAN_ARCH) then
   set arch = $ZOLTAN_ARCH
endif
if ($?NO_NEMESIS) then
   set no_nemesis = $NO_NEMESIS
endif
if ($?NO_PARMETIS) then
   set no_parmetis = $NO_PARMETIS
endif
if ($?YES_FORTRAN) then
   set yes_fortran = $YES_FORTRAN
   set no_nemesis = 1
   set out_tag = fout
endif

# Parse command-line options. 
# These options will override the environment variables.

while ( $#argv )

  if ( ($1 == "-h") || ($1 == "-help") ) then
     goto usage
  else if ( $1 == "-no_nemesis" ) then
     @ no_nemesis = 1
  else if ( $1 == "-no_parmetis" ) then
     @ no_parmetis = 1
  else if ( $1 == "-no_chaco" ) then
     @ no_chaco = 1
  else if ( $1 == "-yes_fortran" ) then
     @ yes_fortran = 1
     @ no_nemesis = 1
     set out_tag = fout
  else if ( $1 == "-logfile" ) then
  
    if ( $#argv < 2 ) then
      echo "Error: No argument for -logfile"
      goto usage
    endif
    
    shift argv
    set logfile = $1
    
  else if ( $1 == "-arch" ) then
  
    if ( $#argv < 2 ) then
      echo "Error: No argument for -arch"
      goto usage
    endif
    
    shift argv
    set arch = $1
    
  else if ( $1 == "-cmd" ) then
    if ( $#argv < 2 ) then
      echo "Error: No argument for -cmd"
      goto usage
    endif
    
    shift argv
    set run = "$1"
  
  endif
  
  shift argv

end # while ( $#argv )

# Determine what command to use to launch a parallel program based on $arch
if (! $?run ) then
  if ( $?arch ) then
    switch ( $arch )
    case generic:
    case gcc:
    case solaris:
    case sgi64:
      set run = "mpirun -np"
      breaksw
    case smos:
    case tflop:
    case cplant:
      set run = "yod -proc 3 -sz"
      breaksw
    case dec:
      set run = "dmpirun -np"
      breaksw
    default:
      echo "Unknown arch-type. Please use -cmd to specify the run command."
      exit -2
      breaksw
    endsw
  else # !$?run and !$?arch
    echo "Error: No run command. Either -arch or -cmd must be specified."
    goto usage
  endif
endif
  

# Check if we have zdrive
if ( $yes_fortran ) then
# Using F90 
  if ( $?arch ) then
    set zdrive = zfdrive.$arch
  else
    set zdrive = zfdrive
  endif
  if (! -x $zdrive ) then
    echo " No executable $zdrive in current directory;"
    echo " Will try using ../Obj_"$arch"/zfdrive"
    set zdrive = ../Obj_$arch/zfdrive
  endif
else
# Using C
  if ( $?arch ) then
    set zdrive = zdrive.$arch
  else
    set zdrive = zdrive
  endif
  if (! -x $zdrive ) then
    echo " No executable $zdrive in current directory;"
    echo " Will try using ../Obj_"$arch"/zdrive"
    set zdrive = ../Obj_$arch/zdrive
  endif
endif
if (! -x $zdrive ) then
  echo "Error Cannot find executable $zdrive"
  exit 3
endif

# Methods to try
if ( $yes_fortran ) then
# Using F90
  if ( $no_parmetis ) then
    set ch_methods = ( rcb rib oct )
    set nem_methods = ( )
  else
    set ch_methods = ( rcb rib oct partkway partgeom diffusion )
    set nem_methods = ( )
  endif
else
# Using C
  if ( $no_parmetis ) then
    set ch_methods = ( rcb rcb-oneproc rib rib-oneproc oct )
    set nem_methods = ( rcb rib oct )
  else
    set ch_methods = ( rcb rcb-oneproc rib rib-oneproc oct partkway partkway-oneproc partkway-cyclic partgeom diffusion )
    set nem_methods = ( rcb rib oct partkway partgeom diffusion )
  endif
endif

# Set up log file
if ( -e $logfile ) /bin/mv $logfile ${logfile}.old
echo "Tests run on `date`" > $logfile
echo " " >> $logfile


# Loop over Chaco problems
if (! $no_chaco ) then
  @ nprob = $#ch_name
  @ nfailed = 0
  while ( $#ch_name )

    # Go to the next test directory, initialize
    cd ch_${ch_name[1]}
    @ np = $ch_nproc[1]
    echo "Running test case ${ch_name[1]} on ${ch_nproc[1]} procs" | tee -a ../$logfile

    # Check output directories 
    if (! -d $outdir ) mkdir $outdir
    if (! -d $answers ) then
      echo "Warning: Answer directory missing in ch_${ch_name[1]}" | tee -a ../$logfile
    endif

    # Save generic input file 
    if (-e zdrive.inp ) /bin/mv zdrive.inp zdrive.inp.bak

    # Loop over all methods
    foreach mtd ( $ch_methods )
      # Clear fail flag
      @ fail = 0
      @ skip = 0

      # Temp. hack: We know ParMetis fails on nograph, so skip these cases!
      if ( ${ch_name[1]} == nograph ) then
         if (($mtd == partkway)  \
             || ($mtd == partkway-cyclic) \
             || ($mtd == diffusion)) then
            @ skip = 1
         endif
      endif

      if (! $skip ) then

        # Check input file
        if (-e zdrive.inp.${mtd} ) then
          /bin/cp zdrive.inp.${mtd} zdrive.inp
          /bin/rm ${outdir}/${ch_name[1]}.$mtd.$np.*
    
          # Run the driver
          $run $np ../$zdrive
          sleep 1 # Make sure all processes have time to write to disk
    
          # Save and compare output files 
          @ i = 0
          while ( $i < $np )
            /bin/mv ${ch_name[1]}.$out_tag.$np.$i  ${outdir}/${ch_name[1]}.$mtd.$np.$i
            diff -cw ${outdir}/${ch_name[1]}.$mtd.$np.$i ${answers}/${ch_name[1]}.$mtd.$np.$i >> ../$logfile
            if ( $status ) then 
              @ fail = 1
            endif
            @ i = $i + 1
          end
    
        else
          echo "Warning: No input file ${ch_name[1]}/zdrive.inp.${mtd}, skipping..." | tee -a ../$logfile
        endif
  
  
        # Report success or failure 
        if ( $fail ) then
          @ nfailed = $nfailed + 1
          echo "Test problem ${ch_name[1]} with method ${mtd} FAILED" | tee -a ../$logfile
        else
          echo "Test problem ${ch_name[1]} with method ${mtd} OK" | tee -a ../$logfile 
        endif

      endif # !skip

    end # foreach method

    # Restore zdrive.inp
    if (-e zdrive.inp.bak ) /bin/mv zdrive.inp.bak zdrive.inp

    # Shift arguments and return to original directory
    shift ch_name
    shift ch_nproc
    cd ..
  end
  
  # Print failure summary
  echo " " | tee -a $logfile
  if ( $nfailed == 0 ) then
    echo "Success: all Chaco problems passed." | tee -a $logfile
  else
    echo "Failure: $nfailed Chaco problems failed." | tee -a $logfile
  endif
  echo " " | tee -a $logfile

endif # chaco

# Loop over Nemesis problems
if (! $no_nemesis ) then
  @ nprob = $#nem_name
  @ nfailed = 0
  while ( $#nem_name )

    # Go to the next test directory, initialize
    cd nem_${nem_name[1]}
    @ np = $nem_nproc[1]
    echo "Running test case ${nem_name[1]} on ${nem_nproc[1]} procs" | tee -a ../$logfile

    # Check output directories 
    if (! -d $outdir ) mkdir $outdir
    if (! -d $answers ) then
      echo "Warning: Answer directory missing in nem_${nem_name[1]}" | tee -a ../$logfile
    endif

    # Save input file 
    if (-e zdrive.inp ) /bin/mv zdrive.inp zdrive.inp.bak

    # Loop over all methods
    foreach mtd ( $nem_methods )
      # Clear fail flag
      @ fail = 0
      @ skip = 0

      if (! $skip ) then

        # Check input file
        if (-e zdrive.inp.${mtd} ) then
          /bin/cp zdrive.inp.${mtd} zdrive.inp
          /bin/rm ${outdir}/${nem_name[1]}.$mtd.$np.*
    
          # Run the driver
          $run $np ../$zdrive
    
          # Save and compare output files 
          @ i = 0
          @ pdirno = 1 # parallel subdirectory number
          while ( $i < $np )
            if ( $pdirno < 10 ) then
               set pdir = pio_0${pdirno}
            else
               set pdir = pio_${pdirno}
            endif
            /bin/mv ${pdir}/${nem_name[1]}-m${np}-r.par.out.$np.$i  ${outdir}/${nem_name[1]}.$mtd.$np.$i
            diff -cw ${outdir}/${nem_name[1]}.$mtd.$np.$i ${answers}/${nem_name[1]}.$mtd.$np.$i >> ../$logfile
            if ( $status ) then 
              @ fail = 1
            endif
            @ i = $i + 1
            @ pdirno = $pdirno + 1
            if ($pdirno > $nem_pdisk[1]) then
               @ pdirno = 1
            endif
          end
    
        else
          echo "Warning: No input file ${nem_name[1]}/zdrive.inp.${mtd}, skipping..." | tee -a ../$logfile
        endif
  
        # Report success or failure 
        if ( $fail ) then
          @ nfailed = $nfailed + 1
          echo "Test problem ${nem_name[1]} with method ${mtd} FAILED" | tee -a ../$logfile
        else
          echo "Test problem ${nem_name[1]} with method ${mtd} OK" | tee -a ../$logfile 
        endif

      endif # !skip

    end # foreach method

    # Restore zdrive.inp
    if (-e zdrive.inp.bak ) /bin/mv zdrive.inp.bak zdrive.inp

    # Shift list arguments and return to original directory
    shift nem_name
    shift nem_nproc
    shift nem_pdisk
    cd ..
  end
  
  # Print failure summary
  echo " " | tee -a $logfile
  if ( $nfailed == 0 ) then
    echo "Success: all Nemesis problems passed." | tee -a $logfile
  else
    echo "Failure: $nfailed Nemesis problems failed." | tee -a $logfile
  endif
  echo " " | tee -a $logfile

endif # Nemesis

# Exit successfully
exit 0

# Print usage and exit with error
usage:
  echo "Usage: $0 [-arch arch-type] [-cmd command]"
  echo "where arch-type is one of {generic, gcc, solaris, smos, tflop, cplant, dec}."
  echo "(If you have set ZOLTAN_ARCH you do not need to use -arch.)"
  echo "Alternatively, specify the command to load and run a parallel "
  echo "program with the -cmd option."
  echo "Other options:"
  echo "   -logfile filename"
  echo "   -no_parmetis"
  echo "   -no_nemesis"
  echo "   -no_chaco"
  echo "   -yes_fortran"
  echo "The default is to run all methods and file formats."
  exit -1

