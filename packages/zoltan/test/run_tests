#!/bin/csh 
#
# This C-shell script runs all the test examples 
# and compares the results against pre-computed results.
#
# Usage: run_tests [-arch arch-type] [-cmd command]
#
# where arch-type is one of {sun, sunos, smos, tflop, cplant}.
# Alternatively, give a run command with the -cmd option.
#
# Initial version by Erik Boman, SNL 9226, 99/09/15.
#

# Chaco problems to run, ordered by increasing size/difficulty
set ch_name = (simple nograph vwgt grid20x19 film hammond)
set ch_nproc = (4 4 3 5 6 8)

# Nemesis problems to run 
set nem_name = (box_064-m5-r ti_300 ti_4k ti_20k)
set nem_nproc = (5 6 9 36)

# Set default options
@ no_chaco = 0
@ no_nemesis = 0
@ no_parmetis = 0
set outfile = tests.out
set answers = answers
set outdir = output
unset run

# Check for environment variables.
if ($?NO_NEMESIS) then
   set no_nemesis = $NO_NEMESIS
endif
if ($?NO_PARMETIS) then
   set no_parmetis = $NO_PARMETIS
endif

# Parse command-line options. 
# These options will override the environment variables.

while ( $#argv )

  if ( $1 == "-no_parmetis" ) then
     @ no_parmetis = 1
  else if ( $1 == "-no_nemesis" ) then
     @ no_nemesis = 1
  else if ( $1 == "-arch" ) then
  
    # Determine what command to use to launch a parallel program
    if ( $#argv < 2 ) then
      echo "Error: Missing argument for -arch"
      goto usage
    endif
    
    shift argv
    set arch = $1
    
    switch ( $arch )
    case sun:
    case sunos:
    case solaris:
      set run = "mpirun -np"
      breaksw
    case smos:
    case tflop:
    case cplant:
      set run = "yod -sz"
      breaksw
    default:
      echo "Unknown arch-type. Please use -cmd to specify the run command."
      exit -2
      breaksw
    endsw
  
  else if ( $1 == "-cmd" ) then
    if ( $#argv < 2 ) then
      echo "Error: Missing argument for -cmd"
      goto usage
    endif
    
    shift argv
    set run = "$1"
  
  endif
  
  shift argv

end # while ( $#argv )

# Check if we have a run command
if (! $?run ) then
  echo "Error: No run command. Either -arch or -cmd must be used"
  goto usage
endif

# Check if we have zdrive
if ( $?arch ) then
  set zdrive = zdrive.$arch
else
  set zdrive = zdrive
endif
if (! -x $zdrive ) then
  echo "Error Cannot find executable $zdrive"
  exit 3
endif

# Methods to try
if ( $no_parmetis ) then
  set ch_methods = ( rcb rcb-oneproc oct )
  set nem_methods = ( rcb oct )
else
  set ch_methods = ( rcb rcb-oneproc oct partkway partkway-cyclic partgeom diffusion )
  set nem_methods = ( rcb oct partkway partgeom diffusion )
endif

# Set up output file
if ( -e $outfile ) mv $outfile ${outfile}.old
echo "Tests run on `date`" > $outfile
echo " " >> $outfile


# Loop over Chaco problems
if (! $no_chaco ) then
  @ nprob = $#ch_name
  @ nfailed = 0
  while ( $#ch_name )

    # Go to the next test directory, initialize
    cd ch_${ch_name[1]}
    @ np = $ch_nproc[1]
    echo "Running test case ${ch_name[1]} on ${ch_nproc[1]} procs" | tee -a ../$outfile

    # Check output directories 
    if (! -d $outdir ) mkdir $outdir
    if (! -d $answers ) then
      echo "Warning: Answer directory missing in ch_${ch_name[1]}" | tee -a ../$outfile
    endif

    # Save input file 
    if (-e zdrive.inp ) mv zdrive.inp zdrive.inp.bak

    # Loop over all methods
    foreach mtd ( $ch_methods )
      # Clear fail flag
      @ fail = 0
      @ skip = 0

      # Temp. hack: We know ParMetis fails on nograph, so skip these cases!
      if ( ${ch_name[1]} == nograph ) then
         if (($mtd == partkway)  \
             || ($mtd == partkway-cyclic) \
             || ($mtd == diffusion)) then
            @ skip = 1
         endif
      endif

      if (! $skip ) then

        # Check input file
        if (-e zdrive.inp.${mtd} ) then
          cp zdrive.inp.${mtd} zdrive.inp
    
          # Run the driver
          $run $np ../$zdrive
    
          # Save and compare output files 
          @ i = 0
          while ( $i < $np )
            mv ${ch_name[1]}.out.$np.$i  ${outdir}/${ch_name[1]}.$mtd.$np.$i
            diff -c ${outdir}/${ch_name[1]}.$mtd.$np.$i ${answers}/${ch_name[1]}.$mtd.$np.$i >> ../$outfile
            if ( $status ) then 
              @ fail = 1
            endif
            @ i = $i + 1
          end
    
        else
          echo "Warning: No input file ${ch_name[1]}/zdrive.inp.${mtd}, skipping..." | tee -a ../$outfile
        endif
  
  
        # Add problem to failure list if it failed
        if ( $fail ) then
          @ nfailed = $nfailed + 1
          echo "Test problem ${ch_name[1]} failed with method ${mtd}." | tee -a ../$outfile
        endif

      endif # !skip

    end # foreach method

    # Restore zdrive.inp
    if (-e zdrive.inp.bak ) mv zdrive.inp.bak zdrive.inp

    # Shift arguments and return to original directory
    shift ch_name
    shift ch_nproc
    cd ..
  end
  
  # Print failure summary
  echo " " | tee -a $outfile
  if ( $nfailed == 0 ) then
    echo "Success: all Chaco problems passed." | tee -a $outfile
  else
    echo "Failure: $nfailed Chaco problems failed." | tee -a $outfile
  endif
  echo " " | tee -a $outfile

endif # chaco

# Loop over Nemesis problems
if (! $no_nemesis ) then
  echo "Script for Nemesis problems not finished yet."
endif # nemesis


# Exit successfully
exit 0

# Print usage and exit with error
usage:
  echo "Usage: $0 [-arch arch-type] [-cmd command]"
  echo "where arch-type is one of {sun, sunos, smos, tflop, cplant}."
  echo "Either -arch or -cmd must be specified."
  echo "Other options:"
  echo "   -no_nemesis"
  echo "   -no_parmetis"
  exit -1

