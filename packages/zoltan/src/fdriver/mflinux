### For Absoft
#F90 = abf90
#FFLAGS = -g -YEXT_NAMES=LCS -YCFRL=1 -YEXT_SFX=_ -DABSOFT -lU77
#CFLAGS = -DFMANGLE=UNDERSCORE -g
#USE_CPP = cpp
#SPPR_HEAD = ../fort/spprinc.most
#FARG = farg_typical
#ZOLTANFLAGS =

### For Fujitsu
F90 = f95
FFLAGS = -g -Am -X9 -static-flib
CFLAGS = -DFMANGLE=UNDERSCORE -DFUJITSU -g
USE_CPP = cpp
SPPR_HEAD = ../fort/spprinc.most
FARG = farg_typical
ZOLTANFLAGS = FUJITSU_COMPILER=1

### For Lahey
#F90 = lf95
#FFLAGS = -g --staticlink
#CFLAGS = -DFMANGLE=UNDERSCORE -DFUJITSU -g
#USE_CPP =
#SPPR_HEAD = ../fort/spprinc.most
#FARG = farg_typical
#ZOLTANFLAGS = FUJITSU_COMPILER=1

### For NAG
#F90 = nagf95
#FFLAGS = -g -mismatch -gline -C
#CFLAGS = -DFMANGLE=UNDERSCORE -g
#USE_CPP = cpp
#SPPR_HEAD = ../fort/spprinc.most
#FARG = farg_nagf95
#ZOLTANFLAGS =

### For NASoftware
#F90 = nasf95
#FFLAGS = -g -nocheckint
#CFLAGS = -DFMANGLE=UNDERSCORE -g
#USE_CPP =
#SPPR_HEAD = ../fort/spprinc.nas
#FARG = farg_nas
#ZOLTANFLAGS =

### For PGI
#F90 = pgf90
#FFLAGS =
#CFLAGS = -DFMANGLE=UNDERSCORE -DPGI -g
#USE_CPP =
#SPPR_HEAD = ../fort/spprinc.most
#FARG = farg_typical
#ZOLTANFLAGS = PGI_COMPILER=1

### For PSR
#F90 = psrf90
#FFLAGS = -g
#CFLAGS = -DFMANGLE=UNDERSCORE -g
#USE_CPP =
#SPPR_HEAD = ../fort/spprinc.most
#FARG = farg_typical
#ZOLTANFLAGS =

### For LAM
MPIINC = -I$(LAMHOME)/include
MPILIB = -L$(LAMHOME)/lib -lmpi -lm
LAMHF77 = $(F90)
LINK = hf77
LAMHCC = gcc
CC = hcc

### For MPICH, ITL compilation (doesn't work because of iargc, getarg)
#MPIINC = -I$(MPIR_HOME)/include -I$(MPIR_HOME)/lib/LINUX/ch_p4
#MPILIB = -L$(MPIR_HOME)/lib/LINUX/ch_p4 -lpmpich -lmpich \
#	-L/usr/lib/gcc-lib/i386-redhat-linux/egcs-2.91.66 -lgcc -lm
#LINK = $(F90)
#CC = cc

### For MPICH, my compilation
#MPIINC = -I$(MPIR_HOME)/include
#MPILIB = -L$(MPIR_HOME)/build/LINUX/ch_p4/lib -lpmpich -lmpich -lm
#LINK = $(F90)
#CC = cc

##########
CINC_PATH = -I. -I../lb -I../par -I../all -I../params $(MPIINC)
NO_PARMETIS = 1
NP_NEMESIS = 1

fdriver: cwrap.o fwrap$(USE_CPP).o lb_user_const.o ztypes$(USE_CPP).o \
        dr_migrate.o $(FARG).o mpistring.o lampmpi.o \
	dr_main.o dr_loadbal.o dr_input.o dr_chaco_io.o dr_const.o \
	../Obj_nistlinux/libzoltan.a
	$(LINK) $(FFLAGS) -o zfdriver cwrap.o fwrap$(USE_CPP).o \
        lb_user_const.o ztypes$(USE_CPP).o dr_main.o dr_loadbal.o dr_input.o \
        dr_chaco_io.o dr_const.o dr_migrate.o $(FARG).o mpistring.o lampmpi.o \
	-L../Obj_nistlinux -lzoltan $(MPILIB)

$(FARG).o: $(FARG).f
	$(F90) $(FFLAGS) -c $(FARG).f

dr_main.o: dr_main.f90 fwrap$(USE_CPP).o mpi_h.o dr_const.o dr_input.o \
	dr_chaco_io.o dr_loadbal.o
	$(F90) $(FFLAGS) -c dr_main.f90

dr_migrate.o: dr_migrate.f90 fwrap$(USE_CPP).o mpi_h.o dr_const.o \
	lb_user_const.o dr_chaco_io.o
	$(F90) $(FFLAGS) -c dr_migrate.f90

dr_loadbal.o: dr_loadbal.f90 fwrap$(USE_CPP).o mpi_h.o dr_const.o \
	lb_user_const.o dr_migrate.o
	$(F90) $(FFLAGS) -c dr_loadbal.f90

dr_input.o: dr_input.f90 fwrap$(USE_CPP).o mpi_h.o dr_const.o
	$(F90) $(FFLAGS) -c dr_input.f90

dr_chaco_io.o: dr_chaco_io.f90 fwrap$(USE_CPP).o mpi_h.o dr_const.o dr_input.o \
	lb_user_const.o
	$(F90) $(FFLAGS) -c dr_chaco_io.f90

dr_const.o: dr_const.f90 fwrap$(USE_CPP).o
	$(F90) $(FFLAGS) -c dr_const.f90

mpi_h.o: mpi_h.f
	$(F90) $(FFLAGS) $(MPIINC) -c mpi_h.f

lampmpi.o: lampmpi.f90
	$(F90) $(FFLAGS) -c lampmpi.f90

fwrapcpp.o: fwrap.F90 ztypes$(USE_CPP).o lb_user_const.o
	$(F90) $(FFLAGS) -o fwrapcpp.o -c fwrap.F90

fwrap.F90: ../fort/fwrap.fpp sppr_header
	cp ../fort/fwrap.fpp fwrap.F90

fwrap.o: fwrap.f90 ztypes$(USE_CPP).o lb_user_const.o
	$(F90) $(FFLAGS) -c fwrap.f90

fwrap.f90: ../fort/fwrap.fpp sppr sppr_header
	./sppr < ../fort/fwrap.fpp > fwrap.f90

sppr: ../fort/sppr.f90
	$(F90) $(FFLAGS) -o sppr ../fort/sppr.f90

lb_user_const.o: ../fort/lb_user_const.f90 ztypes$(USE_CPP).o
	$(F90) $(FFLAGS) -c ../fort/lb_user_const.f90

ztypescpp.o: ztypes.F90
	$(F90) $(FFLAGS) -o ztypescpp.o -c ztypes.F90

ztypes.F90: ../fort/ztypes.fpp sppr_header
	cp ../fort/ztypes.fpp ztypes.F90

ztypes.o: ztypes.f90
	$(F90) $(FFLAGS) -c ztypes.f90

ztypes.f90: ../fort/ztypes.fpp sppr sppr_header
	./sppr < ../fort/ztypes.fpp > ztypes.f90

sppr_header: $(SPPR_HEAD)
	cp $(SPPR_HEAD) sppr_header

cwrap.o: ../fort/cwrap.c
	$(CC) $(CFLAGS) $(CINC_PATH) -c ../fort/cwrap.c

mpistring.o: mpistring.c
	$(CC) $(CFLAGS) $(CINC_PATH) -c mpistring.c

../Obj_nistlinux/libzoltan.a:
	cd ..; make nistlinux $(ZOLTANFLAGS)
clean:
	rm -f *.o fwrap.f90 ztypes.f90 *.mod debug V* *.vo *.dbg zfdriver sppr \
	      sppr_header fwrap.F90 ztypes.F90
	rm -Rf album
