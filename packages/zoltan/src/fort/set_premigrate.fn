
function Zf90_Set_Pre_Migrate_Fn0s(lb,fn_ptr)
integer(Zoltan_INT) :: Zf90_Set_Pre_Migrate_Fn0s
type(LB_Struct) INTENT_IN lb
interface
  subroutine fn_ptr(dummy, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  integer(Zoltan_INT), intent(in)  :: dummy(*)
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
Zf90_Set_Pre_Migrate_Fn0s = Zfw_Set_Fn0s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,loc(fn_ptr))
#else
Zf90_Set_Pre_Migrate_Fn0s = Zfw_Set_Fn0s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,fn_ptr)
#endif
end function Zf90_Set_Pre_Migrate_Fn0s


function Zf90_Set_Pre_Migrate_Fn1s(lb,fn_ptr,data)
integer(Zoltan_INT) :: Zf90_Set_Pre_Migrate_Fn1s
type(LB_Struct) INTENT_IN lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  integer(Zoltan_INT) INTENT_IN data(*)
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
integer(Zoltan_INT) INTENT_IN data(*)
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
Zf90_Set_Pre_Migrate_Fn1s = Zfw_Set_Fn1s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,loc(fn_ptr),data)
#else
Zf90_Set_Pre_Migrate_Fn1s = Zfw_Set_Fn1s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,fn_ptr,data)
#endif
end function Zf90_Set_Pre_Migrate_Fn1s


function Zf90_Set_Pre_Migrate_Fn2s(lb,fn_ptr,data)
integer(Zoltan_INT) :: Zf90_Set_Pre_Migrate_Fn2s
type(LB_Struct) INTENT_IN lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  real(Zoltan_FLOAT) INTENT_IN data(*)
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
real(Zoltan_FLOAT) INTENT_IN data(*)
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
Zf90_Set_Pre_Migrate_Fn2s = Zfw_Set_Fn2s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,loc(fn_ptr),data)
#else
Zf90_Set_Pre_Migrate_Fn2s = Zfw_Set_Fn2s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,fn_ptr,data)
#endif
end function Zf90_Set_Pre_Migrate_Fn2s


function Zf90_Set_Pre_Migrate_Fn3s(lb,fn_ptr,data)
integer(Zoltan_INT) :: Zf90_Set_Pre_Migrate_Fn3s
type(LB_Struct) INTENT_IN lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  real(Zoltan_DOUBLE) INTENT_IN data(*)
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
real(Zoltan_DOUBLE) INTENT_IN data(*)
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
Zf90_Set_Pre_Migrate_Fn3s = Zfw_Set_Fn3s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,loc(fn_ptr),data)
#else
Zf90_Set_Pre_Migrate_Fn3s = Zfw_Set_Fn3s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,fn_ptr,data)
#endif
end function Zf90_Set_Pre_Migrate_Fn3s


function Zf90_Set_Pre_Migrate_Fn4s(lb,fn_ptr,data)
integer(Zoltan_INT) :: Zf90_Set_Pre_Migrate_Fn4s
type(LB_Struct) INTENT_IN lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  use lb_user_const
  type(LB_User_Data_1) INTENT_IN data
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
type(LB_User_Data_1) INTENT_IN data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
Zf90_Set_Pre_Migrate_Fn4s = Zfw_Set_Fn4s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,loc(fn_ptr),data)
#else
Zf90_Set_Pre_Migrate_Fn4s = Zfw_Set_Fn4s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,fn_ptr,data)
#endif
end function Zf90_Set_Pre_Migrate_Fn4s


function Zf90_Set_Pre_Migrate_Fn5s(lb,fn_ptr,data)
integer(Zoltan_INT) :: Zf90_Set_Pre_Migrate_Fn5s
type(LB_Struct) INTENT_IN lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  use lb_user_const
  type(LB_User_Data_2) INTENT_IN data
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
type(LB_User_Data_2) INTENT_IN data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
Zf90_Set_Pre_Migrate_Fn5s = Zfw_Set_Fn5s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,loc(fn_ptr),data)
#else
Zf90_Set_Pre_Migrate_Fn5s = Zfw_Set_Fn5s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,fn_ptr,data)
#endif
end function Zf90_Set_Pre_Migrate_Fn5s


function Zf90_Set_Pre_Migrate_Fn6s(lb,fn_ptr,data)
integer(Zoltan_INT) :: Zf90_Set_Pre_Migrate_Fn6s
type(LB_Struct) INTENT_IN lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  use lb_user_const
  type(LB_User_Data_3) INTENT_IN data
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
type(LB_User_Data_3) INTENT_IN data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
Zf90_Set_Pre_Migrate_Fn6s = Zfw_Set_Fn6s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,loc(fn_ptr),data)
#else
Zf90_Set_Pre_Migrate_Fn6s = Zfw_Set_Fn6s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,fn_ptr,data)
#endif
end function Zf90_Set_Pre_Migrate_Fn6s


function Zf90_Set_Pre_Migrate_Fn7s(lb,fn_ptr,data)
integer(Zoltan_INT) :: Zf90_Set_Pre_Migrate_Fn7s
type(LB_Struct) INTENT_IN lb
interface
  subroutine fn_ptr(data, num_gid_entries, num_lid_entries, &
    num_import, imp_gids, imp_lids, imp_procs, &
    num_export, exp_gids, exp_lids, exp_procs, ierr)
  use zoltan_types
  use lb_user_const
  type(LB_User_Data_4) INTENT_IN data
  integer(Zoltan_INT), intent(in)  :: num_gid_entries, num_lid_entries
  integer(Zoltan_INT), intent(in)  :: num_import, num_export
  integer(Zoltan_INT), intent(in)  :: imp_gids(*), imp_lids(*), imp_procs(*)
  integer(Zoltan_INT), intent(in)  :: exp_gids(*), exp_lids(*), exp_procs(*)
  integer(Zoltan_INT), intent(out) :: ierr
  end subroutine fn_ptr
end interface
type(LB_User_Data_4) INTENT_IN data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
Zf90_Set_Pre_Migrate_Fn7s = Zfw_Set_Fn7s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,loc(fn_ptr),data)
#else
Zf90_Set_Pre_Migrate_Fn7s = Zfw_Set_Fn7s(lb_addr,nbytes,ZOLTAN_PRE_MIGRATE_FN_TYPE%choice,fn_ptr,data)
#endif
end function Zf90_Set_Pre_Migrate_Fn7s


