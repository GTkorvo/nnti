
function f90LB_Set_Num_Border_Obj_Fn0f(lb,fn_ptr)
integer(Zoltan_INT) :: f90LB_Set_Num_Border_Obj_Fn0f
type(LB_Struct) INTENT_IN lb
interface
  function fn_ptr(dummy, nbor_proc, ierr)
  use zoltan_types
  integer(Zoltan_INT) :: fn_ptr
  integer(Zoltan_INT), intent(in)  :: dummy(*)
  integer(Zoltan_INT), intent(in)  :: nbor_proc
  integer(Zoltan_INT), intent(out) :: ierr
  end function fn_ptr
end interface
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
f90LB_Set_Num_Border_Obj_Fn0f = LB_fw_Set_Fn0f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,loc(fn_ptr))
#else
f90LB_Set_Num_Border_Obj_Fn0f = LB_fw_Set_Fn0f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,fn_ptr)
#endif
end function f90LB_Set_Num_Border_Obj_Fn0f


function f90LB_Set_Num_Border_Obj_Fn1f(lb,fn_ptr,data)
integer(Zoltan_INT) :: f90LB_Set_Num_Border_Obj_Fn1f
type(LB_Struct) INTENT_IN lb
interface
  function fn_ptr(data,nbor_proc, ierr)
  use zoltan_types
  integer(Zoltan_INT) :: fn_ptr
  integer(Zoltan_INT) INTENT_IN data(*)
  integer(Zoltan_INT), intent(in)  :: nbor_proc
  integer(Zoltan_INT), intent(out) :: ierr
  end function fn_ptr
end interface
integer(Zoltan_INT) INTENT_IN data(*)
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
f90LB_Set_Num_Border_Obj_Fn1f = LB_fw_Set_Fn1f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,loc(fn_ptr),data)
#else
f90LB_Set_Num_Border_Obj_Fn1f = LB_fw_Set_Fn1f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,fn_ptr,data)
#endif
end function f90LB_Set_Num_Border_Obj_Fn1f


function f90LB_Set_Num_Border_Obj_Fn2f(lb,fn_ptr,data)
integer(Zoltan_INT) :: f90LB_Set_Num_Border_Obj_Fn2f
type(LB_Struct) INTENT_IN lb
interface
  function fn_ptr(data,nbor_proc, ierr)
  use zoltan_types
  integer(Zoltan_INT) :: fn_ptr
  real(Zoltan_FLOAT) INTENT_IN data(*)
  integer(Zoltan_INT), intent(in)  :: nbor_proc
  integer(Zoltan_INT), intent(out) :: ierr
  end function fn_ptr
end interface
real(Zoltan_FLOAT) INTENT_IN data(*)
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
f90LB_Set_Num_Border_Obj_Fn2f = LB_fw_Set_Fn2f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,loc(fn_ptr),data)
#else
f90LB_Set_Num_Border_Obj_Fn2f = LB_fw_Set_Fn2f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,fn_ptr,data)
#endif
end function f90LB_Set_Num_Border_Obj_Fn2f


function f90LB_Set_Num_Border_Obj_Fn3f(lb,fn_ptr,data)
integer(Zoltan_INT) :: f90LB_Set_Num_Border_Obj_Fn3f
type(LB_Struct) INTENT_IN lb
interface
  function fn_ptr(data,nbor_proc, ierr)
  use zoltan_types
  integer(Zoltan_INT) :: fn_ptr
  real(Zoltan_DOUBLE) INTENT_IN data(*)
  integer(Zoltan_INT), intent(in)  :: nbor_proc
  integer(Zoltan_INT), intent(out) :: ierr
  end function fn_ptr
end interface
real(Zoltan_DOUBLE) INTENT_IN data(*)
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
f90LB_Set_Num_Border_Obj_Fn3f = LB_fw_Set_Fn3f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,loc(fn_ptr),data)
#else
f90LB_Set_Num_Border_Obj_Fn3f = LB_fw_Set_Fn3f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,fn_ptr,data)
#endif
end function f90LB_Set_Num_Border_Obj_Fn3f


function f90LB_Set_Num_Border_Obj_Fn4f(lb,fn_ptr,data)
integer(Zoltan_INT) :: f90LB_Set_Num_Border_Obj_Fn4f
type(LB_Struct) INTENT_IN lb
interface
  function fn_ptr(data,nbor_proc, ierr)
  use zoltan_types
  use lb_user_const
  integer(Zoltan_INT) :: fn_ptr
  type(LB_User_Data_1) INTENT_IN data
  integer(Zoltan_INT), intent(in)  :: nbor_proc
  integer(Zoltan_INT), intent(out) :: ierr
  end function fn_ptr
end interface
type(LB_User_Data_1) INTENT_IN data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
f90LB_Set_Num_Border_Obj_Fn4f = LB_fw_Set_Fn4f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,loc(fn_ptr),data)
#else
f90LB_Set_Num_Border_Obj_Fn4f = LB_fw_Set_Fn4f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,fn_ptr,data)
#endif
end function f90LB_Set_Num_Border_Obj_Fn4f


function f90LB_Set_Num_Border_Obj_Fn5f(lb,fn_ptr,data)
integer(Zoltan_INT) :: f90LB_Set_Num_Border_Obj_Fn5f
type(LB_Struct) INTENT_IN lb
interface
  function fn_ptr(data,nbor_proc, ierr)
  use zoltan_types
  use lb_user_const
  integer(Zoltan_INT) :: fn_ptr
  type(LB_User_Data_2) INTENT_IN data
  integer(Zoltan_INT), intent(in)  :: nbor_proc
  integer(Zoltan_INT), intent(out) :: ierr
  end function fn_ptr
end interface
type(LB_User_Data_2) INTENT_IN data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
f90LB_Set_Num_Border_Obj_Fn5f = LB_fw_Set_Fn5f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,loc(fn_ptr),data)
#else
f90LB_Set_Num_Border_Obj_Fn5f = LB_fw_Set_Fn5f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,fn_ptr,data)
#endif
end function f90LB_Set_Num_Border_Obj_Fn5f


function f90LB_Set_Num_Border_Obj_Fn6f(lb,fn_ptr,data)
integer(Zoltan_INT) :: f90LB_Set_Num_Border_Obj_Fn6f
type(LB_Struct) INTENT_IN lb
interface
  function fn_ptr(data,nbor_proc, ierr)
  use zoltan_types
  use lb_user_const
  integer(Zoltan_INT) :: fn_ptr
  type(LB_User_Data_3) INTENT_IN data
  integer(Zoltan_INT), intent(in)  :: nbor_proc
  integer(Zoltan_INT), intent(out) :: ierr
  end function fn_ptr
end interface
type(LB_User_Data_3) INTENT_IN data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
f90LB_Set_Num_Border_Obj_Fn6f = LB_fw_Set_Fn6f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,loc(fn_ptr),data)
#else
f90LB_Set_Num_Border_Obj_Fn6f = LB_fw_Set_Fn6f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,fn_ptr,data)
#endif
end function f90LB_Set_Num_Border_Obj_Fn6f


function f90LB_Set_Num_Border_Obj_Fn7f(lb,fn_ptr,data)
integer(Zoltan_INT) :: f90LB_Set_Num_Border_Obj_Fn7f
type(LB_Struct) INTENT_IN lb
interface
  function fn_ptr(data,nbor_proc, ierr)
  use zoltan_types
  use lb_user_const
  integer(Zoltan_INT) :: fn_ptr
  type(LB_User_Data_4) INTENT_IN data
  integer(Zoltan_INT), intent(in)  :: nbor_proc
  integer(Zoltan_INT), intent(out) :: ierr
  end function fn_ptr
end interface
type(LB_User_Data_4) INTENT_IN data
integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr
integer(Zoltan_INT) :: nbytes, i
nbytes = Zoltan_PTR_LENGTH
do i=1,nbytes
   lb_addr(i) = ichar(lb%addr%addr(i:i))
end do
#ifdef NASOFTWARE
f90LB_Set_Num_Border_Obj_Fn7f = LB_fw_Set_Fn7f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,loc(fn_ptr),data)
#else
f90LB_Set_Num_Border_Obj_Fn7f = LB_fw_Set_Fn7f(lb_addr,nbytes,ZOLTAN_NUM_BORDER_OBJ_FN_TYPE%choice,fn_ptr,data)
#endif
end function f90LB_Set_Num_Border_Obj_Fn7f


