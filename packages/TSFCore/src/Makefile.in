# Makefile.in generated by automake 1.6.3 from Makefile.am.
# @configure_input@

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# @HEADER
# @HEADER

# ------------------------------------------------------------------------
# For each category, create two variables - NAME and NAME_H. The
# second is the list of headers to be installed, i.e., any header that
# might someday be needed by some other code outside New_Package. The first is
# the list of all source and any other header files.
# ------------------------------------------------------------------------

#
# There is, at present, no distinction between most of the categories, 
# other than those which start with EXTRA_.  All categories which do not
# start with EXTRA_ are included in all builds.  Categories which start
# with EXTRA_ are included in some builds (typically controlled by 
# --with-xyz or --without-xyz)
#
SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)
transform = @program_transform_name@
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

EXEEXT = @EXEEXT@
OBJEXT = @OBJEXT@
PATH_SEPARATOR = @PATH_SEPARATOR@
ALTERNATE_AR = @ALTERNATE_AR@
AMTAR = @AMTAR@
AWK = @AWK@
BLAS_LIBS = @BLAS_LIBS@
CC = @CC@
CXX = @CXX@
DEPDIR = @DEPDIR@
F77 = @F77@
FLIBS = @FLIBS@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LAPACK_LIBS = @LAPACK_LIBS@
MAINT = @MAINT@
MPI_CC_EXISTS = @MPI_CC_EXISTS@
MPI_CXX = @MPI_CXX@
MPI_CXX_EXISTS = @MPI_CXX_EXISTS@
MPI_F77_EXISTS = @MPI_F77_EXISTS@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
STRIP = @STRIP@
VERSION = @VERSION@
ac_aux_dir = @ac_aux_dir@
am__include = @am__include@
am__quote = @am__quote@
install_sh = @install_sh@

INTERFACES_CORE_H = \
	$(srcdir)/interfaces/Core/TSFCoreAssertOp.hpp\
	$(srcdir)/interfaces/Core/TSFCoreAssertOpDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreLinearOp.hpp\
	$(srcdir)/interfaces/Core/TSFCoreLinearOpDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreMultiVector.hpp\
	$(srcdir)/interfaces/Core/TSFCoreMultiVectorCols.hpp\
	$(srcdir)/interfaces/Core/TSFCoreMultiVectorColsDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreMultiVectorDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreMultiVectorStdOps.hpp\
	$(srcdir)/interfaces/Core/TSFCoreMultiVectorStdOpsDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreOpBase.hpp\
	$(srcdir)/interfaces/Core/TSFCoreOpBaseDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVector.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVectorBase.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVectorBaseDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVectorDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVectorSpace.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVectorSpaceBase.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVectorSpaceBaseDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVectorSpaceDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVectorSpaceFactory.hpp\
	$(srcdir)/interfaces/Core/TSFCoreSerialVectorSpaceFactoryDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreTypes.hpp\
	$(srcdir)/interfaces/Core/TSFCoreVector.hpp\
	$(srcdir)/interfaces/Core/TSFCoreVectorDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreVectorSpace.hpp\
	$(srcdir)/interfaces/Core/TSFCoreVectorSpaceDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreVectorSpaceFactory.hpp\
	$(srcdir)/interfaces/Core/TSFCoreVectorSpaceFactoryDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCoreVectorStdOps.hpp\
	$(srcdir)/interfaces/Core/TSFCoreVectorStdOpsDecl.hpp\
	$(srcdir)/interfaces/Core/TSFCore_apply_op_helper.hpp\
	$(srcdir)/interfaces/Core/TSFCore_apply_op_helper_decl.hpp


UTILITIES_CORE_H = \
	$(srcdir)/utilities/Core/TSFCoreExplicitVectorView.hpp\
	$(srcdir)/utilities/Core/TSFCoreMultiVectorAllocator.hpp\
	$(srcdir)/utilities/Core/TSFCoreTestingToolsDecl.hpp\
	$(srcdir)/utilities/Core/TSFCoreTestingTools.hpp


CORE_H = $(INTERFACES_CORE_H) $(UTILITIES_CORE_H)

CORE = 

INTERFACES_SOLVERS_H = \
	$(srcdir)/interfaces/Solvers/TSFCoreSolversConvergenceTesterDecl.hpp\
	$(srcdir)/interfaces/Solvers/TSFCoreSolversConvergenceTester.hpp\
	$(srcdir)/interfaces/Solvers/TSFCoreSolversIterativeLinearSolverDecl.hpp\
	$(srcdir)/interfaces/Solvers/TSFCoreSolversIterativeLinearSolver.hpp\
	$(srcdir)/interfaces/Solvers/TSFCoreSolversNormDecl.hpp\
	$(srcdir)/interfaces/Solvers/TSFCoreSolversNorm.hpp\
	$(srcdir)/interfaces/Solvers/TSFCoreSolversSolverStateDecl.hpp\
	$(srcdir)/interfaces/Solvers/TSFCoreSolversSolverState.hpp\
	$(srcdir)/interfaces/Solvers/TSFCoreSolversTypes.hpp


UTILITIES_SOLVERS_H = \
	$(srcdir)/utilities/Solvers/TSFCoreSolversBiCGSolverDecl.hpp\
	$(srcdir)/utilities/Solvers/TSFCoreSolversBiCGSolver.hpp\
	$(srcdir)/utilities/Solvers/TSFCoreSolversNormedConvergenceTesterDecl.hpp\
	$(srcdir)/utilities/Solvers/TSFCoreSolversNormedConvergenceTester.hpp


SOLVERS_H = $(INTERFACES_SOLVERS_H) $(UTILITIES_SOLVERS_H)

SOLVERS = 

INTERFACES_NONLIN_H = \
	$(srcdir)/interfaces/Nonlin/TSFCoreNonlinLinearOpWithSolveDecl.hpp\
	$(srcdir)/interfaces/Nonlin/TSFCoreNonlinLinearOpWithSolve.hpp\
	$(srcdir)/interfaces/Nonlin/TSFCoreNonlinLinearSolveOpDecl.hpp\
	$(srcdir)/interfaces/Nonlin/TSFCoreNonlinLinearSolveOp.hpp\
	$(srcdir)/interfaces/Nonlin/TSFCoreNonlinNonlinearProblemDecl.hpp\
	$(srcdir)/interfaces/Nonlin/TSFCoreNonlinNonlinearProblemFirstOrderDecl.hpp\
	$(srcdir)/interfaces/Nonlin/TSFCoreNonlinNonlinearProblemFirstOrder.hpp\
	$(srcdir)/interfaces/Nonlin/TSFCoreNonlinNonlinearProblem.hpp\
	$(srcdir)/interfaces/Nonlin/TSFCoreNonlinTypes.hpp


UTILITIES_NONLIN_H = \
	$(srcdir)/utilities/Nonlin/TSFCoreNonlinLinearOpWithSolveIterDecl.hpp\
	$(srcdir)/utilities/Nonlin/TSFCoreNonlinLinearOpWithSolveIter.hpp\
	$(srcdir)/utilities/Nonlin/TSFCoreNonlinNonlinearProblemFirstOrderTesterDecl.hpp\
	$(srcdir)/utilities/Nonlin/TSFCoreNonlinNonlinearProblemFirstOrderTester.hpp\
	$(srcdir)/utilities/Nonlin/TSFCoreNonlinNonlinearProblemTesterDecl.hpp\
	$(srcdir)/utilities/Nonlin/TSFCoreNonlinNonlinearProblemTester.hpp\
	$(srcdir)/utilities/Nonlin/TSFCoreNonlinSimpleNewtonSolverDecl.hpp\
	$(srcdir)/utilities/Nonlin/TSFCoreNonlinSimpleNewtonSolver.hpp


NONLIN_H = $(INTERFACES_NONLIN_H) $(UTILITIES_NONLIN_H)

NONLIN = 

EXTRA_ADAPTERS_MPI_H = \
	$(srcdir)/adapters/mpi-base/TSFCoreMPIMultiVectorBaseDecl.hpp\
	$(srcdir)/adapters/mpi-base/TSFCoreMPIMultiVectorBase.hpp\
	$(srcdir)/adapters/mpi-base/TSFCoreMPIVectorBaseDecl.hpp\
	$(srcdir)/adapters/mpi-base/TSFCoreMPIVectorBase.hpp\
	$(srcdir)/adapters/mpi-base/TSFCoreMPIVectorSpaceBaseDecl.hpp\
	$(srcdir)/adapters/mpi-base/TSFCoreMPIVectorSpaceBase.hpp


EXTRA_ADAPTERS_EPETRA_H = \
	$(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.hpp\
	$(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.hpp\
	$(srcdir)/adapters/epetra/TSFCoreEpetraVector.hpp\
	$(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.hpp


EXTRA_ADAPTERS_EPETRA = \
	$(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.cpp\
	$(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.cpp\
	$(srcdir)/adapters/epetra/TSFCoreEpetraVector.cpp\
	$(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.cpp


@HAVE_TSFCORE_MPI_TRUE@ADAPTERS_MPI_H = $(EXTRA_ADAPTERS_MPI_H)
@HAVE_TSFCORE_MPI_FALSE@ADAPTERS_MPI_H = 

@HAVE_TSFCORE_EPETRA_TRUE@ADAPTERS_EPETRA_H = $(EXTRA_ADAPTERS_EPETRA_H)
@HAVE_TSFCORE_EPETRA_FALSE@ADAPTERS_EPETRA_H = 
@HAVE_TSFCORE_EPETRA_TRUE@ADAPTERS_EPETRA = $(EXTRA_ADAPTERS_EPETRA)
@HAVE_TSFCORE_EPETRA_FALSE@ADAPTERS_EPETRA = 


#Specify locations of include files within Trilinos, but outside TSFCore
AM_CPPFLAGS = -I$(top_srcdir)/src \
-I$(srcdir)/interfaces/Core\
-I$(top_srcdir)/../TSFCoreUtils/src \
-I$(top_srcdir)/../TSFCoreUtils/src/MoochoUtilities\
-I$(top_srcdir)/../TSFCoreUtils/src/RTOpPack\
-I$(top_srcdir)/../TSFCoreUtils/src/RTOpStdOps\
-I$(srcdir)/adapters/mpi-base\
-I$(top_srcdir)/../epetra/src\
-I$(top_builddir)/../epetra/src \
-I$(top_builddir)/../TSFCoreUtils/src



# --------------------------------------------------------------------
# TSFCore library specifications
# --------------------------------------------------------------------
TSFCORE_LIB = libTSFCore.a

TSFCORE_H = \
	$(CORE_H) \
	$(SOLVERS_H) \
	$(NONLIN_H) \
	$(ADAPTERS_MPI_H) \
	$(ADAPTERS_EPETRA_H) 


libTSFCore_a_SOURCES = \
	$(ADAPTERS_EPETRA) 


EXTRA_libTSFCore_a_SOURCES = \
	$(EXTRA_ADAPTERS_MPI_H)



#We need the following to support separate build directories

# --------------------------------------------------------------------
# For using a special archiver
# --------------------------------------------------------------------

# SPECIAL NOTE: Why is the "else" there?  For some reason, automake
# fails to define <lib>_AR of USE_ALTERNATE_AR is false, so we have to
# define it manually.
@USE_ALTERNATE_AR_TRUE@libTSFCore_a_AR = $(ALTERNATE_AR)
@USE_ALTERNATE_AR_FALSE@libTSFCore_a_AR = $(AR) cru


# --------------------------------------------------------------------
# Some C++ compilers create extra .o-files for templates. We need to
# be sure to include these, and this is the hack to do it.
# --------------------------------------------------------------------
libTSFCore_a_LIBADD = $(XTRALDADD)


# --------------------------------------------------------------------
# List of all libraries to install in $(libexecdir)
# --------------------------------------------------------------------
lib_LIBRARIES = $(TSFCORE_LIB)


# --------------------------------------------------------------------
# List of all headers to install in $(includedir)
# --------------------------------------------------------------------
include_HEADERS = $(TSFCORE_H) 


# --------------------------------------------------------------------
# Special stuff to install in our special $(execincludedir)
# --------------------------------------------------------------------

# SPECIAL NOTE: TSFCoreConfig.h is a machine-dependent file, so we need
# to install it in the machine-dependent directory. However, that is
# not a default installation directory, so we had to create it
# special.
execincludedir = $(exec_prefix)/include
nodist_execinclude_HEADERS = TSFCoreConfig.h $(TSFCORE_H)


# --------------------------------------------------------------------
# Files to be deleted by 'make maintainer-clean'
# --------------------------------------------------------------------
MAINTAINERCLEANFILES = Makefile.in 
subdir = src
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = TSFCoreConfig.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(lib_LIBRARIES)

libTSFCore_a_DEPENDENCIES =
am__objects_1 = TSFCoreEpetraLinearOp.$(OBJEXT) \
	TSFCoreEpetraMultiVector.$(OBJEXT) \
	TSFCoreEpetraVector.$(OBJEXT) \
	TSFCoreEpetraVectorSpace.$(OBJEXT)
@HAVE_TSFCORE_EPETRA_TRUE@am__objects_2 = $(am__objects_1)
@HAVE_TSFCORE_EPETRA_FALSE@am__objects_2 =
am_libTSFCore_a_OBJECTS = $(am__objects_2)
libTSFCore_a_OBJECTS = $(am_libTSFCore_a_OBJECTS)

DEFS = @DEFS@
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I.
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
@AMDEP_TRUE@DEP_FILES = ./$(DEPDIR)/TSFCoreEpetraLinearOp.Po \
@AMDEP_TRUE@	./$(DEPDIR)/TSFCoreEpetraMultiVector.Po \
@AMDEP_TRUE@	./$(DEPDIR)/TSFCoreEpetraVector.Po \
@AMDEP_TRUE@	./$(DEPDIR)/TSFCoreEpetraVectorSpace.Po
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
CXXFLAGS = @CXXFLAGS@
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libTSFCore_a_SOURCES) $(EXTRA_libTSFCore_a_SOURCES)
HEADERS = $(include_HEADERS) $(nodist_execinclude_HEADERS)

DIST_COMMON = $(include_HEADERS) Makefile.am Makefile.in \
	TSFCoreConfig.h.in
SOURCES = $(libTSFCore_a_SOURCES) $(EXTRA_libTSFCore_a_SOURCES)

all: TSFCoreConfig.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  src/Makefile
Makefile: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

TSFCoreConfig.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/TSFCoreConfig.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/TSFCoreConfig.h

$(srcdir)/TSFCoreConfig.h.in: @MAINTAINER_MODE_TRUE@ $(top_srcdir)/configure.ac $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOHEADER)
	touch $(srcdir)/TSFCoreConfig.h.in

distclean-hdr:
	-rm -f TSFCoreConfig.h stamp-h1

AR = ar
libLIBRARIES_INSTALL = $(INSTALL_DATA)
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(libLIBRARIES_INSTALL) $$p $(DESTDIR)$(libdir)/$$f"; \
	    $(libLIBRARIES_INSTALL) $$p $(DESTDIR)$(libdir)/$$f; \
	  else :; fi; \
	done
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    p="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  p="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(libdir)/$$p"; \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
	done

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
TSFCoreEpetraLinearOp.$(OBJEXT): \
	$(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.cpp
TSFCoreEpetraMultiVector.$(OBJEXT): \
	$(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.cpp
TSFCoreEpetraVector.$(OBJEXT): \
	$(srcdir)/adapters/epetra/TSFCoreEpetraVector.cpp
TSFCoreEpetraVectorSpace.$(OBJEXT): \
	$(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.cpp
libTSFCore.a: $(libTSFCore_a_OBJECTS) $(libTSFCore_a_DEPENDENCIES) 
	-rm -f libTSFCore.a
	$(libTSFCore_a_AR) libTSFCore.a $(libTSFCore_a_OBJECTS) $(libTSFCore_a_LIBADD)
	$(RANLIB) libTSFCore.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/TSFCoreEpetraLinearOp.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/TSFCoreEpetraMultiVector.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/TSFCoreEpetraVector.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/TSFCoreEpetraVectorSpace.Po@am__quote@

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `cygpath -w $<`

TSFCoreEpetraLinearOp.o: $(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.cpp
@AMDEP_TRUE@	source='$(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.cpp' object='TSFCoreEpetraLinearOp.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/TSFCoreEpetraLinearOp.Po' tmpdepfile='$(DEPDIR)/TSFCoreEpetraLinearOp.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFCoreEpetraLinearOp.o `test -f '$(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.cpp' || echo '$(srcdir)/'`$(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.cpp

TSFCoreEpetraLinearOp.obj: $(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.cpp
@AMDEP_TRUE@	source='$(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.cpp' object='TSFCoreEpetraLinearOp.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/TSFCoreEpetraLinearOp.Po' tmpdepfile='$(DEPDIR)/TSFCoreEpetraLinearOp.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFCoreEpetraLinearOp.obj `cygpath -w $(srcdir)/adapters/epetra/TSFCoreEpetraLinearOp.cpp`

TSFCoreEpetraMultiVector.o: $(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.cpp
@AMDEP_TRUE@	source='$(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.cpp' object='TSFCoreEpetraMultiVector.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/TSFCoreEpetraMultiVector.Po' tmpdepfile='$(DEPDIR)/TSFCoreEpetraMultiVector.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFCoreEpetraMultiVector.o `test -f '$(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.cpp' || echo '$(srcdir)/'`$(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.cpp

TSFCoreEpetraMultiVector.obj: $(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.cpp
@AMDEP_TRUE@	source='$(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.cpp' object='TSFCoreEpetraMultiVector.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/TSFCoreEpetraMultiVector.Po' tmpdepfile='$(DEPDIR)/TSFCoreEpetraMultiVector.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFCoreEpetraMultiVector.obj `cygpath -w $(srcdir)/adapters/epetra/TSFCoreEpetraMultiVector.cpp`

TSFCoreEpetraVector.o: $(srcdir)/adapters/epetra/TSFCoreEpetraVector.cpp
@AMDEP_TRUE@	source='$(srcdir)/adapters/epetra/TSFCoreEpetraVector.cpp' object='TSFCoreEpetraVector.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/TSFCoreEpetraVector.Po' tmpdepfile='$(DEPDIR)/TSFCoreEpetraVector.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFCoreEpetraVector.o `test -f '$(srcdir)/adapters/epetra/TSFCoreEpetraVector.cpp' || echo '$(srcdir)/'`$(srcdir)/adapters/epetra/TSFCoreEpetraVector.cpp

TSFCoreEpetraVector.obj: $(srcdir)/adapters/epetra/TSFCoreEpetraVector.cpp
@AMDEP_TRUE@	source='$(srcdir)/adapters/epetra/TSFCoreEpetraVector.cpp' object='TSFCoreEpetraVector.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/TSFCoreEpetraVector.Po' tmpdepfile='$(DEPDIR)/TSFCoreEpetraVector.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFCoreEpetraVector.obj `cygpath -w $(srcdir)/adapters/epetra/TSFCoreEpetraVector.cpp`

TSFCoreEpetraVectorSpace.o: $(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.cpp
@AMDEP_TRUE@	source='$(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.cpp' object='TSFCoreEpetraVectorSpace.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/TSFCoreEpetraVectorSpace.Po' tmpdepfile='$(DEPDIR)/TSFCoreEpetraVectorSpace.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFCoreEpetraVectorSpace.o `test -f '$(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.cpp' || echo '$(srcdir)/'`$(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.cpp

TSFCoreEpetraVectorSpace.obj: $(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.cpp
@AMDEP_TRUE@	source='$(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.cpp' object='TSFCoreEpetraVectorSpace.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/TSFCoreEpetraVectorSpace.Po' tmpdepfile='$(DEPDIR)/TSFCoreEpetraVectorSpace.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFCoreEpetraVectorSpace.obj `cygpath -w $(srcdir)/adapters/epetra/TSFCoreEpetraVectorSpace.cpp`
CXXDEPMODE = @CXXDEPMODE@
uninstall-info-am:
includeHEADERS_INSTALL = $(INSTALL_HEADER)
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(includedir)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(includeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(includedir)/$$f"; \
	  $(includeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(includedir)/$$f; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(includedir)/$$f"; \
	  rm -f $(DESTDIR)$(includedir)/$$f; \
	done
nodist_execincludeHEADERS_INSTALL = $(INSTALL_HEADER)
install-nodist_execincludeHEADERS: $(nodist_execinclude_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(execincludedir)
	@list='$(nodist_execinclude_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(nodist_execincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(execincludedir)/$$f"; \
	  $(nodist_execincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(execincludedir)/$$f; \
	done

uninstall-nodist_execincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(nodist_execinclude_HEADERS)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(execincludedir)/$$f"; \
	  rm -f $(DESTDIR)$(execincludedir)/$$f; \
	done

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES) TSFCoreConfig.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) TSFCoreConfig.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	$(mkinstalldirs) $(distdir)/$(srcdir)/adapters/epetra $(distdir)/$(srcdir)/adapters/mpi-base $(distdir)/$(srcdir)/interfaces/Core $(distdir)/$(srcdir)/interfaces/Nonlin $(distdir)/$(srcdir)/interfaces/Solvers $(distdir)/$(srcdir)/utilities/Core $(distdir)/$(srcdir)/utilities/Nonlin $(distdir)/$(srcdir)/utilities/Solvers
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS) TSFCoreConfig.h

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(libdir) $(DESTDIR)$(includedir) $(DESTDIR)$(execincludedir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am: install-includeHEADERS

install-exec-am: install-libLIBRARIES install-nodist_execincludeHEADERS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-includeHEADERS uninstall-info-am \
	uninstall-libLIBRARIES uninstall-nodist_execincludeHEADERS

.PHONY: GTAGS all all-am check check-am clean clean-generic \
	clean-libLIBRARIES distclean distclean-compile distclean-depend \
	distclean-generic distclean-hdr distclean-tags distdir dvi \
	dvi-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am \
	install-includeHEADERS install-info install-info-am \
	install-libLIBRARIES install-man \
	install-nodist_execincludeHEADERS install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic tags uninstall uninstall-am \
	uninstall-includeHEADERS uninstall-info-am \
	uninstall-libLIBRARIES uninstall-nodist_execincludeHEADERS

	$(EXTRA_ADAPTERS_EPETRA_H)
	$(EXTRA_ADAPTERS_EPETRA)
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
