# Makefile.in generated by automake 1.6.3 from Makefile.am.
# @configure_input@

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# @HEADER
# @HEADER

# ------------------------------------------------------------------------
# For each category, create two variables - NAME and NAME_H. The
# second is the list of headers to be installed, i.e., any header that
# might someday be needed by some other code outside New_Package. The first is
# the list of all source and any other header files.
# ------------------------------------------------------------------------
SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)
transform = @program_transform_name@
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

EXEEXT = @EXEEXT@
OBJEXT = @OBJEXT@
PATH_SEPARATOR = @PATH_SEPARATOR@
ALTERNATE_AR = @ALTERNATE_AR@
AMTAR = @AMTAR@
AWK = @AWK@
CC = @CC@
CXX = @CXX@
DEPDIR = @DEPDIR@
F77 = @F77@
FLIBS = @FLIBS@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
MAINT = @MAINT@
MPI_CC_EXISTS = @MPI_CC_EXISTS@
MPI_CXX = @MPI_CXX@
MPI_CXX_EXISTS = @MPI_CXX_EXISTS@
MPI_F77_EXISTS = @MPI_F77_EXISTS@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
STRIP = @STRIP@
VERSION = @VERSION@
ac_aux_dir = @ac_aux_dir@
am__include = @am__include@
am__quote = @am__quote@
install_sh = @install_sh@

#
# There is, at present, no distinction between most of the categories, 
# other than those which start with EXTRA_.  All categories which do not
# start with EXTRA_ are included in all builds.  Categories which start
# with EXTRA_ are included in some builds (typically controlled by 
# --with-xyz or --without-xyz)
#
CORE_H = \
	$(srcdir)/Core/TSFCoreAssertOp.hpp\
	$(srcdir)/Core/TSFCoreAssertOpDecl.hpp\
	$(srcdir)/Core/TSFCoreLinearOp.hpp\
	$(srcdir)/Core/TSFCoreLinearOpDecl.hpp\
	$(srcdir)/Core/TSFCoreMultiVector.hpp\
	$(srcdir)/Core/TSFCoreMultiVectorCols.hpp\
	$(srcdir)/Core/TSFCoreMultiVectorColsDecl.hpp\
	$(srcdir)/Core/TSFCoreMultiVectorDecl.hpp\
	$(srcdir)/Core/TSFCoreMultiVectorStdOps.hpp\
	$(srcdir)/Core/TSFCoreMultiVectorStdOpsDecl.hpp\
	$(srcdir)/Core/TSFCoreOpBase.hpp\
	$(srcdir)/Core/TSFCoreOpBaseDecl.hpp\
	$(srcdir)/Core/TSFCoreSerialVector.hpp\
	$(srcdir)/Core/TSFCoreSerialVectorBase.hpp\
	$(srcdir)/Core/TSFCoreSerialVectorBaseDecl.hpp\
	$(srcdir)/Core/TSFCoreSerialVectorDecl.hpp\
	$(srcdir)/Core/TSFCoreSerialVectorSpace.hpp\
	$(srcdir)/Core/TSFCoreSerialVectorSpaceBase.hpp\
	$(srcdir)/Core/TSFCoreSerialVectorSpaceBaseDecl.hpp\
	$(srcdir)/Core/TSFCoreSerialVectorSpaceDecl.hpp\
	$(srcdir)/Core/TSFCoreSerialVectorSpaceFactory.hpp\
	$(srcdir)/Core/TSFCoreSerialVectorSpaceFactoryDecl.hpp\
	$(srcdir)/Core/TSFCoreTypes.hpp\
	$(srcdir)/Core/TSFCoreVector.hpp\
	$(srcdir)/Core/TSFCoreVectorDecl.hpp\
	$(srcdir)/Core/TSFCoreVectorSpace.hpp\
	$(srcdir)/Core/TSFCoreVectorSpaceDecl.hpp\
	$(srcdir)/Core/TSFCoreVectorSpaceFactory.hpp\
	$(srcdir)/Core/TSFCoreVectorSpaceFactoryDecl.hpp\
	$(srcdir)/Core/TSFCoreVectorStdOps.hpp\
	$(srcdir)/Core/TSFCoreVectorStdOpsDecl.hpp\
	$(srcdir)/Core/TSFCore_apply_op_helper.hpp\
	$(srcdir)/Core/TSFCore_apply_op_helper_decl.hpp


CORE = 

SOLVERS_H = \
	$(srcdir)/Solvers/TSFCoreSolversConvergenceTesterDecl.hpp\
	$(srcdir)/Solvers/TSFCoreSolversConvergenceTester.hpp\
	$(srcdir)/Solvers/TSFCoreSolversIterativeLinearSolverDecl.hpp\
	$(srcdir)/Solvers/TSFCoreSolversIterativeLinearSolver.hpp\
	$(srcdir)/Solvers/TSFCoreSolversNormDecl.hpp\
	$(srcdir)/Solvers/TSFCoreSolversNorm.hpp\
	$(srcdir)/Solvers/TSFCoreSolversSolverStateDecl.hpp\
	$(srcdir)/Solvers/TSFCoreSolversSolverState.hpp\
	$(srcdir)/Solvers/TSFCoreSolversTypes.hpp


NONLIN_H = \
	$(srcdir)/Nonlin/TSFCoreNonlinLinearOpWithSolveDecl.hpp\
	$(srcdir)/Nonlin/TSFCoreNonlinLinearOpWithSolve.hpp\
	$(srcdir)/Nonlin/TSFCoreNonlinLinearSolveOpDecl.hpp\
	$(srcdir)/Nonlin/TSFCoreNonlinLinearSolveOp.hpp\
	$(srcdir)/Nonlin/TSFCoreNonlinNonlinearProblemDecl.hpp\
	$(srcdir)/Nonlin/TSFCoreNonlinNonlinearProblemFirstOrderDecl.hpp\
	$(srcdir)/Nonlin/TSFCoreNonlinNonlinearProblemFirstOrder.hpp\
	$(srcdir)/Nonlin/TSFCoreNonlinNonlinearProblem.hpp\
	$(srcdir)/Nonlin/TSFCoreNonlinTypes.hpp


#Specify locations of include files within Trilinos, but outside TSFCore
### Make sure all of these paths are still necessary
#  
AM_CPPFLAGS = -I$(top_srcdir)/interfaces/Core \
-I$(top_srcdir)/../TSFCoreUtils/src/MoochoUtilities \
-I$(top_srcdir)/../TSFCoreUtils/src/RTOpPack\
-I$(top_srcdir)/../TSFCoreUtils/src/RTOpStdOps\
-I$(top_builddir)/../TSFCoreUtils/src/MoochoUtilities



# ------------------------------------------------------------------------
# TSFCore library specifications
# ------------------------------------------------------------------------

#TSFCORE_LIB = libTSFCore.a

#TSFCORE_H = \
#	$(CORE_H) 

#libTSFCore_a_SOURCES = \
#	$(CORE) 

#We need the following to support separate build directories
#AM_CPPFLAGS=-I$(builddir)/src
# ------------------------------------------------------------------------
# For using a special archiver
# ------------------------------------------------------------------------

# SPECIAL NOTE: Why is the "else" there?  For some reason, automake
# fails to define <lib>_AR of USE_ALTERNATE_AR is false, so we have to
# define it manually.

#libTSFCore_a_AR = $(ALTERNATE_AR)

#libTSFCore_a_AR = $(AR) cru

# ------------------------------------------------------------------------
# Some C++ compilers create extra .o-files for templates. We need to
# be sure to include these, and this is the hack to do it.
# ------------------------------------------------------------------------

#libTSFCore_a_LIBADD = $(XTRALDADD)

# ------------------------------------------------------------------------
# List of all libraries to install in $(libexecdir)
# ------------------------------------------------------------------------

#lib_LIBRARIES = $(TSFCORE_LIB)

# ------------------------------------------------------------------------
# List of all headers to install in $(pkgincludedir)
# ------------------------------------------------------------------------

#pkginclude_HEADERS = $(TSFCORE_H) 

# ------------------------------------------------------------------------
# Special stuff to install in our special $(pkgexecincludedir)
# ------------------------------------------------------------------------

# SPECIAL NOTE: TSFCoreConfig.h is a machine-dependent file, so we need
# to install it in the machine-dependent directory. However, that is
# not a default installation directory, so we had to create it
# special.
pkgexecincludedir = $(exec_prefix)/include/TSFCore
nodist_pkgexecinclude_HEADERS = TSFCoreConfig.h $(CORE_H) $(SOLVERS_H) \
	$(NONLIN_H)



# ------------------------------------------------------------------------
# Files to be deleted by 'make maintainer-clean'
# ------------------------------------------------------------------------
MAINTAINERCLEANFILES = Makefile.in 
subdir = interfaces
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = TSFCoreConfig.h
CONFIG_CLEAN_FILES =
DIST_SOURCES =
HEADERS = $(nodist_pkgexecinclude_HEADERS)

DIST_COMMON = Makefile.am Makefile.in TSFCoreConfig.h.in
all: TSFCoreConfig.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  interfaces/Makefile
Makefile: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

TSFCoreConfig.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/TSFCoreConfig.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status interfaces/TSFCoreConfig.h

$(srcdir)/TSFCoreConfig.h.in: @MAINTAINER_MODE_TRUE@ $(top_srcdir)/configure.ac $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOHEADER)
	touch $(srcdir)/TSFCoreConfig.h.in

distclean-hdr:
	-rm -f TSFCoreConfig.h stamp-h1
uninstall-info-am:
nodist_pkgexecincludeHEADERS_INSTALL = $(INSTALL_HEADER)
install-nodist_pkgexecincludeHEADERS: $(nodist_pkgexecinclude_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(pkgexecincludedir)
	@list='$(nodist_pkgexecinclude_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(nodist_pkgexecincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pkgexecincludedir)/$$f"; \
	  $(nodist_pkgexecincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pkgexecincludedir)/$$f; \
	done

uninstall-nodist_pkgexecincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(nodist_pkgexecinclude_HEADERS)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(pkgexecincludedir)/$$f"; \
	  rm -f $(DESTDIR)$(pkgexecincludedir)/$$f; \
	done

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES) TSFCoreConfig.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) TSFCoreConfig.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(HEADERS) TSFCoreConfig.h

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(pkgexecincludedir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
clean: clean-am

clean-am: clean-generic mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-generic distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am: install-nodist_pkgexecincludeHEADERS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

uninstall-am: uninstall-info-am uninstall-nodist_pkgexecincludeHEADERS

.PHONY: GTAGS all all-am check check-am clean clean-generic distclean \
	distclean-generic distclean-hdr distclean-tags distdir dvi \
	dvi-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man \
	install-nodist_pkgexecincludeHEADERS install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic tags \
	uninstall uninstall-am uninstall-info-am \
	uninstall-nodist_pkgexecincludeHEADERS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
