Last updated: 06/11/2003

Directory structure:
--------------------

The source code in the package is partitioned into four different
directories as follows:

./src/interfaces
    |- Core
    |- Solvers
    |- Nonlin
./src/extended
    |- Core
    |- Solvers
    |- Nonlin
./src/adapers
    |- mpi-base
    |- epetra
./example
    |-Nonlin
        |-NP2DSim
        |-NP4DOpt

Descriptions of subdirectories:

./src/interfaces

Here the basic interfaces for TSFCore are defined and include only
templated abstract classes.  The subdirectory 'src/interfaces/Core'
contains the "Core" of TSFCore where all of the classes are contained
in the base C++ namespace TSFCore.  The subdirectory
'src/interfaces/Solvers' contains some extended interfaces to (mostly)
linear solvers and all of this code is contained in the C++ namespace
TSFCore::Solvers.  The subdirectory 'src/interfaces/Nonlin' contains a set
of abstract interfaces to nonlinear problems in the C++ namespace
TSFCore::Nonlin.  All of this code is templated and is contained
strictly in header files (i.e. no object code to compile).

./src/extended

Here some basic utility and other subclasses based on the interfaces
in the directory 'src/interfaces' are included.  These subclasses are
partitioned into the subdirectories 'Core', 'Solvers' and 'Nonlin'
based on their dependencies to classes in the 'src/iterfaces'
subdirectory.  This is all competely general templated code and
therefore there are only *.hpp header files and no code to actually
compile into object files.

./src/adapters

This subdirectory contains code to create implementations of basic
TSFCore abstractions.  For example, implementations of VectorSpace,
Vector, MultiVector and LinearOperator using Epetra are included in
the 'src/adapters/epetra' subdirectory.  Some utility bases classes for
MPI-based implementations are contained in the subdirectory
'src/adapters/mpi-base'.  By deriving from these MPI-base classes vectors
from one set of adapter subclasses any MPI-based vector object can be
used with objects from any other MPI-based implementation (i.e. using
Epetra objects with PETSc matrices).  As more implementations of the
TSFCore interfaces are created, new subdirectories will be added
(i.e. for PETSs and other linear algebra libraries).  Each of these
adapters implementations must be compiled into object code and put
into some library (unlesss the adapters are purlely templated code
such as for Tpetra).  These adapter implementations can be selectively
built based on need and the availability of the underlying
implementation (i.e. of Epetra or PETSc are actually present on the
system).

./example

This subdirectory containts example subclasses and executables that
aid in training and testing.  Much of this code is templated but there
are concreate *.cpp files containing main() programs that can (and
should) be compiled, linked and run.
