/*! \mainpage Trilinos/Epetra: Linear Algebra Services Package.
\htmlonly
<center>
<img align=center lowsrc="../Epetra.gif" src="../Epetra.gif" 
     width=500 height=300 alt="Epetra"><br>
</center>
\endhtmlonly

\section intro Introduction
Epetra provides the fundamental construction
routines and services function that are required for serial and
parallel linear algebra libraries.  Epetra provides the underlying
foundation for all Trilinos solvers.

\section startup Overview of Epetra.

\subsection formulations Epetra Classes

Epetra contains a number of classes.  They can be categorized as follows:

<ul> 

<li> Primary parallel user classes.  These are typically the most important classes for most users.

<ol>

<li> Communicator class: Epetra_Comm -  
     Contains specific information about the parallel machine we are using.  Currently
     supports serial, MPI and prototype hybrid MPI/threaded parallel programming models.

<li> Map classes: Epetra_Map, Epetra_LocalMap, Epetra_BlockMap - Contain information used to
                  distribute vectors, matrices and other objects on a parallel (or serial) machine.

<li> Vector class: Epetra_Vector - Real double precision vector
     class.  Supports construction and use of vectors on a parallel machine.

<li> Multi-vector class: Epetra_MultiVector - Real double precision
     multi-vector class.  Supports construction and use of multi-vectors 
     on a parallel machine.  A multi-vector is a collection vectors.
     It is a generalizaion of a 2D array.

<li> Sparse row graph class: Epetra_CRS_Graph - Allows construction
     of a serial or parallel graph.  The graph determines the communication pattern
     for subsequent matrix objects.

<li> Pure virtual row matrix class: Epetra_RowMatrix - Pure virtual class that specifies
     interfaces needed to do most of the common operations required by a row matrix.  
     The Epetra_LinearProblem expects the matrix as a Epetra_RowMatrix.  Both the
     Epetra_CrsMatrix and Epetra_VbrMatrix classes implement the Epetra_RowMatrix interface and
     therefore objects from either of these classes can be used with Epetra_LinearProblem and with
     AztecOO.  
\htmlonly
(See the <a href="../../../aztecoo/doc/html/index.html">AztecOO</a> home page.)
\endhtmlonly
     Furthermore, any class that implements Epetra_RowMatrix can be used with
     Epetra_LinearProblem and AztecOO.

<li> Sparse row matrix class: Epetra_CrsMatrix - Real double
     precision sparse matrix class.  Supports construction and use of
     row-wise sparse matrices.

<li> Sparse block row matrix class:  Epetra_VbrMatrix - Real double 
     precision block sparse matrix class.  Supports construction and use of
     row-wise block sparse matrices.  

<li> Import/Export classes:  Epetra_Import and Epetra_Export - Constructed from two
     Epetra_BlockMap (or Epetra_Map or Epetra_LocalMap).  Allows
     efficient transfer of objects built using one map to a new
     object with a new map.  Supports local and global permutations,
     overlapping Schwarz operations and many other data movement
     algorithms.
     


</ol>

<li> Primary serial user classes.  These classes provide object oriented interfaces to LAPACK capabilities,
     providing easy access to the most powerful numerical methods in LAPACK.

<ol>

<li> General dense matrix class: Epetra_SerialDenseMatrix - Provides dense matrix services such as 
     factorizations, solves, QR, SVD, etc., with special attention focused on numerically robust solutions.

<li> Symmetric definite dense matrix class: Epetra_SerialSpdDenseMatrix - Similar to Epetra_SerialDenseMatrix 
     except focused specifically on symmetric definite systems.

</ol>

<li> Utility classes. 

<ol>
<li> Timing class: Epetra_Time - Provides timing functions for the
     purposes of performance analysis.

<li> Floating point operation class: Epetra_Flops - Provides floating point operations (FLOPS)
     counting and reporting functions for the purposes of performance analysis.  All Epetra computational
     classes accumulate FLOP counts associated with the \e this object of the computations.

<li> Distributed directory class:  Epetra_Directory - Allows construction of a distributed directory.
     Once constructed, a directory allows one to access randomly distributed objects in an efficient, scalable
     manner.  This class is intended for support of general Epetra_BlockMap and Epetra_Map objects, but is 
     useful in other settings as well.

<li> BLAS wrapper class: Epetra_BLAS - A ``thin'' layer of C++ code wrapping the basic linear algebra subprograms (BLAS).
     This class provides a single instance interface between Epetra and the BLAS.  In this way we can easily
     switch BLAS interfaces and manage the C++/Fortran translation differences that exist between different
     computer systems.  This class also provides a very convenient way to templatize the BLAS.

<li> LAPACK wrapper class: Epetra_LAPACK - A ``thin'' layer of C++ code wrapping LAPACK.  Like Epetra_BLAS,
     it provides nice C++ access to LAPACK.

</ol>
</ul>
     

\subsection trilinos Trilinos and Epetra

Epetra can be used as a stand-alone package.  However, it also provides the foundation for
Trilinos.  Trilinos is a collection of solver packages.  The first available
package is AztecOO, a C++ implementation of the preconditioned iterative solver package Aztec.  
This particular class can be used to solve a linear system as defined by a Epetra_LinearProblem 
object that is passed in at construction.  Alternatively, one may pass in the matrix, initial guess and
right-hand-side as Epetra objects and solves a linear system using preconditioner and
solver options set by the user.

\note AztecOO supports all the functionality of Aztec except for explicit scaling options.  Explicit
scaling is done instead by the Epetra_LinearProblem class (which in turn uses the scaling methods
in the Epetra_RowMatrix and Epetra_MultiVector classes).  Documentation for Aztec can be found
in your Trilinos archive in the file Trilinos/doc/aztec/manual.ps

\subsection aztec2trilinos Transition support for current Aztec users

In order to support existing Aztec users, we have developed a few modules that aid in the transition from
Aztec to Trilinos/AztecOO.  The first module is AZOO_iterate().  This function has an identical interface to
AZ_iterate and, for most purpose, these two should be interchangeable.  AZOO_iterate() differs from AZ_iterate in
that it first converts the Aztec objects to Epetra objects using the module Aztec2Epetra().  It then creates a 
Epetra_LinearProblem and performs any requested scaling explicitly,
and then calls AztecOO.  The transition to AZOO_iterate() is meant to be trivial and temporary.  We encourage users 
to customize their own version of AZOO_iterate(), and to eventually build Epetra objects directly.

\subsection wrappers Epetra C and Fortran Wrappers

Epetra supports a full set of C and Fortran wrappers.  Currently these wrappers are not up to
date.

\subsection example Example Codes
The following example code generates a simple tridiagonal matrix of
dimension "n" where "n" is passed in as an argument.  The matrix is
then used by the power method to compute the largest eigenvalue and
corresponding eigenvector.

The point of this example is to illustrate the flow of calls when
using Epetra.  This example program can be found in the file
Trilinos/examples/Epetra_power_method/cxx_main.cpp.  

\verbinclude cxx_main.cpp
*/
