Date:  Wed Mar 13 16:24:48 CST 2002
Linux willievtp.albanytel.com 2.4.2-2 #1 Sun Apr 8 20:41:30 EDT 2001 i686 unknown
############ cxx_BlockMap_mpi.exe ##############
Epetra::MpiComm
::Processor 0 of 1 total processors
*******************************************************************************************
        Testing Exceptions (Expect error messages if EPETRA_NO_ERROR_REPORTS is not defined
*******************************************************************************************


Checking Epetra_BlockMap(-2, ElementSize, IndexBase, Comm)

Error in Epetra Object with label:  Epetra::BlockMap
Epetra Error:  NumGlobalElements = -2.  Should be >= 0.  Error Code:  -1
Checked OK


Checking Epetra_BlockMap(2, 3, ElementSize, IndexBase, Comm)

Error in Epetra Object with label:  Epetra::BlockMap
Epetra Error:  Invalid NumGlobalElements.  NumGlobalElements = 2.  Should equal 3, or be set to -1 to compute automatically  Error Code:  -4
Checked OK




*******************************************************************************************
        Testing valid constructor now......................................................
*******************************************************************************************


Checking Epetra_BlockMap(NumGlobalElements, ElementSize, IndexBase, Comm)
Checked OK


Checking Epetra_BlockMap(NumGlobalElements, NumMyElements, ElementSize, IndexBase, Comm)
Checked OK


Checking Epetra_BlockMap(NumGlobalElements, NumMyElements, MyGlobalElements,  ElementSize, IndexBase, Comm)
Checked OK


Checking Epetra_BlockMap(NumGlobalElements, NumMyElements, MyGlobalElements,  ElementSizeList, IndexBase, Comm)
Checked OK


Checking Epetra_BlockMap(*Map)
Checked OK


Test ostream << operator
Epetra::BlockMap

Number of Global Elements  = 10
Number of Global Points = 41
Maximum of all GIDs        = 10000
Minimum of all GIDs        = 9991
Index Base                 = 0
0

Number of Local Elements   = 10
Number of Local Points  = 41
Maximum of my GIDs         = 10000
Minimum of my GIDs         = 9991

         MyPID           Local Index        Global Index   FirstPointInElement     ElementSize  
             0                 0             10000                 0                 2    
             0                 1              9999                 2                 3    
             0                 2              9998                 5                 4    
             0                 3              9997                 9                 5    
             0                 4              9996                14                 6    
             0                 5              9995                20                 7    
             0                 6              9994                27                 2    
             0                 7              9993                29                 3    
             0                 8              9992                32                 4    
             0                 9              9991                36                 5    
############ cxx_Comm_mpi.exe ##############
Epetra::MpiComm
::Processor 0 of 1 total processors.  Using MPI_Comm from Petra_Comm: Processor 0 of 1 (should be the same).
Processor 0 Time to reach barrier: 0.124581
Processor 0 Sum result  499785 Time to get beyond barrier: 0.124849
The values on the root processor are: 0 1 2 3 

Broadcast (type int) test passed!

The values on the root processor are: 0 1 2 3 

Broadcast (type double) test passed!

The values on processor 0 are: -20 -10 0 10 
The max values according to processor 0 are: -20 -10 0 10 

MaxAll (type int) test passed!

The values on processor 0 are: 1 2 4 8 
The max values according to processor 0 are: 1 2 4 8 

MaxAll (type double) test passed!

The values on processor 0 are: -20 -10 0 10 
The min values according to processor 0 are: -20 -10 0 10 

MinAll (type int) test passed!

The values on processor 0 are: 1 2 4 8 
The min values according to processor 0 are: 1 2 4 8 

MinAll (type double) test passed!

The values on processor 0 are: -20 -10 0 10 
The sums of all values according to processor 0 are: -20 -10 0 10 

SumAll (type int) test passed!

The values on processor 0 are: 1 2 4 8 
The sums of all values according to processor 0 are: 1 2 4 8 

SumAll (type double) test passed!

The values on processor 0 are: -20 -10 0 10 
The sums of all values on processors 0 - 0 are: -20 -10 0 10 

ScanSum (type int) test passed!

The values on processor 0 are: 1 2 4 8 
The sums of all values on processors 0 - 0 are: 1 2 4 8 

ScanSum (type double) test passed!

The values on processor 0 are: -20 -10 0 10 
The combined list of all values from all processors according to processor 0 is: -20 -10 0 10 

GatherAll (type int) test passed!

The values on processor 0 are: 1 2 4 8 
The combined list of all values from all processors according to processor 0 is: 1 2 4 8 

GatherAll (type double) test passed!

Epetra::Comm
::Processor 0 of 1 total processors
Epetra::Comm
::Processor 0 of 1 total processors is past serial barrier.

 Epetra_Comm Check OK.
############ cxx_CrsGraph_mpi.exe ##############
Processor 0 of 1 is alive.


*****Testing variable entry constructor



Number of local Rows = 10001



Number of local Nonzero entries = 30001



Number of global Rows = 10001



Number of global Nonzero entries = 30001



Rows sorted check OK



NumIndices function check OK



*****Testing constant entry constructor



Number of local Rows = 10001



Number of local Nonzero entries = 10001



Number of global Rows = 10001



Number of global Nonzero entries = 10001



Rows sorted check OK



NumIndices function check OK



*****Testing copy constructor



Number of local Rows = 10001



Number of local Nonzero entries = 10001



Number of global Rows = 10001



Number of global Nonzero entries = 10001



Rows sorted check OK



NumIndices function check OK



*****Testing post construction modifications



Print out tridiagonal matrix, each part on each processor. Index base is one.


Epetra::CrsGraph

Number of Global Block Rows  = 4
Number of Global Block Cols  = 4
Number of Global Block Diags = 4
Number of Global Entries     = 10

Number of Global Rows        = 4
Number of Global Cols        = 4
Number of Global Diagonals   = 4
Number of Global Nonzeros    = 10

Global Maximum Block Row Dim = 1
Global Maximum Block Col Dim = 1
Global Maximum Num Indices   = 3





Number of My Block Rows  = 4
Number of My Block Cols  = 4
Number of My Block Diags = 4
Number of My Entries     = 10

Number of My Rows        = 4
Number of My Cols        = 4
Number of My Diagonals   = 4
Number of My Nonzeros    = 10

My Maximum Block Row Dim = 1
My Maximum Block Col Dim = 1
My Maximum Num Indices   = 3

       Row Index     Col Index         Col Index         Col Index      
             1               1               2    
             2               1               2               3    
             3               2               3               4    
             4               3               4    

############ cxx_CrsMatrix_mpi.exe ##############
Processor 0 of 1 is alive.


Number of local Rows = 10001



Number of local Nonzero entries = 30001



Number of global Rows = 10001



Number of global Nonzero entries = 30001



Rows sorted check OK



NumEntries function check OK

Iter = 0  Lambda = 2.00092  Residual of A*q - lambda*q = 1.4055
Iter = 100  Lambda = 3.98962  Residual of A*q - lambda*q = 0.01445


Total MFLOPs for first solve = 91.9102



Using transpose of matrix and solving again (should give same result).


Iter = 0  Lambda = 2.00646  Residual of A*q - lambda*q = 1.41513
Iter = 100  Lambda = 3.98937  Residual of A*q - lambda*q = 0.0140803


Total MFLOPs for transpose solve = 109.392



Increasing the magnitude of first diagonal term and solving again


Iter = 0  Lambda = 1.99107  Residual of A*q - lambda*q = 1.41143
Iter = 100  Lambda = 20.0556  Residual of A*q - lambda*q = 3.29948e-16


Total MFLOPs for second solve = 105.683



Using transpose of matrix and solving again (should give same result).


Iter = 0  Lambda = 2.00465  Residual of A*q - lambda*q = 1.41548
Iter = 100  Lambda = 20.0556  Residual of A*q - lambda*q = 3.29948e-16


Total MFLOPs for tranpose of second solve = 86.245



*****Testing constant entry constructor



Number of local Rows = 10001



Number of local Nonzero entries = 10001



Number of global Rows = 10001



Number of global Nonzero entries = 10001



Rows sorted check OK



NumEntries function check OK



*****Testing copy constructor



Number of local Rows = 10001



Number of local Nonzero entries = 10001



Number of global Rows = 10001



Number of global Nonzero entries = 10001



Rows sorted check OK



NumEntries function check OK



*****Testing post construction modifications



Print out tridiagonal matrix, each part on each processor.


Epetra::CrsMatrix

Number of Global Rows        = 2
Number of Global Cols        = 2
Number of Global Diagonals   = 2
Number of Global Nonzeros    = 4
Global Maximum Num Entries   = 2





Number of My Rows        = 2
Number of My Cols        = 2
Number of My Diagonals   = 2
Number of My Nonzeros    = 4
My Maximum Num Entries   = 2

   Processor    Row Index    Col Index           Value     
       0             0             0      2.000000000000e+00    
       0             0             1     -1.000000000000e+00    
       0             1             0     -1.000000000000e+00    
       0             1             1      2.000000000000e+00    

############ cxx_CrsRectMatrix_mpi.exe ##############
Processor 0 of 1 is alive.


Total MFLOPs for B*Y = 0



Total MFLOPs for A^T*Y = 0



Total MFLOPs for A*X = 0

Residual = 1.04829e-15

############ cxx_ImportExport_mpi.exe ##############
Processor 0 of 1 is alive.
MultiVector Import using Importer Check OK

Vector Export using Importer Check OK

Matrix Export Check OK
############ cxx_Map_mpi.exe ##############
Epetra::MpiComm
::Processor 0 of 1 total processors
*******************************************************************************************
        Testing Exceptions (Expect error messages if EPETRA_NO_ERROR_REPORTS is not defined
*******************************************************************************************


Checking Epetra_Map(-2, IndexBase, Comm)

Error in Epetra Object with label:  Epetra::BlockMap
Epetra Error:  NumGlobalElements = -2.  Should be >= 0.  Error Code:  -1
Checked OK


Checking Epetra_Map(2, 3, IndexBase, Comm)

Error in Epetra Object with label:  Epetra::BlockMap
Epetra Error:  Invalid NumGlobalElements.  NumGlobalElements = 2.  Should equal 3, or be set to -1 to compute automatically  Error Code:  -4
Checked OK




*******************************************************************************************
        Testing valid constructor now......................................................
*******************************************************************************************


Checking Epetra_Map(NumGlobalElements, IndexBase, Comm)
Checked OK


Checking Epetra_Map(NumGlobalElements, NumMyElements, IndexBase, Comm)
Checked OK


Checking Epetra_Map(NumGlobalElements, NumMyElements, MyGlobalElements,  IndexBase, Comm)
Checked OK


Checking Epetra_Map(*Map)
Checked OK


Checking Epetra_LocalMap(NumMyElements1, IndexBase, Comm)
Checked OK


Checking Epetra_LocalMap(*LocalMap)
Checked OK


Test ostream << operator
Epetra::BlockMap

Number of Global Elements  = 10
Number of Global Points = 10
Maximum of all GIDs        = 10000
Minimum of all GIDs        = 9991
Index Base                 = 0
Constant Element Size      = 1

Number of Local Elements   = 10
Number of Local Points  = 10
Maximum of my GIDs         = 10000
Minimum of my GIDs         = 9991

         MyPID           Local Index        Global Index  
             0                 0             10000    
             0                 1              9999    
             0                 2              9998    
             0                 3              9997    
             0                 4              9996    
             0                 5              9995    
             0                 6              9994    
             0                 7              9993    
             0                 8              9992    
             0                 9              9991    
############ cxx_MultiVector_mpi.exe ##############
Epetra::MpiComm
::Processor 0 of 1 total processors

*********************************************************
Checking Epetra_LocalMap(NumMyElements1, IndexBase, Comm)
     and Epetra_BlockMap(NumGlobalElements, ElementSize, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_BlockMap(NumGlobalElements, NumMyElements, ElementSize, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_BlockMap(NumGlobalElements, NumMyElements, MyGlobalElements,  ElementSize, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_BlockMap(NumGlobalElements, NumMyElements, MyGlobalElements,  ElementSizeList, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_BlockMap(*BlockMap)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_Map(NumGlobalElements, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_Map(NumGlobalElements, NumMyElements, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_Map(NumGlobalElements, NumMyElements, MyGlobalElements,  IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
Error code: 0
XXXXX Replicated Local MultiVector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_Map(*Map)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local MultiVector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK
Testing Assignment operator
On PE 0  A[1][1] should equal = 1.00001 and it does!
Testing MFLOPs


Total FLOPs = 1.45807e+07
Total Time  = 0.024699
MFLOPs      = 590.336


Testing ostream operator:  Multivector  should be 100-by-2 and print i,j indices

Epetra::MultiVector
     MyPID           GID               Value               Value  
         0             0      0.000000000000e+00  1.000000000000e+02
         0             1      1.000000000000e+00  1.010000000000e+02
         0             2      2.000000000000e+00  1.020000000000e+02
         0             3      3.000000000000e+00  1.030000000000e+02
         0             4      4.000000000000e+00  1.040000000000e+02
         0             5      5.000000000000e+00  1.050000000000e+02
         0             6      6.000000000000e+00  1.060000000000e+02
         0             7      7.000000000000e+00  1.070000000000e+02
         0             8      8.000000000000e+00  1.080000000000e+02
         0             9      9.000000000000e+00  1.090000000000e+02
         0            10      1.000000000000e+01  1.100000000000e+02
         0            11      1.100000000000e+01  1.110000000000e+02
         0            12      1.200000000000e+01  1.120000000000e+02
         0            13      1.300000000000e+01  1.130000000000e+02
         0            14      1.400000000000e+01  1.140000000000e+02
         0            15      1.500000000000e+01  1.150000000000e+02
         0            16      1.600000000000e+01  1.160000000000e+02
         0            17      1.700000000000e+01  1.170000000000e+02
         0            18      1.800000000000e+01  1.180000000000e+02
         0            19      1.900000000000e+01  1.190000000000e+02
         0            20      2.000000000000e+01  1.200000000000e+02
         0            21      2.100000000000e+01  1.210000000000e+02
         0            22      2.200000000000e+01  1.220000000000e+02
         0            23      2.300000000000e+01  1.230000000000e+02
         0            24      2.400000000000e+01  1.240000000000e+02
         0            25      2.500000000000e+01  1.250000000000e+02
         0            26      2.600000000000e+01  1.260000000000e+02
         0            27      2.700000000000e+01  1.270000000000e+02
         0            28      2.800000000000e+01  1.280000000000e+02
         0            29      2.900000000000e+01  1.290000000000e+02
         0            30      3.000000000000e+01  1.300000000000e+02
         0            31      3.100000000000e+01  1.310000000000e+02
         0            32      3.200000000000e+01  1.320000000000e+02
         0            33      3.300000000000e+01  1.330000000000e+02
         0            34      3.400000000000e+01  1.340000000000e+02
         0            35      3.500000000000e+01  1.350000000000e+02
         0            36      3.600000000000e+01  1.360000000000e+02
         0            37      3.700000000000e+01  1.370000000000e+02
         0            38      3.800000000000e+01  1.380000000000e+02
         0            39      3.900000000000e+01  1.390000000000e+02
         0            40      4.000000000000e+01  1.400000000000e+02
         0            41      4.100000000000e+01  1.410000000000e+02
         0            42      4.200000000000e+01  1.420000000000e+02
         0            43      4.300000000000e+01  1.430000000000e+02
         0            44      4.400000000000e+01  1.440000000000e+02
         0            45      4.500000000000e+01  1.450000000000e+02
         0            46      4.600000000000e+01  1.460000000000e+02
         0            47      4.700000000000e+01  1.470000000000e+02
         0            48      4.800000000000e+01  1.480000000000e+02
         0            49      4.900000000000e+01  1.490000000000e+02
         0            50      5.000000000000e+01  1.500000000000e+02
         0            51      5.100000000000e+01  1.510000000000e+02
         0            52      5.200000000000e+01  1.520000000000e+02
         0            53      5.300000000000e+01  1.530000000000e+02
         0            54      5.400000000000e+01  1.540000000000e+02
         0            55      5.500000000000e+01  1.550000000000e+02
         0            56      5.600000000000e+01  1.560000000000e+02
         0            57      5.700000000000e+01  1.570000000000e+02
         0            58      5.800000000000e+01  1.580000000000e+02
         0            59      5.900000000000e+01  1.590000000000e+02
         0            60      6.000000000000e+01  1.600000000000e+02
         0            61      6.100000000000e+01  1.610000000000e+02
         0            62      6.200000000000e+01  1.620000000000e+02
         0            63      6.300000000000e+01  1.630000000000e+02
         0            64      6.400000000000e+01  1.640000000000e+02
         0            65      6.500000000000e+01  1.650000000000e+02
         0            66      6.600000000000e+01  1.660000000000e+02
         0            67      6.700000000000e+01  1.670000000000e+02
         0            68      6.800000000000e+01  1.680000000000e+02
         0            69      6.900000000000e+01  1.690000000000e+02
         0            70      7.000000000000e+01  1.700000000000e+02
         0            71      7.100000000000e+01  1.710000000000e+02
         0            72      7.200000000000e+01  1.720000000000e+02
         0            73      7.300000000000e+01  1.730000000000e+02
         0            74      7.400000000000e+01  1.740000000000e+02
         0            75      7.500000000000e+01  1.750000000000e+02
         0            76      7.600000000000e+01  1.760000000000e+02
         0            77      7.700000000000e+01  1.770000000000e+02
         0            78      7.800000000000e+01  1.780000000000e+02
         0            79      7.900000000000e+01  1.790000000000e+02
         0            80      8.000000000000e+01  1.800000000000e+02
         0            81      8.100000000000e+01  1.810000000000e+02
         0            82      8.200000000000e+01  1.820000000000e+02
         0            83      8.300000000000e+01  1.830000000000e+02
         0            84      8.400000000000e+01  1.840000000000e+02
         0            85      8.500000000000e+01  1.850000000000e+02
         0            86      8.600000000000e+01  1.860000000000e+02
         0            87      8.700000000000e+01  1.870000000000e+02
         0            88      8.800000000000e+01  1.880000000000e+02
         0            89      8.900000000000e+01  1.890000000000e+02
         0            90      9.000000000000e+01  1.900000000000e+02
         0            91      9.100000000000e+01  1.910000000000e+02
         0            92      9.200000000000e+01  1.920000000000e+02
         0            93      9.300000000000e+01  1.930000000000e+02
         0            94      9.400000000000e+01  1.940000000000e+02
         0            95      9.500000000000e+01  1.950000000000e+02
         0            96      9.600000000000e+01  1.960000000000e+02
         0            97      9.700000000000e+01  1.970000000000e+02
         0            98      9.800000000000e+01  1.980000000000e+02
         0            99      9.900000000000e+01  1.990000000000e+02



Testing ostream operator:  Same Multivector as before except using BlockMap of 25x4

Epetra::MultiVector
     MyPID         GID/Point             Value               Value  
         0             0/0      0.000000000000e+00  1.000000000000e+02
         0             0/1      0.000000000000e+00  1.000000000000e+02
         0             0/2      0.000000000000e+00  1.000000000000e+02
         0             0/3      0.000000000000e+00  1.000000000000e+02
         0             1/0      1.000000000000e+00  1.010000000000e+02
         0             1/1      1.000000000000e+00  1.010000000000e+02
         0             1/2      1.000000000000e+00  1.010000000000e+02
         0             1/3      1.000000000000e+00  1.010000000000e+02
         0             2/0      2.000000000000e+00  1.020000000000e+02
         0             2/1      2.000000000000e+00  1.020000000000e+02
         0             2/2      2.000000000000e+00  1.020000000000e+02
         0             2/3      2.000000000000e+00  1.020000000000e+02
         0             3/0      3.000000000000e+00  1.030000000000e+02
         0             3/1      3.000000000000e+00  1.030000000000e+02
         0             3/2      3.000000000000e+00  1.030000000000e+02
         0             3/3      3.000000000000e+00  1.030000000000e+02
         0             4/0      4.000000000000e+00  1.040000000000e+02
         0             4/1      4.000000000000e+00  1.040000000000e+02
         0             4/2      4.000000000000e+00  1.040000000000e+02
         0             4/3      4.000000000000e+00  1.040000000000e+02
         0             5/0      5.000000000000e+00  1.050000000000e+02
         0             5/1      5.000000000000e+00  1.050000000000e+02
         0             5/2      5.000000000000e+00  1.050000000000e+02
         0             5/3      5.000000000000e+00  1.050000000000e+02
         0             6/0      6.000000000000e+00  1.060000000000e+02
         0             6/1      6.000000000000e+00  1.060000000000e+02
         0             6/2      6.000000000000e+00  1.060000000000e+02
         0             6/3      6.000000000000e+00  1.060000000000e+02
         0             7/0      7.000000000000e+00  1.070000000000e+02
         0             7/1      7.000000000000e+00  1.070000000000e+02
         0             7/2      7.000000000000e+00  1.070000000000e+02
         0             7/3      7.000000000000e+00  1.070000000000e+02
         0             8/0      8.000000000000e+00  1.080000000000e+02
         0             8/1      8.000000000000e+00  1.080000000000e+02
         0             8/2      8.000000000000e+00  1.080000000000e+02
         0             8/3      8.000000000000e+00  1.080000000000e+02
         0             9/0      9.000000000000e+00  1.090000000000e+02
         0             9/1      9.000000000000e+00  1.090000000000e+02
         0             9/2      9.000000000000e+00  1.090000000000e+02
         0             9/3      9.000000000000e+00  1.090000000000e+02
         0            10/0      1.000000000000e+01  1.100000000000e+02
         0            10/1      1.000000000000e+01  1.100000000000e+02
         0            10/2      1.000000000000e+01  1.100000000000e+02
         0            10/3      1.000000000000e+01  1.100000000000e+02
         0            11/0      1.100000000000e+01  1.110000000000e+02
         0            11/1      1.100000000000e+01  1.110000000000e+02
         0            11/2      1.100000000000e+01  1.110000000000e+02
         0            11/3      1.100000000000e+01  1.110000000000e+02
         0            12/0      1.200000000000e+01  1.120000000000e+02
         0            12/1      1.200000000000e+01  1.120000000000e+02
         0            12/2      1.200000000000e+01  1.120000000000e+02
         0            12/3      1.200000000000e+01  1.120000000000e+02
         0            13/0      1.300000000000e+01  1.130000000000e+02
         0            13/1      1.300000000000e+01  1.130000000000e+02
         0            13/2      1.300000000000e+01  1.130000000000e+02
         0            13/3      1.300000000000e+01  1.130000000000e+02
         0            14/0      1.400000000000e+01  1.140000000000e+02
         0            14/1      1.400000000000e+01  1.140000000000e+02
         0            14/2      1.400000000000e+01  1.140000000000e+02
         0            14/3      1.400000000000e+01  1.140000000000e+02
         0            15/0      1.500000000000e+01  1.150000000000e+02
         0            15/1      1.500000000000e+01  1.150000000000e+02
         0            15/2      1.500000000000e+01  1.150000000000e+02
         0            15/3      1.500000000000e+01  1.150000000000e+02
         0            16/0      1.600000000000e+01  1.160000000000e+02
         0            16/1      1.600000000000e+01  1.160000000000e+02
         0            16/2      1.600000000000e+01  1.160000000000e+02
         0            16/3      1.600000000000e+01  1.160000000000e+02
         0            17/0      1.700000000000e+01  1.170000000000e+02
         0            17/1      1.700000000000e+01  1.170000000000e+02
         0            17/2      1.700000000000e+01  1.170000000000e+02
         0            17/3      1.700000000000e+01  1.170000000000e+02
         0            18/0      1.800000000000e+01  1.180000000000e+02
         0            18/1      1.800000000000e+01  1.180000000000e+02
         0            18/2      1.800000000000e+01  1.180000000000e+02
         0            18/3      1.800000000000e+01  1.180000000000e+02
         0            19/0      1.900000000000e+01  1.190000000000e+02
         0            19/1      1.900000000000e+01  1.190000000000e+02
         0            19/2      1.900000000000e+01  1.190000000000e+02
         0            19/3      1.900000000000e+01  1.190000000000e+02
         0            20/0      2.000000000000e+01  1.200000000000e+02
         0            20/1      2.000000000000e+01  1.200000000000e+02
         0            20/2      2.000000000000e+01  1.200000000000e+02
         0            20/3      2.000000000000e+01  1.200000000000e+02
         0            21/0      2.100000000000e+01  1.210000000000e+02
         0            21/1      2.100000000000e+01  1.210000000000e+02
         0            21/2      2.100000000000e+01  1.210000000000e+02
         0            21/3      2.100000000000e+01  1.210000000000e+02
         0            22/0      2.200000000000e+01  1.220000000000e+02
         0            22/1      2.200000000000e+01  1.220000000000e+02
         0            22/2      2.200000000000e+01  1.220000000000e+02
         0            22/3      2.200000000000e+01  1.220000000000e+02
         0            23/0      2.300000000000e+01  1.230000000000e+02
         0            23/1      2.300000000000e+01  1.230000000000e+02
         0            23/2      2.300000000000e+01  1.230000000000e+02
         0            23/3      2.300000000000e+01  1.230000000000e+02
         0            24/0      2.400000000000e+01  1.240000000000e+02
         0            24/1      2.400000000000e+01  1.240000000000e+02
         0            24/2      2.400000000000e+01  1.240000000000e+02
         0            24/3      2.400000000000e+01  1.240000000000e+02

Traceback Mode value = 0
############ cxx_Object_mpi.exe ##############
Epetra::MpiComm
::Processor 0 of 1 total processors


This should say Epetra::Object: Epetra::Object



This should say New name for Epetra_Object: New name for Epetra_Object



Default Traceback Mode value = 1
Set Traceback Mode value to one less than default = 0



This should say 1: 1



This should say New name for Epetra_Object: New name for Epetra_Object



This should say New name for Epetra_Object,1: New name for Epetra_Object,1



This should say New name for Epetra_Object,1: New name for Epetra_Object,1


############ cxx_VbrMatrix_mpi.exe ##############
Processor 0 of 1 is alive.


Number of local Rows = 3003



Number of local Rows should = 3003



Number of local Nonzero entries = 27009



Number of global Rows = 3003



Number of global Nonzero entries = 27009



Number of local Block Rows = 1001



Number of local Nonzero Block entries = 3001



Number of global Block Rows = 1001



Number of global Nonzero Block entries = 27009



Number of nonzero values in last row = 6



Rows sorted check OK



NumEntries function check OK

Iter = 0  Lambda = -1.07072  Residual of A*q - lambda*q = 9.3878
Iter = 99  Lambda = 16.1803  Residual of A*q - lambda*q = 3.10213e-15


Total MFLOPs for first solve = 38.7095



Using transpose of matrix and solving again (should give same result).


Iter = 0  Lambda = -1.07072  Residual of A*q - lambda*q = 9.40319
Iter = 99  Lambda = 16.1803  Residual of A*q - lambda*q = 1.14796e-15


Total MFLOPs for transpose solve = 34.7752



Increasing the magnitude of first diagonal term and solving again


Iter = 0  Lambda = -0.988289  Residual of A*q - lambda*q = 9.82167
Iter = 99  Lambda = 89.953  Residual of A*q - lambda*q = 1.80377e-15


Total MFLOPs for second solve = 36.3266



Using transpose of matrix and solving again (should give same result).


Iter = 0  Lambda = -0.988289  Residual of A*q - lambda*q = 9.82945
Iter = 99  Lambda = 89.953  Residual of A*q - lambda*q = 1.83015e-14


Total MFLOPs for tranpose of second solve = 29.9169



*****Testing copy constructor



Number of local Rows = 3003



Number of local Rows should = 3003



Number of local Nonzero entries = 27009



Number of global Rows = 3003



Number of global Nonzero entries = 27009



Number of local Block Rows = 1001



Number of local Nonzero Block entries = 3001



Number of global Block Rows = 1001



Number of global Nonzero Block entries = 27009



Number of nonzero values in last row = 6



Rows sorted check OK



*****Testing post construction modifications

############ cxx_Vector_mpi.exe ##############
Epetra::MpiComm
::Processor 0 of 1 total processors

*********************************************************
Checking Epetra_LocalMap(NumMyElements1, IndexBase, Comm)
     and Epetra_BlockMap(NumGlobalElements, ElementSize, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_BlockMap(NumGlobalElements, NumMyElements, ElementSize, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_BlockMap(NumGlobalElements, NumMyElements, MyGlobalElements,  ElementSize, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_BlockMap(NumGlobalElements, NumMyElements, MyGlobalElements,  ElementSizeList, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_BlockMap(*BlockMap)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_Map(NumGlobalElements, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_Map(NumGlobalElements, NumMyElements, IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_Map(NumGlobalElements, NumMyElements, MyGlobalElements,  IndexBase, Comm)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
Error code: 0
XXXXX Replicated Local Vector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK

*********************************************************
Checking Epetra_Map(*Map)
*********************************************************
XXXXX Testing alpha * A       alpha = 2	 Checked OK
XXXXX Testing C = alpha * A + B        alpha = 2	 Checked OK
XXXXX Testing C += B      	 Checked OK
XXXXX Testing A.dotProd(B)     	 Checked OK
XXXXX Testing norm1_A      	 Checked OK
XXXXX Testing norm2_sqrtA     	 Checked OK
XXXXX Testing norminf_A     	 Checked OK
XXXXX Testing normw_A     	 Checked OK
XXXXX Testing minval_A     	 Checked OK
XXXXX Testing maxval_A     	 Checked OK
XXXXX Testing meanval_A     	 Checked OK
XXXXX Testing abs_A     	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Non-Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Replicated Local Vector GEMM tests (Strided Multivectors)
  alpha = 3,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D dot product via GEMM call     
  alpha = 2,  beta = 1, transa = T, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = N	 Checked OK
XXXXX Generalized 2D vector update via GEMM call     
  alpha = 2,  beta = 1.1, transa = N, transb = T	 Checked OK


This should say Epetra::Vector: Epetra::Vector


Testing Assignment operator
On PE 0  A[1] should equal = 1.00001 and it does!


Testing MFLOPs


Total FLOPs = 2e+06
Total Time  = 0.031053
MFLOPs      = 64.4061


Testing ostream operator:  Multivector  should be 100-by-2 and print i,j indices

Epetra::MultiVector
     MyPID           GID               Value  
         0             0      0.000000000000e+00
         0             1      1.000000000000e+00
         0             2      2.000000000000e+00
         0             3      3.000000000000e+00
         0             4      4.000000000000e+00
         0             5      5.000000000000e+00
         0             6      6.000000000000e+00
         0             7      7.000000000000e+00
         0             8      8.000000000000e+00
         0             9      9.000000000000e+00
         0            10      1.000000000000e+01
         0            11      1.100000000000e+01
         0            12      1.200000000000e+01
         0            13      1.300000000000e+01
         0            14      1.400000000000e+01
         0            15      1.500000000000e+01
         0            16      1.600000000000e+01
         0            17      1.700000000000e+01
         0            18      1.800000000000e+01
         0            19      1.900000000000e+01
         0            20      2.000000000000e+01
         0            21      2.100000000000e+01
         0            22      2.200000000000e+01
         0            23      2.300000000000e+01
         0            24      2.400000000000e+01
         0            25      2.500000000000e+01
         0            26      2.600000000000e+01
         0            27      2.700000000000e+01
         0            28      2.800000000000e+01
         0            29      2.900000000000e+01
         0            30      3.000000000000e+01
         0            31      3.100000000000e+01
         0            32      3.200000000000e+01
         0            33      3.300000000000e+01
         0            34      3.400000000000e+01
         0            35      3.500000000000e+01
         0            36      3.600000000000e+01
         0            37      3.700000000000e+01
         0            38      3.800000000000e+01
         0            39      3.900000000000e+01
         0            40      4.000000000000e+01
         0            41      4.100000000000e+01
         0            42      4.200000000000e+01
         0            43      4.300000000000e+01
         0            44      4.400000000000e+01
         0            45      4.500000000000e+01
         0            46      4.600000000000e+01
         0            47      4.700000000000e+01
         0            48      4.800000000000e+01
         0            49      4.900000000000e+01
         0            50      5.000000000000e+01
         0            51      5.100000000000e+01
         0            52      5.200000000000e+01
         0            53      5.300000000000e+01
         0            54      5.400000000000e+01
         0            55      5.500000000000e+01
         0            56      5.600000000000e+01
         0            57      5.700000000000e+01
         0            58      5.800000000000e+01
         0            59      5.900000000000e+01
         0            60      6.000000000000e+01
         0            61      6.100000000000e+01
         0            62      6.200000000000e+01
         0            63      6.300000000000e+01
         0            64      6.400000000000e+01
         0            65      6.500000000000e+01
         0            66      6.600000000000e+01
         0            67      6.700000000000e+01
         0            68      6.800000000000e+01
         0            69      6.900000000000e+01
         0            70      7.000000000000e+01
         0            71      7.100000000000e+01
         0            72      7.200000000000e+01
         0            73      7.300000000000e+01
         0            74      7.400000000000e+01
         0            75      7.500000000000e+01
         0            76      7.600000000000e+01
         0            77      7.700000000000e+01
         0            78      7.800000000000e+01
         0            79      7.900000000000e+01
         0            80      8.000000000000e+01
         0            81      8.100000000000e+01
         0            82      8.200000000000e+01
         0            83      8.300000000000e+01
         0            84      8.400000000000e+01
         0            85      8.500000000000e+01
         0            86      8.600000000000e+01
         0            87      8.700000000000e+01
         0            88      8.800000000000e+01
         0            89      8.900000000000e+01
         0            90      9.000000000000e+01
         0            91      9.100000000000e+01
         0            92      9.200000000000e+01
         0            93      9.300000000000e+01
         0            94      9.400000000000e+01
         0            95      9.500000000000e+01
         0            96      9.600000000000e+01
         0            97      9.700000000000e+01
         0            98      9.800000000000e+01
         0            99      9.900000000000e+01

Traceback Mode value = 0
