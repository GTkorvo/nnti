#!/usr/bin/perl -w
#
# Once created by 'configure' this perl script can be run from anywhere!
#

use strict;

printf
  "\n*************************************************************************************".
  "\n*** Running Epetra/Thyra Operator/Vector adapter mpi tests (no news is good news) ***".
  "\n*************************************************************************************\n";

my $ierr = 0;
my $top_build_dir = remove_rel_paths("@abs_top_builddir@");

# Get the MPI command ending with the number of processors option (without the number of processors)
# See the documentation for the MPIGO_CMD option in the config file for test-harness.pls for what this looks like.
my $mpirun = $ENV{TRILINOS_TEST_HARNESS_MPIGO_COMMAND};
if(defined($mpirun)) {
    $mpirun .= " 3";
}
else {
  $mpirun = "";
  warn "\nWarning! TRILINOS_TEST_HARNESS_MPIGO_COMMAND was not defined in the environment so we will not be running with MPI!";
}

#
# Testing programs
#

my $test_dir = "${top_build_dir}/thyra/test";

run_test("$mpirun $test_dir/test_epetra_adapters.exe --max-flop-rate=1","--quiet","--verbose");

#
# Example programs
#

my $example_dir = "${top_build_dir}/thyra/example";

run_test("$mpirun $example_dir/sillyCgSolve_epetra.exe","--quiet","--verbose");
run_test("$mpirun $example_dir/sillyPowerMethod_epetra.exe","--quiet","--verbose");

if($ierr) {
  print "\n***\n*** Oh no, at least one of the Epetra/Thyra Operator/Vector Adapter mpi testing programs failed!\n***\n";
}
else {
  print "\n***\n*** Congratulations, All tests in the Epetra/Thyra Operator/Vector Adapter mpi collection seemed to have passed!\n***\n";
}

exit($ierr);

#
# Subroutines
#
sub run_test {
  my $cmnd = shift;
  my $quiet = shift;
  my $verbose = shift;
  my $cmnd_quiet = "$cmnd $quiet";
  print
    "\n****************************************************\n",
    "Running the following testing program in quiet mode:\n\n",
    "$cmnd_quiet ...\n";
  my $iresult = system($cmnd_quiet);
  $ierr += $iresult;
  print "\nThe above testing program passed!\n" if($iresult==0);
  print "\nThe above testing program failed!\n" if($iresult!=0);
  if($iresult!=0) {
    my $cmnd_verbose = "$cmnd $verbose";
    print
      "\n***************************************************\n",
      "Rerunning the this testing program in verbose mode:\n\n",
      "$cmnd_quiet ...\n";
    system($cmnd_verbose);
  }
}
#
sub remove_rel_paths {
	my $entry_in = shift;
	if ($entry_in=~/-L\.\./) {
		return $entry_in;
	}
	my @paths = split("/",$entry_in);
	my @new_paths;
	foreach( @paths ) {
		if( !($_=~/\.\./) ) {
			push @new_paths, $_;
		}
		else {
			pop @new_paths
		}
	}
	return join("/",@new_paths);
}
