dnl Process this file with autoconf 2.50 to produce a configure script
dnl for the CCA tutorial software installation.

#--------------------------------------------------------------------
#       Disable caching since it seems to get in the way
#       more times than it helps us.
#--------------------------------------------------------------------
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl

# Make sure we're us.
AC_INIT(include/Mesquite.hpp)

#------------------------------------------------------------------------------
# Directory where we keep the autoconf stuff and some HPC environment folklore.
#------------------------------------------------------------------------------
AC_CONFIG_AUX_DIR(./config_aux)

#------------------------------------------------------------------------------
# Standard stuff
#------------------------------------------------------------------------------
AC_CANONICAL_SYSTEM

#------------------------------------------------------------------------------
# Compile flag options -- need to do this *before* detecting the compiler
# otherwise cannot tell if user has CXXFLAGS defined already or if config
# set to a default value.
#------------------------------------------------------------------------------
AC_ARG_ENABLE( [release], [[
  --enable-release                (default), implies:
                                  --enable-compile-optimized
                                  --disable-debug-assertions]],
  [MSQ_DO_RELEASE="$enableval"], [MSQ_DO_RELEASE=""] )

AC_ARG_ENABLE( [debug], 
[[  --enable-debug                  Developer build, implies:
                                  --enable-debug-symbols
                                  --enable-debug-output=1,2
                                  --enable-trap-fpe]], 
  [MSQ_DO_DEBUG="$enableval"], [MSQ_DO_DEBUG=""] )

AC_ARG_ENABLE( [compile-optimized], [[
  --enable-compile-optimized      Compile optimized (-O2)]],
  [MSQ_DO_OPTIMIZE="$enableval"], [MSQ_DO_OPTIMIZE=""] )

AC_ARG_ENABLE( [debug-symbols], 
[[  --enable-debug-symbols          Compile with debug symbols (-g) ]],
  [MSQ_DEBUG_SYMBOLS="$enableval"], [MSQ_DEBUG_SYMBOLS=""] )

AC_ARG_ENABLE( [debug-assertions], 
[[  --disable-debug-assertions      Compile without asserts (-DNDEBUG) ]],
  [MSQ_DEBUG_ASSERTS="$enableval"], [MSQ_DEBUG_ASSERTS=""] )

AC_ARG_ENABLE( [debug-output], 
[[  --enable-debug-output[=n,m,...] Enable debug output.  Optionally specify 
                                  comma-separated list of flags to enable.  
                                  --enable-debug implies --enable-debug-output=1,2 ]],
  [MSQ_DEBUG_OUT="$enableval"], [MSQ_DEBUG_OUT=""] )

AC_ARG_ENABLE( [function-timers], 
[[    --enable-function-timers        Enable function timers]], 
  [MSQ_DO_TIMERS="$enableval"], [MSQ_DO_TIMERS="no"] )

AC_ARG_ENABLE( [trap-fpe], 
[[    --enable-trap-fpe               Enable trapping of floating point exceptions.
                                  Default is no unless --enable-debug.]], 
  [MSQ_TRAP_FPE="$enableval"], [MSQ_TRAP_FPE=""] )

# If neather debug or release is specified, enable release
if test -z "$MSQ_DO_RELEASE" -a -z "$MSQ_DO_DEBUG"; then
  MSQ_DO_RELEASE=yes
fi

# if release, then enable appropriate sub-options
if test "$MSQ_DO_RELEASE" = yes; then
  if test -z "$MSQ_DO_OPTIMIZE"; then
    MSQ_DO_OPTIMIZE=yes
  fi
  if test -z "$MSQ_DEBUG_ASSERTS"; then
    MSQ_DEBUG_ASSERTS=no
  fi
fi

# if debug, then enable appropriate sub-options
if test "$MSQ_DO_DEBUG" = "yes"; then
  if test -z "$MSQ_DEBUG_SYMBOLS"; then
    MSQ_DEBUG_SYMBOLS=yes
  fi
  if test -z "$MSQ_DEBUG_OUT"; then
    MSQ_DEBUG_OUT=yes
  fi
  if test -z "$MSQ_TRAP_FPE"; then
    MSQ_TRAP_FPE=yes
  fi
fi

# Construct compiler options from above configure options
if test "$MSQ_DO_OPTIMIZE" = "yes"; then
  CXXFLAGS="$CXXFLAGS -O2"
fi
if test "$MSQ_DEBUG_SYMBOLS" = "yes"; then
  CXXFLAGS="$CXXFLAGS -g"
fi
if test "$MSQ_DEBUG_ASSERTS" = "no"; then
  CXXFLAGS="$CXXFLAGS -DNDEBUG"
fi
if test -n "$MSQ_DEBUG_OUT"; then
  if test "$MSQ_DEBUG_OUT" = "yes"; then 
    CXXFLAGS="$CXXFLAGS -DMSQ_ENABLE_DEBUG"
  elif test "$MSQ_DEBUG_OUT" != "no"; then
    CXXFLAGS="$CXXFLAGS -DMSQ_ENABLE_DEBUG=$MSQ_DEBUG_OUT"
  fi
fi
if test "$MSQ_TRAP_FPE" = "yes"; then
  CXXFLAGS="$CXXFLAGS -DMSQ_TRAP_FPE"
fi
if test "$MSQ_DO_TIMERS" = "yes"; then
  CXXFLAGS="$CXXFLAGS -DMSQ_USE_FUNCTION_TIMERS"
fi
  

#------------------------------------------------------------------------------
# Check for required executables
#------------------------------------------------------------------------------
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_CC( [cc gcc cl egcs] )
AC_PROG_CXXCPP
AC_PROG_CXX( [CC aCC g++ c++ gpp cxx cc++ cl FCC KCC RCC xlC_r xlC] )
MSQ_CHK_PROG_WITH(MAKEDEPEND, makedepend, /bin/true, [[
  --with-makedepend=PROG  Full path to C/C++ dependency generator
  --without-makedepend    Do not generate dependency information during build]], 
 [/usr/bin/X11:/usr/openwin/bin])
MSQ_CHK_PROG_WITH(DOXYGEN, doxygen, no, [[
  --with-doxygen[=PROG]   Optionally specify doxygen program.
  --without-doxygen       Disable generation of documentation]])
  

#-----------------------------------------------------------------------------
# Check for required headers
#-----------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h strings.h sys/file.h sys/time.h unistd.h)
AC_CHECK_HEADER(   ieeefp.h, AC_DEFINE(HAVE_IEEEFP_H,  [1], [System has ieeefp.h]  ))
AC_CHECK_HEADER(   stdint.h, AC_DEFINE(HAVE_STDINT_H,  [1], [System has stdint.h]  ))
AC_CHECK_HEADER( inttypes.h, AC_DEFINE(HAVE_INTTYPES_H,[1], [System has inttypes.h]))

#-----------------------------------------------------------------------------
# Check for required functions
#-----------------------------------------------------------------------------
AC_CHECK_FUNCS( vsnprintf, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_VSNPRINTF"] )
AC_CHECK_FUNCS( vsprintf, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_VSPRINTF"] )
AC_CHECK_FUNCS( clock, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_CLOCK"] )
AC_CHECK_FUNCS( times, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_TIMES"] )
LIBS=-lm
AC_CHECK_FUNCS( cbrt,  [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_CBRT"] )

# Use C++ compiler because C allows undefined functions, so these
# checks don't achive much if compiled as C.  Also, if C and C++
# compilers are mis-matched, what works for one may not work for the
# other and the C++ one is what is actually used for this in Mesquite.
AC_LANG_PUSH(C++)
AC_MSG_CHECKING( for fpsetmask );
AC_TRY_COMPILE( [#include <ieeefp.h>],
                [fpsetmask(FP_X_INV|FP_X_OFL|FP_X_DZ);],
                [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_FPSETMASK"
                 AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no)] )
AC_MSG_CHECKING( for feenableexcept );
AC_TRY_COMPILE( [#define _GNU_SOURCE
                 #include <fenv.h>  ],
                [feenableexcept(FE_DIVBYZERO|FE_INVALID|FE_OVERFLOW);],
                [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_FEENABLEEXCEPT"
                 AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no)] )
AC_LANG_POP(C++)

AC_SUBST(MSQ_FUNC_DEFS)

#-----------------------------------------------------------------------------
# Check C++ environment
#-----------------------------------------------------------------------------
MSQ_CPLUSPLUS_FUNC
MSQ_CPLUSPLUS_HEADERS

#-----------------------------------------------------------------------------
# Try to find an archiver that correctly handles C++ templates
#-----------------------------------------------------------------------------
CXX_ARCHIVER=
AC_ARG_WITH( archiver, [
  --with-archiver=ARG     Specify tool for creating static libraries], 
 [
 MSQ_TEST_ARCHIVER( [$withval], 
  [ CXX_ARCHIVER=$withval; AC_SUBST(CXX_ARCHIVER) ],
  [AC_MSG_ERROR(["$with_archiver" : not a valid archiver.])]
  ) ],
  [MSQ_CPLUSPLUS_ARCHIVER ]
)
AC_SUBST(CXX_ARCHIVER)

#------------------------------------------------------------------------------
# Some GCC-specific stuff
#------------------------------------------------------------------------------
if test "${GXX}" = "yes" ; then
    CXXFLAGS="$CXXFLAGS -Wall -Wconversion"
fi
if test -z "$no_pipe"; then
if test -n "$GXX"; then
  AC_MSG_CHECKING([if c++ compiler understands -pipe])
  OLDCXX="$CXX"
  CXX="$CXX -pipe"
  AC_TRY_COMPILE(,,
    AC_MSG_RESULT(yes),
    CXX="$OLDCXX"
    AC_MSG_RESULT(no))
fi
fi

#------------------------------------------------------------------------------
# Other build options
#------------------------------------------------------------------------------

AC_ARG_WITH(exodus,[[
  --with-exodus[=DIR]     Enable exodusII support and specifiy directory
  --without-exodus        Disable exodusII support (default)]],
  [EXODUS_ARG=${withval}],[EXODUS_ARG=no])

AC_ARG_WITH(netcdf,[[
  --with-netcdf[=DIR]     ExodusII requires NetCDF - defaults to values for 
                          --with-exodus
  --without-netcdf        Skip NetCDF check]],
  [NETCDF_ARG=$withval], [NETCDF_ARG=])

AC_ARG_WITH(babel,
[[  --with-babel[=DIR]      Specify directory where Babel exectuable and 
                          SIDL headers/libs are installed.
  --without-babel         Disable use of Babel/SIDL]],
  [BABEL_ARG=${withval}],[BABEL_ARG=])

AC_ARG_ENABLE( [tstt],
[[  --enable-tstt           Compile glue code for interfacing with TSTT implemenations.
  --disable-tstt          Disable TSTT mesh glue code (DEFAULT).]],
  [ TSTT_IFACE_ARG=${enableval}], [TSTT_IFACE_ARG=] )

AC_ARG_WITH(tstt-mesh,
 [AC_HELP_STRING([[--with-tstt-mesh=DIR]],
 [Specify directory containing TSTT mesh implementation to use for testing.])],
 [WITH_TSTT_MESH_ARG=$withval],[WITH_TSTT_MESH_ARG=no])
 
AC_ARG_WITH(tstt-base,
 [AC_HELP_STRING([[--with-tstt-base=DIR]],
 [Specify directory containing TSTT core implementation for testing (default is tstt-mesh dir.)])],
 [WITH_TSTT_BASE_ARG=$withval],[WITH_TSTT_BASE_ARG="$WITH_TSTT_MESH_ARG"])

AC_ARG_WITH(cppunit,[[
  --with-cppunit[=DIR]    Specify directory where CppUnit is installed.
  --without-cppunit       Disable CppUnit tests]],
  [CPPUNIT_ARG=${withval}], [CPPUNIT_ARG=])


#-------------------------------------------------------------------------------
# Configure different options
#-------------------------------------------------------------------------------

# Exodus configuration
EXODUS_DIR=
EXODUS_CFLAGS=
EXODUS_LDFLAGS=
if test "$EXODUS_ARG" = "yes"; then

 AC_CHECK_HEADER( [exodusII.h], 
                  [EXODUS_CFLAGS="-DMSQ_USING_EXODUS"]
                  [AC_MSG_ERROR("exodusII.h not found")]
                )
 AC_CHECK_LIB( [exoIIv2c], 
               [ex_open],
               [EXODUS_LDFLAGS="-lexoIIv2c"],
               [AC_MSG_WARN("No ExodusII library")]
             )
  
elif test -n "$EXODUS_ARG" -a "$EXODUS_ARG" != "no"; then

  EXODUS_DIR="$EXODUS_ARG" 
  AC_CHECK_FILE( [${EXODUS_DIR}/include/exodusII.h], 
                 [EXODUS_CFLAGS='-I$(EXODUS_DIR)/include -DMSQ_USING_EXODUS'], 
                 [AC_MSG_ERROR("${EXODUS_DIR}/include/exodusII.h does not exist")] )
  AC_CHECK_FILE( [${EXODUS_DIR}/lib/libexoIIv2c.a], 
                 [EXODUS_LDFLAGS='-L$(EXODUS_DIR)/lib -lexoIIv2c'], 
                 [AC_MSG_WARN("${EXODUS_DIR}/lib/libexoIIv2c.a does not exist")] )
                 
fi

# NetCDF configuration
NETCDF_DIR=
NETCDF_INC=
NETCDF_LNK=
NETCDF_CXX_LNK=
HAVE_NETCDF_H=no
if test -z "$NETCDF_ARG"; then
  AC_CHECK_HEADER( [netcdf.h], [HAVE_NETCDF_H=yes], [HAVE_NETCDF_H=no] )
  AC_CHECK_LIB( [netcdf], 
                [nc_open],
                [NETCDF_LNK=-lnetcdf] )
elif test "$NETCDF_ARG" != "no"; then
  NETCDF_DIR="$NETCDF_ARG"
  AC_CHECK_FILE( [${NETCDF_DIR}/inc/netcdf.h],
                 [NETCDF_INC='-I$(NETCDF_DIR)/inc'; HAVE_NETCDF_H=yes],
                 [HAVE_NETCDF_H=no] )
  AC_CHECK_FILE( [${NETCDF_DIR}/libnetcdf.a],
                 [NETCDF_LNK='-L$(NETCDF_DIR) -lnetcdf'] )
fi


# Configure babel
BABEL=
SIDL_DIR=
SIDL_INC=
SIDL_LNK=
HAVE_SIDL_H=no
if test -z "$BABEL_ARG"; then
  AC_CHECK_HEADER( [sidl.h], [HAVE_SIDL_H=yes], [HAVE_SIDL_H=no] )
  AC_CHECK_LIB( [sidl], [sidl_long__array_copy], [SIDL_LNK="-lsidl"])
  AC_CHECK_PROG( [BABEL], [babel], [babel] )
elif test "$BABEL_ARG" = "yes"; then
  AC_CHECK_HEADER( [sidl.h], [HAVE_SIDL_H=yes], [AC_MSG_ERROR("sidl.h not found")])
  AC_CHECK_LIB( [sidl], [sidl_long__array_copy], [SIDL_LNK="-lsidl"], [AC_MSG_ERROR("No SIDL library")])
  AC_CHECK_PROG( [BABEL], [babel], [babel], [] )
  if test -z "$BABEL"; then
    AC_MSG_ERROR("Babel not found")
  fi
elif test "$BABEL_ARG" != "no"; then
  SIDL_DIR="$BABEL_ARG"
  AC_CHECK_FILE( [$SIDL_DIR/include/sidl.h], 
     [SIDL_INC='-I$(SIDL_DIR)/include'; HAVE_SIDL_H=yes], 
     [AC_MSG_ERROR("$BABEL_ARG/include/sidl.h does not exist")] )
  AC_CHECK_FILE( [$SIDL_DIR/lib/libsidl.so], 
     [SIDL_LNK='-L$(SIDL_DIR)/lib -lsidl'], 
     [AC_CHECK_FILE( [$SIDL_DIR/lib/libsidl.a], 
        [SIDL_LNK='-L$(SIDL_DIR)/lib -lsidl'], 
        [AC_MSG_ERROR("SIDL library not found")] )])
  AC_CHECK_PROG( BABEL, babel, [$SIDL_DIR/bin/babel], [], [$SIDL_DIR/bin] )
  if test -z "$BABEL"; then
    AC_MSG_ERROR("Babel not found")
  fi
fi


# Begin TSTT Mesh Implementations

MSQ_TSTT_BASE_IMPL=no
MSQ_TSTT_BASE_DEFS=
if test "$WITH_TSTT_BASE_ARG" = "yes"; then
  AC_MSG_ERROR("Server location not specified for TSTT core (base) server");
elif test "$WITH_TSTT_BASE_ARG" != "no"; then
  MSQ_TSTT_BASE_DEFS="${WITH_TSTT_BASE_ARG}/TSTTB-Defs.inc"
  AC_CHECK_FILE( ["$MSQ_TSTT_BASE_DEFS"],
                 [MSQ_TSTT_BASE_IMPL=yes],
                 [AC_MSG_ERROR([Invalid TSTTB implementation spec.])] )
fi

MSQ_TSTT_MESH_IMPL=no
MSQ_TSTT_MESH_DEFS=
if test "$WITH_TSTT_MESH_ARG" = "yes"; then
  AC_MSG_ERROR("Server location not specified for TSTT mesh server");
elif test "$WITH_TSTT_MESH_ARG" != "no"; then
  if test $MSQ_TSTT_BASE_IMPL != yes; then
    AC_MSG_ERROR([Cannot test TSTT mesh implementation without TSTT core (base) implementation.  Try --with-tstt-base])
  fi
  MSQ_TSTT_MESH_DEFS="${WITH_TSTT_MESH_ARG}/TSTTM-Defs.inc"
  AC_CHECK_FILE( ["$MSQ_TSTT_MESH_DEFS"],
                 [MSQ_TSTT_MESH_IMPL=yes],
                 [AC_MSG_ERROR([Invalid TSTTM implementation spec.])] )
  # If enabling TSTT Mesh testing, automatically enable TSTT Mesh support
  MSQ_TSTT_MESH=yes
fi

# Enable TSTT support?
if test "$TSTT_IFACE_ARG" = "yes"; then
  MSQ_TSTT_MESH=yes
  MSQ_TSTT_GEOM=yes
else
  MSQ_TSTT_MESH=no
  MSQ_TSTT_GEOM=no
fi

# TSTT support requires babel
if test $MSQ_TSTT_MESH = yes -o $MSQ_TSTT_GEOM = yes; then
  if test "$HAVE_SIDL_H" = "no"; then
    AC_MSG_ERROR("Babel is required for TSTT Mesh support.  Try --with-babel=...")
  fi
fi  


# TSTT testing code requires SIDL library
# if test -n "$TSTT_MESH_IMPL" -a -z "$SIDL_LNK"; then
#   AC_MSG_ERROR("TSTT testing requires SIDL library.  Try --with-babel=...")
# fi


# CPPUnit
CPPUNIT_DIR=
CPPUNIT_INC=
CPPUNIT_LNK=
WITH_CPPUNIT=no
AC_LANG_PUSH(C++)
if test -z "$CPPUNIT_ARG"; then

  AC_CHECK_HEADER( [cppunit/Test.h], [WITH_CPPUNIT=yes], [WITH_CPPUNIT=no])
  AC_CHECK_LIB( [cppunit], [main], [WITH_CPPUNIT=yes; CPPUNIT_LNK="-lcppunit"], [WITH_CPPUNIT=no] )
  if test "$HAVE_CPPUNIT" != "yes"; then
    unset ac_cv_lib_cppunit_main
    AC_CHECK_LIB( [cppunit], [main], [WITH_CPPUNIT=yes; CPPUNIT_LNK="-lcppunit -ldl"], [], [-ldl] )
  fi
  if test "$WITH_CPPUNIT" != "yes"; then
    AC_MSG_WARN("CppUnit not found")
  fi  

elif test "$CPPUNIT_ARG" = "yes"; then

  WITH_CPPUNIT=yes
  AC_CHECK_HEADER( [cppunit/Test.h], [], [AC_MSG_ERROR("cppunit/Test.h not found")])
  AC_CHECK_LIB( [cppunit], [main], [CPPUNIT_LNK=-lcppunit], [
    unset ac_cv_lib_cppunit_main
    AC_CHECK_LIB( [cppunit], [main], [CPPUNIT_LNK="-lcppunit -ldl"], [AC_MSG_ERROR("No libcppunit")], [-ldl])
  ])

elif test "$CPPUNIT_ARG" != "no"; then
  
  WITH_CPPUNIT=yes
  CPPUNIT_DIR="$CPPUNIT_ARG"
  
  CPPUNIT_LNK='-L$(CPPUNIT_DIR)/lib -lcppunit'
  
  AC_CHECK_FILE( [${CPPUNIT_ARG}/include/cppunit/Test.h], 
     [CPPUNIT_INC='-I$(CPPUNIT_DIR)/include'], 
     [AC_MSG_ERROR("${CPPUNIT_ARG}/include/cppunit/Test.h does not exist")] )
     
  AC_MSG_CHECKING("Checking if cppunit requires -ldl");
  LIBS="-L${CPPUNIT_ARG}/lib -lcppunit"
  AC_TRY_LINK( [], [], [CPPUNIT_LNK='-L$(CPPUNIT_DIR)/lib -lcppunit'], [
    LIBS="-L${CPPUNIT_ARG}/lib -lcppunit -ldl"
    AC_TRY_LINK( [], [], [CPPUNIT_LNK='-L$(CPPUNIT_DIR)/lib -lcppunit -ldl' ], 
     [AC_MSG_ERROR("Cannot link cppunit")] 
    )
  ])
  AC_MSG_RESULT("done")

fi
AC_LANG_POP(C++)



#------------------------------------------------------------------------------
# Set up source directory
#------------------------------------------------------------------------------
MSQ_BASE_DIR=`pwd`
AC_SUBST(MSQ_BASE_DIR)
touch make.dependencies
for dir in includeLinks obj lib; do
  if test ! -d $dir; then
    mkdir $dir
  fi
done


#------------------------------------------------------------------------------
# The End
#------------------------------------------------------------------------------

AC_SUBST(BABEL)
AC_SUBST(CPPUNIT_DIR)
AC_SUBST(CPPUNIT_INC)
AC_SUBST(CPPUNIT_LNK)
AC_SUBST(EXODUS_CFLAGS)
AC_SUBST(EXODUS_DIR)
AC_SUBST(EXODUS_LDFLAGS)
AC_SUBST(NETCDF_DIR)
AC_SUBST(NETCDF_INC)
AC_SUBST(NETCDF_LNK)
AC_SUBST(MSQ_TSTT_GEOM)
AC_SUBST(MSQ_TSTT_MESH)
AC_SUBST(MSQ_TSTT_BASE_IMPL)
AC_SUBST(MSQ_TSTT_MESH_IMPL)
AC_SUBST(MSQ_TSTT_BASE_DEFS)
AC_SUBST(MSQ_TSTT_MESH_DEFS)
AC_SUBST(SIDL_DIR)
AC_SUBST(SIDL_INC)
AC_SUBST(SIDL_LNK)

AC_CONFIG_HEADERS(include/mesquite_config.h)
AC_OUTPUT(Makefile.customize)
AC_OUTPUT(testSuite/env)

