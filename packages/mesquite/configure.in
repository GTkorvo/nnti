dnl Process this file with autoconf 2.50 to produce a configure script
dnl for the CCA tutorial software installation.

#--------------------------------------------------------------------
#       Disable caching since it seems to get in the way
#       more times than it helps us.
#--------------------------------------------------------------------
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl

# Make sure we're us.
AC_INIT(include/Mesquite.hpp)

#------------------------------------------------------------------------------
# Directory where we keep the autoconf stuff and some HPC environment folklore.
#------------------------------------------------------------------------------
AC_CONFIG_AUX_DIR(./config_aux)

#------------------------------------------------------------------------------
# Standard stuff
#------------------------------------------------------------------------------
AC_CANONICAL_SYSTEM

#------------------------------------------------------------------------------
# Compile flag options -- need to do this *before* detecting the compiler
# otherwise cannot tell if user has CXXFLAGS defined already or if config
# set to a default value.
#------------------------------------------------------------------------------
AC_ARG_ENABLE( [release], [[
  --enable-release                Release build (defualt if other options 
                                  don't override)]],
  [MSQ_DO_RELEASE="$enableval"], [MSQ_DO_RELEASE=""] )
AC_ARG_ENABLE( [debug], [[
  --enable-debug                  Debug build]], 
  [MSQ_DO_DEBUG="$enableval"], [MSQ_DO_DEBUG="no"] )

AC_ARG_ENABLE( [debug-output], [[
  --enable-debug-output[=n,m,...] Enable debug output.  Optionally specify 
                                  comma-separated list of flags to enable.  
                                  --enable-debug implies --enable-debug-output=1,2
  --disable-debug-output          Override default enable implied by --enable-debug]],
  [MSQ_DEBUG_OUT="$enableval"], [MSQ_DEBUG_OUT=""] )

AC_ARG_ENABLE( [function-timers], [[  
  --enable-function-timers        Enable function timers]], 
  [MSQ_DO_TIMERS="$enableval"], [MSQ_DO_TIMERS="no"] )

AC_ARG_ENABLE( [trap-fpe], [[  
  --enable-trap-fpe               Enable trapping of floating point exceptions.
                                  Default is no unless --enable-debug.]], 
  [MSQ_TRAP_FPE="$enableval"], [MSQ_TRAP_FPE=""] )

if test -z "$MSQ_DO_RELEASE"; then
  # do default unless CXXFLAGS or -debug have been specified
  if test -z "$CXXFLAGS" -a "$MSQ_DO_DEBUG" = "no"; then
    CXXFLAGS="-O2"
  fi
elif test "$MSQ_DO_RELEASE" != "no"; then
  CXXFLAGS="$CXXFLAGS -O2"
fi

if test "$MSQ_DO_DEBUG" != "no"; then
  CXXFLAGS="$CXXFLAGS -g"
  if test -z "$MSQ_DEBUG_OUT"; then
    CXXFLAGS="$CXXFLAGS -DMSQ_ENABLE_DEBUG=1,2"
  fi
  if test -z "$MSQ_TRAP_FPE"; then
    MSQ_TRAP_FPE="yes"
  fi
fi

if test -n "$MSQ_DEBUG_OUT"; then
  if test "$MSQ_DEBUG_OUT" = "yes"; then 
    CXXFLAGS="$CXXFLAGS -DMSQ_ENABLE_DEBUG"
  elif test "$MSQ_DEBUG_OUT" != "no"; then
    CXXFLAGS="$CXXFLAGS -DMSQ_ENABLE_DEBUG=$MSQ_DEBUG_OUT"
  fi
fi

if test "$MSQ_TRAP_FPE" = "yes"; then
  CXXFLAGS="$CXXFLAGS -DMSQ_TRAP_FPE"
fi

if test "$MSQ_DO_TIMERS" = "yes"; then
  CXXFLAGS="$CXXFLAGS -DMSQ_USE_FUNCTION_TIMERS"
fi
  

#------------------------------------------------------------------------------
# Check for required executables
#------------------------------------------------------------------------------
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_CC( [cc gcc cl egcs] )
AC_PROG_CXXCPP
AC_PROG_CXX( [CC aCC g++ c++ gpp cxx cc++ cl FCC KCC RCC xlC_r xlC] )
MSQ_CHK_PROG_WITH(MAKEDEPEND, makedepend, /bin/true, [[
  --with-makedpend=PROG   Full path to C/C++ dependency generator
  --without-makedepend    Do not generate dependency information during build]], 
 [/usr/bin/X11:/usr/openwin/bin])
MSQ_CHK_PROG_WITH(DOXYGEN, doxygen, no, [[
  --with-doxygen[=PROG]   Optionally specify doxygen program.
  --without-doxygen       Disable generation of documentation]])
  

#-----------------------------------------------------------------------------
# Check for required headers
#-----------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h strings.h sys/file.h sys/time.h unistd.h)
HAVE_IEEEFP=
AC_CHECK_HEADER( ieeefp.h, HAVE_IEEEFP=-DHAVE_IEEEFP )
AC_SUBST(HAVE_IEEEFP)

#-----------------------------------------------------------------------------
# Check for required functions
#-----------------------------------------------------------------------------
AC_CHECK_FUNCS( vsnprintf, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_VSNPRINTF"] )
AC_CHECK_FUNCS( vsprintf, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_VSPRINTF"] )
AC_CHECK_FUNCS( clock, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_CLOCK"] )
AC_CHECK_FUNCS( times, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_TIMES"] )

# Use C++ compiler because C allows undefined functions, so these
# checks don't achive much if compiled as C.  Also, if C and C++
# compilers are mis-matched, what works for one may not work for the
# other and the C++ one is what is actually used for this in Mesquite.
AC_LANG_PUSH(C++)
AC_MSG_CHECKING( for fpsetmask );
AC_TRY_COMPILE( [#include <ieeefp.h>],
                [fpsetmask(FP_X_INV|FP_X_OFL|FP_X_DZ);],
                [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_FPSETMASK"
                 AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no)] )
AC_MSG_CHECKING( for feenableexcept );
AC_TRY_COMPILE( [#define _GNU_SOURCE
                 #include <fenv.h>  ],
                [feenableexcept(FE_DIVBYZERO|FE_INVALID|FE_OVERFLOW);],
                [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_FEENABLEEXCEPT"
                 AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no)] )
AC_LANG_POP(C++)

AC_SUBST(MSQ_FUNC_DEFS)

#-----------------------------------------------------------------------------
# Check C++ environment
#-----------------------------------------------------------------------------
MSQ_CPLUSPLUS_FUNC
MSQ_CPLUSPLUS_HEADERS

#-----------------------------------------------------------------------------
# Try to find an archiver that correctly handles C++ templates
#-----------------------------------------------------------------------------
CXX_ARCHIVER=
AC_ARG_WITH( archiver, [
  --with-archiver=ARG     Specify tool for creating static libraries], 
 [
 MSQ_TEST_ARCHIVER( [$withval], 
  [ CXX_ARCHIVER=$withval; AC_SUBST(CXX_ARCHIVER) ],
  [AC_MSG_ERROR(["$with_archiver" : not a valid archiver.])]
  ) ],
  [MSQ_CPLUSPLUS_ARCHIVER ]
)
AC_SUBST(CXX_ARCHIVER)

#------------------------------------------------------------------------------
# Some GCC-specific stuff
#------------------------------------------------------------------------------
if test "${GCC}" = "yes" ; then
    CXXFLAGS="$CXXFLAGS -Wall -Wconversion"
fi
if test -z "$no_pipe"; then
if test -n "$GCC"; then
  AC_MSG_CHECKING([if c++ compiler understands -pipe])
  OLDCXX="$CXX"
  CXX="$CXX -pipe"
  AC_TRY_COMPILE(,,
    AC_MSG_RESULT(yes),
    CXX="$OLDCXX"
    AC_MSG_RESULT(no))
fi
fi

#------------------------------------------------------------------------------
# Other build options
#------------------------------------------------------------------------------

AC_ARG_WITH(exodus,[[
  --with-exodus[=DIR]     Enable exodusII support and specifiy directory
  --without-exodus        Disable exodusII support (default)]],
  [EXODUS_ARG=${withval}],[EXODUS_ARG=no])

AC_ARG_WITH(netcdf,[[
  --with-netcdf[=DIR]     ExodusII requires NetCDF - defaults to values for 
                          --with-exodus
  --without-netcdf        Skip NetCDF check]],
  [NETCDF_ARG=$withval], [NETCDF_ARG=])

AC_ARG_WITH(babel,
[[  --with-babel[=DIR]      Specify directory where Babel exectuable and 
                          SIDL headers/libs are installed.
  --without-babel         Disable use of Babel/SIDL]],
  [BABEL_ARG=${withval}],[BABEL_ARG=])

AC_ARG_ENABLE( [tstt-mesh],
[[  --enable-tstt-mesh      Compile glue code for interfacing with TSTT 
                          mesh implemenations.
  --disable-tstt-mesh     Disable TSTT mesh glue code (DEFAULT).]],
  [ TSTT_MESH_ARG=${enableval}], [TSTT_MESH_ARG=] )

AC_ARG_ENABLE( [tstt-geom],
[[  --enable-tstt-geom      Compile glue code for interfacing with TSTT 
                          geom implemenations.
  --disable-tstt-geom     Disable TSTT geom glue code (DEFAULT).]],
  [ TSTT_GEOM_ARG=${enableval}], [TSTT_GEOM_ARG=] )

AC_ARG_WITH(tstt-mesh,
[[  --with-tstt-mesh=[AOMD|MOAB|OVERTURE] Specify an mesh database implementing 
                          the TSTT interface for use in testing.  This is not
                          required for building Mesquite.  It is also necessary
                          to specify the location of the corresponding TSTT 
                          server with one of "--with-aomd=DIR", 
                          "--with-moab=DIR" or "--with-overture=DIR".  If no
                          parameter is specified, will default to the first
                          option for which the location has been specified.
  --without-tstt-server   Do not build tests that require TSTT. ]],
[ WITH_TSTT_MESH_ARG=$withval ], [ WITH_TSTT_MESH_ARG= ] )

AC_ARG_WITH(aomd, 
[[  --with-aomd=DIR         Root directory of AOMD installation.  Required
                          for AOMD test, may be used for TSTT test ]] ,
  [AOMD_ARG=${withval}],[AOMD_ARG=])
  
AC_ARG_WITH(moab, 
[[  --with-moab=DIR         Root directory of MOAB installation.  Required
                          for MDB test, may be used for TSTT test ]] ,
  [MOAB_ARG=${withval}],[MOAB_ARG=])

AC_ARG_WITH(overture, 
[[  
  --with-overture=DIR     Root directory of Overture installation.  Required
                          for OVERTURE test, may be used for TSTT test ]] ,
  [OVERTURE_ARG=${withval}],[OVERTURE_ARG=])

AC_ARG_WITH(hdf5,
[[  --with-hdf5=[DIR]       Specify path where HDF5 is installed.  libhdf5 may
                          be required by MOAB. ]],
  [HDF5_ARG=${withval}],[HDF5_ARG=])

AC_ARG_WITH(cppunit,[[
  --with-cppunit[=DIR]    Specify directory where CppUnit is installed.
  --without-cppunit       Disable CppUnit tests]],
  [CPPUNIT_ARG=${withval}], [CPPUNIT_ARG=no])


#-------------------------------------------------------------------------------
# Configure different options
#-------------------------------------------------------------------------------

# Exodus configuration
EXODUS_DIR=
EXODUS_CFLAGS=
EXODUS_LDFLAGS=
if test "$EXODUS_ARG" == "yes"; then

 AC_CHECK_HEADER( [exodusII.h], 
                  [EXODUS_CFLAGS="-DMSQ_USING_EXODUS"]
                  [AC_MSG_ERROR("exodusII.h not found")]
                )
 AC_CHECK_LIB( [exoIIv2c], 
               [ex_open],
               [EXODUS_LDFLAGS="-lexoIIv2c"],
               [AC_MSG_WARN("No ExodusII library")]
             )
  
elif test -n "$EXODUS_ARG" -a "$EXODUS_ARG" != "no"; then

  EXODUS_DIR="$EXODUS_ARG" 
  AC_CHECK_FILE( [${EXODUS_DIR}/include/exodusII.h], 
                 [EXODUS_CFLAGS='-I$(EXODUS_DIR)/include -DMSQ_USING_EXODUS'], 
                 [AC_MSG_ERROR("${EXODUS_DIR}/include/exodusII.h does not exist")] )
  AC_CHECK_FILE( [${EXODUS_DIR}/lib/libexoIIv2c.a], 
                 [EXODUS_LDFLAGS='-L$(EXODUS_DIR)/lib -lexoIIv2c'], 
                 [AC_MSG_WARN("${EXODUS_DIR}/lib/libexoIIv2c.a does not exist")] )
                 
fi

# NetCDF configuration
NETCDF_DIR=
NETCDF_INC=
NETCDF_LNK=
NETCDF_CXX_LNK=
HAVE_NETCDF_H=no
if test -z "$NETCDF_ARG"; then
  AC_CHECK_HEADER( [netcdf.h], [HAVE_NETCDF_H=yes], [HAVE_NETCDF_H=no] )
  AC_CHECK_LIB( [netcdf], 
                [nc_open],
                [NETCDF_LNK=-lnetcdf] )
  AC_LANG_PUSH(C++)
  AC_CHECK_LIB( [netcdf_c++], 
                [main],
                [NETCDF_CXX_LNK=-lnetcdf_c++],
                [],
                [-lnetcdf] )
  AC_LANG_POP(C++)
elif test "$NETCDF_ARG" != "no"; then
  NETCDF_DIR="$NETCDF_ARG"
  AC_CHECK_FILE( [${NETCDF_DIR}/inc/netcdf.h],
                 [NETCDF_INC='-I$(NETCDF_DIR)/inc'; HAVE_NETCDF_H=yes],
                 [HAVE_NETCDF_H=no] )
  AC_CHECK_FILE( [${NETCDF_DIR}/libnetcdf.a],
                 [NETCDF_LNK='-L$(NETCDF_DIR) -lnetcdf'] )
  AC_CHECK_FILE( [${NETCDF_DIR}/libnetcdf_c++.a],
                 [NETCDF_CXX_LNK='-L$(NETCDF_DIR) -lnetcdf_c++ -lnetcdf'] )
fi


# HDF5 Configuration
HDF5_DIR=
HDF5_LNK=
if test -z "$HDF5_ARG" -o "$HDF5_ARG" == "yes"; then
  AC_CHECK_LIB( [hdf5], H5Fopen, [HDF5_LNK=-lhdf5] )
  if test "$HDF5_ARG" == "yes" -a -z "$HDF5_LNK"; then
    AC_MSG_ERROR("HDF5 library not found.")
  fi
elif test "$HDF5_ARG" != "no"; then
  HDF5_DIR="$HDF5_ARG"
  AC_CHECK_FILE( [${HDF5_DIR}/lib/libhdf5.so],
                 [HDF5_LNK='-L$(HDF5_DIR)/lib -lhdf5'] )
  AC_CHECK_FILE( [${HDF5_DIR}/lib/libhdf5.a],
                 [HDF5_LNK='-L$(HDF5_DIR)/lib -lhdf5'] )
  if test -z "$HDF5_LNK"; then
    AC_MSG_ERROR("HDF5 library not found.")
  fi
fi


# Begin TSTT Mesh Implementations

TSTT_MESH_IMPL=

OVERTURE_DIR=
OVERTURE_LNK=
OVERTURE_INC=
if test "$OVERTURE_ARG" == "yes"; then
  AC_MSG_ERROR( "Argument required for --with-overture" )
elif test -n "$OVERTURE_ARG" -a  "$OVERTURE_ARG" != "yes"; then
  OVERTURE_DIR="$OVERTURE_ARG"
  OVERTURE_LNK='-L${OVERTURE_DIR) -loverture'
  OVERTURE_INC='-I${OVERTURE_DIR)'
  TSTT_MESH_IMPL=OVERTURE
fi

MOAB_DIR=
MOAB_LNK=
MOAB_INC=
if test "$MOAB_ARG" == "yes"; then
  AC_MSG_ERROR( "Argument required for --with-moab" )
elif test -n "$MOAB_ARG" -a  "$MOAB_ARG" != "no"; then
  MOAB_DIR="$MOAB_ARG"
  MOAB_INC='-I$(MOAB_DIR) -I$(MOAB_DIR)/TSTT -I$(MOAB_DIR)/TSTT/server'
  MOAB_LNK='-L$(MOAB_DIR) -lMOAB -L$(MOAB_DIR)/TSTT -lMOABserver -lTSTTserver $(NETCDF_CXX_LNK) $(HDF5_LNK)'
  TSTT_MESH_IMPL=MOAB
  
  if test -z "NETCDF_CXX_LNK"; then
    AC_MSG_WARN("MOAB may require NETCDF.  Try --with-netcdf")
  fi
  
  if test -z "HDF5_LNK"; then
    AC_MSG_WARN("MOAB may require HDF5.  Try --with-hdf5")
  fi
fi

AOMD_DIR=
AOMD_LNK=
AOMD_INC=
if test "$AOMD_ARG" = "yes"; then
  AC_MSG_ERROR( "Argument required for --with-aomd" )
elif test -n "$AOMD_ARG" -a "$AOMD_ARG" != "no"; then
  AOMD_DIR="$AOMD_ARG"
  AOMD_LNK='-L$(AOMD_DIR)/lib -laomd'
  AOMD_INC='-I$(AOMD_DIR)/include'
  TSTT_MESH_IMPL=AOMD
fi


if test "$WITH_TSTT_MESH_ARG" == "no"; then
  TSTT_MESH_IMPL=
elif test "$WITH_TSTT_MESH_ARG" == "yes"; then
  if test -z "$TSTT_MESH_IMPL"; then
     AC_MSG_ERROR("Server location not specified for TSTT mesh server");
  fi 
elif test -n "$WITH_TSTT_MESH_ARG"; then
  TSTT_MESH_IMPL="$WITH_TSTT_MESH_ARG"

  TSTT_DIR_TMP=
  case "$WITH_TSTT_MESH_ARG" in
    MOAB|moab)
      TSTT_MESH_IMPL=MOAB
      TSTT_DIR_TMP=${MOAB_DIR}
      ;;
    AOMD|aomd)
      TSTT_MESH_IMPL=AOMD
      TSTT_DIR_TMP=${AOMD_DIR}
      ;;
    OVERTURE|overture)
      TSTT_MESH_IMPL=OVERTURE
      TSTT_DIR_TMP=${OVERTURE_DIR}
      ;;
  esac

  if test -z "${TSTT_DIR_TMP}"; then
    AC_MSG_ERROR("Server location not specified for $WITH_TSTT_MESH_ARG TSTT mesh server");
  fi
fi

# Assume if a TSTT Mesh implementation was specified for testing
# that we want TSTT Mesh support enabled.
if test -n "$TSTT_MESH_IMPL"; then
  if test "$TSTT_MESH_ARG" == "no"; then
    AC_MSG_ERROR( "Nonsensical specification of TSTT Mesh Implementation with TSTT support explicitly disabled" )
  elif test -z "$TSTT_MESH_ARG"; then
    TSTT_MESH_ARG=yes
  fi
fi


# Configure babel
BABEL=
SIDL_DIR=
SIDL_INC=
SIDL_LNK=
HAVE_SIDL_H=no
if test -z "$BABEL_ARG"; then
  AC_CHECK_HEADER( [sidl.h], [HAVE_SIDL_H=yes], [HAVE_SIDL_H=no] )
  AC_CHECK_LIB( [sidl], [sidl_long__array_copy], [SIDL_LNK="-lsidl"])
  AC_CHECK_PROG( [BABEL], [babel], [babel] )
elif test "$BABEL_ARG" == "yes"; then
  AC_CHECK_HEADER( [sidl.h], [HAVE_SIDL_H=yes], [AC_MSG_ERROR("sidl.h not found")])
  AC_CHECK_LIB( [sidl], [sidl_long__array_copy], [SIDL_LNK="-lsidl"], [AC_MSG_ERROR("No SIDL library")])
  AC_CHECK_PROG( [BABEL], [babel], [babel], [] )
  if test -z "$BABEL"; then
    AC_MSG_ERROR("Babel not found")
  fi
elif test "$BABEL_ARG" != "no"; then
  SIDL_DIR="$BABEL_ARG"
  AC_CHECK_FILE( [$SIDL_DIR/include/sidl.h], 
     [SIDL_INC='-I$(SIDL_DIR)/include'; HAVE_SIDL_H=yes], 
     [AC_MSG_ERROR("$BABEL_ARG/include/sidl.h does not exist")] )
  AC_CHECK_FILE( [$SIDL_DIR/lib/libsidl.so], 
     [SIDL_LNK='-L$(SIDL_DIR)/lib -lsidl'], 
     [AC_CHECK_FILE( [$SIDL_DIR/lib/libsidl.a], 
        [SIDL_LNK='-L$(SIDL_DIR)/lib -lsidl'], 
        [AC_MSG_ERROR("SIDL library not found")] )])
  AC_CHECK_PROG( BABEL, babel, [$SIDL_DIR/bin/babel], [], [$SIDL_DIR/bin] )
  if test -z "$BABEL"; then
    AC_MSG_ERROR("Babel not found")
  fi
fi


# Enable TSTT Mesh support?
if test "$TSTT_MESH_ARG" == "yes"; then
  MSQ_TSTT_MESH="$TSTT_MESH_ARG"
  if test "$HAVE_SIDL_H" == "no"; then
    AC_MSG_ERROR("Babel is required for TSTT Mesh support.  Try --with-babel=...")
  fi
else
  MSQ_TSTT_MESH=no
fi

# Enable TSTT Geometry support?
if test "$TSTT_GEOM_ARG" == "yes"; then
  MSQ_TSTT_GEOM="$TSTT_GEOM_ARG"
  if test "$HAVE_SIDL_H" == "no"; then
    AC_MSG_ERROR("Babel is required for TSTT Geom support.  Try --with-babel=...")
  fi
else
  MSQ_TSTT_GEOM=no
fi


# TSTT testing code requires SIDL library
# if test -n "$TSTT_MESH_IMPL" -a -z "$SIDL_LNK"; then
#   AC_MSG_ERROR("TSTT testing requires SIDL library.  Try --with-babel=...")
# fi


# CPPUnit
CPPUNIT_DIR=
CPPUNIT_INC=
CPPUNIT_LNK=
WITH_CPPUNIT=no
AC_LANG_PUSH(C++)
if test -z "$CPPUNIT_ARG"; then

  AC_CHECK_HEADER( [cppunit/Test.h], [WITH_CPPUNIT=yes], [WITH_CPPUNIT=no])
  AC_CHECK_LIB( [cppunit], [main], [WITH_CPPUNIT=yes; CPPUNIT_LNK="-lcppunit"], [WITH_CPPUNIT=no] )
  if test "$HAVE_CPPUNIT" != "yes"; then
    unset ac_cv_lib_cppunit_main
    AC_CHECK_LIB( [cppunit], [main], [WITH_CPPUNIT=yes; CPPUNIT_LNK="-lcppunit -ldl"], [], [-ldl] )
  fi
  if test "$WITH_CPPUNIT" != "yes"; then
    AC_MSG_WARN("CppUnit not found")
  fi  

elif test "$CPPUNIT_ARG" == "yes"; then

  WITH_CPPUNIT=yes
  AC_CHECK_HEADER( [cppunit/Test.h], [], [AC_MSG_ERROR("cppunit/Test.h not found")])
  AC_CHECK_LIB( [cppunit], [main], [CPPUNIT_LNK=-lcppunit], [
    unset ac_cv_lib_cppunit_main
    AC_CHECK_LIB( [cppunit], [main], [CPPUNIT_LNK="-lcppunit -ldl"], [AC_MSG_ERROR("No libcppunit")], [-ldl])
  ])

elif test "$CPPUNIT_ARG" != "no"; then
  
  WITH_CPPUNIT=yes
  CPPUNIT_DIR="$CPPUNIT_ARG"
  
  CPPUNIT_LNK='-L$(CPPUNIT_DIR)/lib -lcppunit'
  
  AC_CHECK_FILE( [${CPPUNIT_ARG}/include/cppunit/Test.h], 
     [CPPUNIT_INC='-I$(CPPUNIT_DIR)/include/cppunit'], 
     [AC_MSG_ERROR("${CPPUNIT_ARG}/include/cppunit/Test.h does not exist")] )
     
  AC_MSG_CHECKING("Checking if cppunit requires -ldl");
  LIBS="-L${CPPUNIT_ARG}/lib -lcppunit"
  AC_TRY_LINK( [], [], [CPPUNIT_LNK='-L$(CPPUNIT_DIR)/lib -lcppunit'], [
    LIBS="-L${CPPUNIT_ARG}/lib -lcppunit -ldl"
    AC_TRY_LINK( [], [], [CPPUNIT_LNK='-L$(CPPUNIT_DIR)/lib -lcppunit -ldl' ], 
     [AC_MSG_ERROR("Cannot link cppunit")] 
    )
  ])
  AC_MSG_RESULT("done")

fi
AC_LANG_POP(C++)



#------------------------------------------------------------------------------
# Set up source directory
#------------------------------------------------------------------------------
MSQ_BASE_DIR=`pwd`
AC_SUBST(MSQ_BASE_DIR)
touch make.dependencies
for dir in includeLinks obj lib; do
  if test ! -d $dir; then
    mkdir $dir
  fi
done


#------------------------------------------------------------------------------
# The End
#------------------------------------------------------------------------------

AC_SUBST(AOMD_DIR)
AC_SUBST(AOMD_INC)
AC_SUBST(AOMD_LNK)
AC_SUBST(BABEL)
AC_SUBST(CPPUNIT_DIR)
AC_SUBST(CPPUNIT_INC)
AC_SUBST(CPPUNIT_LNK)
AC_SUBST(EXODUS_CFLAGS)
AC_SUBST(EXODUS_DIR)
AC_SUBST(EXODUS_LDFLAGS)
AC_SUBST(HDF5_DIR)
AC_SUBST(HDF5_LNK)
AC_SUBST(NETCDF_CXX_LNK)
AC_SUBST(NETCDF_DIR)
AC_SUBST(NETCDF_INC)
AC_SUBST(NETCDF_LNK)
AC_SUBST(MOAB_DIR)
AC_SUBST(MOAB_INC)
AC_SUBST(MOAB_LNK)
AC_SUBST(MSQ_TSTT_GEOM)
AC_SUBST(MSQ_TSTT_MESH)
AC_SUBST(TSTT_MESH_IMPL)
AC_SUBST(OVERTURE_DIR)
AC_SUBST(OVERTURE_INC)
AC_SUBST(OVERTURE_LNK)
AC_SUBST(SIDL_DIR)
AC_SUBST(SIDL_INC)
AC_SUBST(SIDL_LNK)

AC_CONFIG_HEADERS(include/mesquite_config.h)
AC_OUTPUT(Makefile.customize)
AC_OUTPUT(testSuite/env)

