dnl Process this file with autoconf 2.50 to produce a configure script
dnl for the CCA tutorial software installation.

#--------------------------------------------------------------------
#       Disable caching since it seems to get in the way
#       more times than it helps us.
#--------------------------------------------------------------------
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl

# Make sure we're us.
AC_INIT(include/Mesquite.hpp)

#------------------------------------------------------------------------------
# Directory where we keep the autoconf stuff and some HPC environment folklore.
#------------------------------------------------------------------------------
AC_CONFIG_AUX_DIR(./config_aux)

#------------------------------------------------------------------------------
# Standard stuff
#------------------------------------------------------------------------------
AC_CANONICAL_SYSTEM

#------------------------------------------------------------------------------
# Compile flag options -- need to do this *before* detecting the compiler
# otherwise cannot tell if user has CXXFLAGS defined already or if config
# set to a default value.
#------------------------------------------------------------------------------
AC_ARG_ENABLE( [release], [[
  --enable-release                Release build (defualt if other options 
                                  don't override)]],
  [MSQ_DO_RELEASE="$enableval"], [MSQ_DO_RELEASE=""] )
AC_ARG_ENABLE( [debug], [[
  --enable-debug                  Debug build]], 
  [MSQ_DO_DEBUG="$enableval"], [MSQ_DO_DEBUG="no"] )
AC_ARG_ENABLE( [debug-output], [[
  --enable-debug-output[=n,m,...] Enable debug output.  Optionally specify 
                                  comma-separated list of flags to enable.  
                                  --enable-debug implies --enable-debug-output=1,2
  --disable-debug-output          Override default enable implied by --enable-debug]],
  [MSQ_DEBUG_OUT="$enableval"], [MSQ_DEBUG_OUT=""] )
AC_ARG_ENABLE( [function-timers], [[  
  --enable-function-timers        Enable function timers]], 
  [MSQ_DO_TIMERS="$enableval"], [MSQ_DO_TIMERS="no"] )

if test -z "$MSQ_DO_RELEASE"; then
  # do default unless CXXFLAGS or -debug have been specified
  if test -z "$CXXFLAGS" -a "$MSQ_DO_DEBUG" = "no"; then
    CXXFLAGS="-O2"
  fi
elif test "$MSQ_DO_RELEASE" != "no"; then
  CXXFLAGS="$CXXFLAGS -O2"
fi

if test "$MSQ_DO_DEBUG" != "no"; then
  CXXFLAGS="$CXXFLAGS -g"
  if test -z "$MSQ_DEBUG_OUT"; then
    CXXFLAGS="$CXXFLAGS -DMSQ_ENABLE_DEBUG=1,2"
  fi
fi

if test -n "$MSQ_DEBUG_OUT"; then
  if test "$MSQ_DEBUG_OUT" = "yes"; then 
    CXXFLAGS="$CXXFLAGS -DMSQ_ENABLE_DEBUG"
  elif test "$MSQ_DEBUG_OUT" != "no"; then
    CXXFLAGS="$CXXFLAGS -DMSQ_ENABLE_DEBUG=$MSQ_DEBUG_OUT"
  fi
fi

if test "$MSQ_DO_TIMERS" = "yes"; then
  CXXFLAGS="$CXXFLAGS -DMSQ_USE_FUNCTION_TIMERS"
fi
  

#------------------------------------------------------------------------------
# Check for required executables
#------------------------------------------------------------------------------
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_CC
AC_PROG_CXXCPP
AC_PROG_CXX
MSQ_CHK_PROG_WITH(MAKEDEPEND, makedepend, /bin/true, [[
  --with-makedpend=PROG   Full path to C/C++ dependency generator
  --without-makedepend    Do not generate dependency information during build]], 
 [/usr/bin/X11:/usr/openwin/bin])
MSQ_CHK_PROG_WITH(DOXYGEN, doxygen, no, [[
  --with-doxygen[=PROG]   Optionally specify doxygen program.
  --without-doxygen       Disable generation of documentation]])
  

#-----------------------------------------------------------------------------
# Check for required headers
#-----------------------------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h strings.h sys/file.h sys/time.h unistd.h)
HAVE_IEEEFP=
AC_CHECK_HEADER( ieeefp.h, HAVE_IEEEFP=-DHAVE_IEEEFP )
AC_SUBST(HAVE_IEEEFP)

#-----------------------------------------------------------------------------
# Check for required functions
#-----------------------------------------------------------------------------
AC_CHECK_FUNCS( vsnprintf, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_VSNPRINTF"] )
AC_CHECK_FUNCS( vsprintf, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_VSPRINTF"] )
AC_CHECK_FUNCS( clock, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_CLOCK"] )
AC_CHECK_FUNCS( times, [MSQ_FUNC_DEFS="${MSQ_FUNC_DEFS} -DHAVE_TIMES"] )
AC_SUBST(MSQ_FUNC_DEFS)

#-----------------------------------------------------------------------------
# Check C++ environment
#-----------------------------------------------------------------------------
MSQ_CPLUSPLUS_FUNC
MSQ_CPLUSPLUS_HEADERS

#-----------------------------------------------------------------------------
# Try to find an archiver that correctly handles C++ templates
#-----------------------------------------------------------------------------
CXX_ARCHIVER=
AC_ARG_WITH( archiver, [
  --with-archiver=ARG     Specify tool for creating static libraries], 
 [
 MSQ_TEST_ARCHIVER( [$withval], 
  [ CXX_ARCHIVER=$withval; AC_SUBST(CXX_ARCHIVER) ],
  [AC_MSG_ERROR(["$with_archiver" : not a valid archiver.])]
  ) ],
  [MSQ_CPLUSPLUS_ARCHIVER ]
)
AC_SUBST(CXX_ARCHIVER)


#------------------------------------------------------------------------------
# Some GCC-specific stuff
#------------------------------------------------------------------------------
if test "${GCC}" = "yes" ; then
    CXXFLAGS="$CXXFLAGS -Wall -Wconversion"
fi
if test -z "$no_pipe"; then
if test -n "$GCC"; then
  AC_MSG_CHECKING([if c++ compiler understands -pipe])
  OLDCXX="$CXX"
  CXX="$CXX -pipe"
  AC_TRY_COMPILE(,,
    AC_MSG_RESULT(yes),
    CXX="$OLDCXX"
    AC_MSG_RESULT(no))
fi
fi


#------------------------------------------------------------------------------
# ExodusII support
#------------------------------------------------------------------------------
EXODUS_CFLAGS=
EXODUS_LDFLAGS=
EXODUS_DIR=
AC_ARG_WITH(exodus,[[
  --with-exodus[=DIR]     Enable exodusII support and specifiy directory
  --without-exodus        Disable exodusII support (default)]],
  [
  if test "$withval" == "yes"; then

    EXODUS_CFLAGS="-DMSQ_USING_EXODUS"
    AC_CHECK_HEADER( [exodusII.h], [], [AC_MSG_ERROR("exodusII.h not found")])
    AC_CHECK_LIB( [exoIIv2c], ex_open, 
      [EXODUS_LDFLAGS=-lexoIIv2c], [AC_MSG_WARN("No ExodusII library")])

  elif test "$withval" != "no"; then
    
    EXODUS_DIR=$withval
    EXODUS_CFLAGS="-DMSQ_USING_EXODUS -I${EXODUS_DIR}/include"
    AC_CHECK_FILE( [${EXODUS_DIR}/include/exodusII.h], [], 
       [AC_MSG_ERROR("${EXODUS_DIR}/include/exodusII.h does not exist")] )
    AC_CHECK_FILE( [${EXODUS_DIR}/lib/libexoIIv2c.a], 
       [EXODUS_LDFLAGS="-L${EXODUS_DIR}/lib -lexoIIv2c"], 
       [AC_MSG_ERROR("${EXODUS_DIR}/lib/libexoIIv2c.a does not exist")] )
  fi
  ])

NETCDF_DIR=
HAVE_NETCDF=no
AC_ARG_WITH(netcdf,[[
  --with-netcdf[=DIR]     ExodusII requires NetCDF - defaults to values for 
                          --with-exodus
  --without-netcdf        Skip NetCDF check]],
  [NETCDF_DIR=$withval], [NETCDF_DIR=none])
# Ignore netcdf if no exodus
if test -n "$EXODUS_CFLAGS"; then
  if test "$NETCDF_DIR" = "no"; then
    AC_MSG_WARN("Configuring ExodusII without NetCDF");
  else
    if test -n "$EXODUS_DIR"; then
      if test "$NETCDF_DIR" = "yes" -o "$NETCDF_DIR" = "none"; then
        NETCDF_DIR="$EXODUS_DIR"
      fi
    fi
    if test "$NETCDF_DIR" = "yes"; then
      AC_CHECK_HEADER( [netcdf.h], [], [AC_MSG_ERROR("netcdf.h not found")])
      AC_CHECK_LIB( [netcdf], nc_open, 
        [HAVE_NETCDF=yes
         NETCDF_DIR=
         EXODUS_LDFLAGS="$EXODUS_LDFLAGS -lnetcdf"
        ], 
        [AC_MSG_WARN("No NetCDF library")])
    else
      if test "$NETCDF_DIR" != "$EXODUS_DIR"; then
        EXODUS_LDFLAGS="$EXODUS_LDFLAGS -L${NETCDF_DIR}"
        EXODUS_CFLAGS="$EXODUS_CFLAGS -I${NETCDF_DIR}/inc"
      fi
      AC_CHECK_FILE( [${NETCDF_DIR}/inc/netcdf.h], [], 
         [AC_MSG_ERROR("${NETCDF_DIR}/inc/netcdf.h does not exist")] )
      AC_CHECK_FILE( [${NETCDF_DIR}/libnetcdf.a], 
         [EXODUS_LDFLAGS="${EXODUS_LDFLAGS} -lnetcdf"], 
         [AC_MSG_ERROR("${NETCDF_DIR}/libnetcdf.a does not exist")] )
      HAVE_NETCDF=yes
    fi
  fi
fi

AC_SUBST(EXODUS_CFLAGS)
AC_SUBST(EXODUS_LDFLAGS)

#------------------------------------------------------------------------------
# OVERTURE
#------------------------------------------------------------------------------

OVERTURE_DIR=
OVERTURE_LNK=
OVERTURED_INC=
AC_ARG_WITH(overture, 
[[  
  --with-overture=DIR     Root directory of Overture installation.  Required
                          for OVERTURE test, may be used for TSTT test ]] ,
[ if test "$withhval" = "yes"; then
    AC_MSG_ERROR( "Argument required for --with-overture" )
  elif test "$withval" != "no"; then
    OVERTURE_DIR="$withval"
    OVERTURE_LNK="-L${$withval} -loverture"
    OVERTURE_INC="-I${$withval}"
    TSTT_SERVER=OVERTURE
  fi
])

AC_SUBST(OVERTURE_DIR)
AC_SUBST(OVERTURE_LNK)
AC_SUBST(OVERTURE_INC)


#------------------------------------------------------------------------------
# MOAB
#------------------------------------------------------------------------------

HDF5_LNK=
AC_ARG_WITH(hdf5,
[[  --with-hdf5=[DIR]       Specify path where HDF5 is installed.  libhdf5 may
                          be required by MOAB. ]],
[ if test "$withval" = "yes"; then
    AC_CHECK_LIB( [hdf5], H5Fopen, [HDF5_LNK=-lhdf5], [AC_MSG_ERROR("HDF5 library not found.")])
  elif test "$withval" != "no"; then
    HDF5_LNK="-L$withval/lib -lhdf5"
  fi
],[ AC_CHECK_LIB( [hdf5], H5Fopen, [HDF5_LNK=-lhdf5]) ])
AC_SUBST(HDF5_LNK)
    

MOAB_DIR=
MOAB_LNK=
MOAB_INC=
AC_ARG_WITH(moab, 
[[  --with-moab=DIR         Root directory of MOAB installation.  Required
                          for MDB test, may be used for TSTT test ]] ,
[ if test "$withhval" = "yes"; then
    AC_MSG_ERROR( "Argument required for --with-moab" )
  elif test "$withval" != "no"; then
    MOAB_DIR="$withval"
    MOAB_INC="-I${MOAB_DIR}"
    MOAB_LNK="-L${MOAB_DIR} -lMOAB"
    TSTT_SERVER=MOAB

      # MOAB requires C++ exodus library - check for it
    if test "$HAVE_NETCDF" != "yes"; then
      AC_MSG_ERROR( "MOAB requires NetCDF.  Try --with-netcdf=DIR" );
    fi
    if test -z "$NETCDF_DIR" -o ! -r "${NETCDF_DIR}/libnetcdf_c++.a"; then
      if test ! -r "${MOAB_DIR}/libnetcdf_c++.a"; then
        AC_CHECK_LIB( [netcdf_c++], main, ,
         [AC_MSG_ERROR("MOAB requires libnetcdf_c++.a.  Try --with-netcdf=DIR")])
      fi
    fi
    
      # MOAB may require HDF5 library
    if test -z "$HDF5_LNK"; then
      AC_MSG_WARN("MOAB may require libhdf5")
    fi
    MOAB_LNK="$MOAB_LNK \$(HDF5_LNK)" 
  fi
])

AC_SUBST(MOAB_DIR)
AC_SUBST(MOAB_LNK)
AC_SUBST(MOAB_INC)


#------------------------------------------------------------------------------
# AOMD
#------------------------------------------------------------------------------

AOMD_DIR=
AOMD_LNK=
AOMD_INC=
AC_ARG_WITH(aomd, 
[[  --with-aomd=DIR         Root directory of AOMD installation.  Required
                          for AOMD test, may be used for TSTT test ]] ,
[ if test "$withhval" = "yes"; then
    AC_MSG_ERROR( "Argument required for --with-aomd" )
  elif test "$withval" != "no"; then
    AOMD_DIR="$withval"
    AOMD_LNK="-L${AOMD_DIR}/lib -laomd"
    AOMD_INC="-I${AOMD_DIR}/include"
    TSTT_SERVER=AOMD
  fi
])

AC_SUBST(AOMD_DIR)
AC_SUBST(AOMD_LNK)
AC_SUBST(AOMD_INC)

#------------------------------------------------------------------------------
# TSTT-support
#------------------------------------------------------------------------------

TSTT_CFLAGS=
TSTT_OBJS=
TSTT_LDFLAGS=
TTST_CLIENT_SRCS=
TSTT_MKINCL=

MSQ_DEFAULT_TSTT_DIR=tstt/client
TSTT_CLIENT_DIR="$MSQ_DEFAULT_TSTT_DIR"
AC_ARG_WITH(tstt, 
[[  --with-tstt[=DIR]       Enable compilation of Mesquite-TSTT interface.
                          The argument is the directory containing the TSTT
                          C++ client interface and glue code.  If no 
                          directory is specified, the client interface will
                          be generated from the TSTT interface SIDL 
                          defintion in ${TSTT_CLIENT_DIR}.  This requires the
                          babel compiler.
  --without-tstt          Disable compilation of Mesquite-TSTT interface.]],
[  if test "$withval" == "no"; then
     TSTT_CLIENT_DIR=
   elif test "$withval" != "yes"; then
     TSTT_CLIENT_DIR="$withval"
     AC_CHECK_FILES([SIDL.hh TSTT.hh babel.make],[],
       [AC_MSG_ERROR("$TSTT_CLIENT_DIR does not contain C++ TSTT client interface")])
   fi 
], [TSTT_CLIENT_DIR=])
if test "$TSTT_CLIENT_DIR" = "$MSQ_DEFAULT_TSTT_DIR"; then
  TSTT_CFLAGS="$TSTT_CFLAGS -I$TSTT_CLIENT_DIR"
  TSTT_CLIENT_SRCS='$(IORSRCS) $(STUBSRCS)'
  TSTT_MKINCL="include ${TSTT_CLIENT_DIR}/babel.make"
  TSTT_OBJS='$(TSTT_SRCS:src/Mesh/%.cpp=obj/%.o)'
fi
AC_SUBST(TSTT_CLIENT_DIR)

TEST_TSTT=
AC_ARG_WITH(tstt-server,
[[  --with-tstt-server=[AOMD|MOAB|OVERTURE] Specify an mesh database implementing 
                          the TSTT interface for use in testing.  This is not
                          required for building Mesquite.  It is also necessary
                          to specify the location of the corresponding TSTT 
                          server with one of "--with-aomd=DIR", 
                          "--with-moab=DIR" or "--with-overture=DIR".  If no
                          parameter is specified, will default to the first
                          option for which the location has been specified.
  --without-tstt-server   Do not build tests that require TSTT. ]],
[ TEST_TSTT=$withval ], [ TEST_TSTT= ] )
if test -z "$TEST_TSTT"; then
  TEST_TSTT="$TSTT_SERVER"
elif test "$TEST_TSTT" = "yes"; then
  if test -z "$TSTT_SERVER"; then
    AC_MSG_ERROR( "No server implementation specified for TSTT test" )
  fi
  TEST_TSTT="$TSTT_SERVER"
elif test "$TSTT_TEST" = "no"; then
  TSTT_TEST=
fi
if test "$TEST_TSTT" = "AOMD"; then
  if test -z "$AOMD_DIR"; then
    AC_MSG_ERROR( "Path for AOMD server to specfied" )
  fi
  TSTT_LDFLAGS="$TSTT_LDFLAGS \$(AOMD_LNK)"
  TSTT_CFLAGS="$TSTT_CFLAGS \$(AOMD_INC) -DMSQ_TSTT_USE_AOMD"
elif test "$TEST_TSTT" = "MOAB"; then
  if test -z "$MOAB_DIR"; then
    AC_MSG_ERROR( "Path for MOAB server to specfied" )
  fi
  TSTT_LDFLAGS="$TSTT_LDFLAGS \$(MOAB_LNK) -L\$(MOAB_DIR)/TSTT -lMOABserver -lnetcdf_c++"
  TSTT_CFLAGS="$TSTT_CFLAGS \$(MOAB_INC) \$(MOAB_INC)/TSTT \$(MOAB_INC)/TSTT/server -DMSQ_TSTT_USE_MOAB"
elif test "$TEST_TSTT" = "OVERTURE"; then
  if test -z "$OVERTURE_DIR"; then
    AC_MSG_ERROR( "Path for OVERTURE server to specfied" )
  fi
  TSTT_LDFLAGS="$TSTT_LDFLAGS \$(OVERTURE_LNK)"
  TSTT_CFLAGS="$TSTT_CFLAGS \$(OVERTURE_INC) -DMSQ_TSTT_USE_OVERTURE"
elif test -n "$TEST_TSTT"; then
  AC_MSG_ERROR( "Invalid argument for --with-tstt-server : $TEST_TSTT" );
fi


  # Check for SIDL library (required for TSTT)
AC_ARG_WITH(babel,
[[  --with-babel[=DIR]      Specify directory where Babel exectuable and 
                          SIDL headers/libs are installed.
  --without-babel         Disable use of Babel/SIDL]],
  [
  if test "$withval" == "yes"; then

    AC_CHECK_HEADER( [sidl.h], [], [AC_MSG_ERROR("sidl.h not found")])
    AC_CHECK_LIB( [sidl], SIDL_long__array_copy, 
      [TSTT_LDFLAGS="TSTT_LDFLAGS -lsidl"], 
      [AC_MSG_WARN("No SIDL library")])
    AC_CHECK_PROG( BABEL, babel, babel )

  elif test "$withval" != "no"; then
    
    TSTT_CFLAGS="$TSTT_CFLAGS -I${withval}/include"
    AC_CHECK_FILE( [${withval}/include/sidl.h], [], 
       [AC_MSG_ERROR("${withval}/include/sidl.h does not exist")] )
    AC_CHECK_FILE( [${withval}/lib/libsidl.so], 
       [TSTT_LDFLAGS="$TSTT_LDFLAGS -L${withval}/lib -lsidl"], 
       [AC_CHECK_FILE( [${withval}/lib/libsidl.a], 
          [TSTT_LDFLAGS="$TSTT_LDFLAGS -L${withval}/lib -lsidl"], 
          [AC_MSG_ERROR("${withval}/lib/libexoIIv2c.a does not exist")] )])
    AC_CHECK_PROG( BABEL, babel, [${withval}/bin/babel], [], [${withval}/bin] )
  fi
  ],
  [
  if test -n "$TSTT_CFLAGS"; then

    AC_CHECK_HEADER( [sidl.h], [], [AC_MSG_ERROR("sidl.h not found")])
    AC_CHECK_LIB( [sidl], SIDL_long__array_copy, 
      [TSTT_LDFLAGS="$TSTT_LDFLAGS -lsidl"], 
      [AC_MSG_WARN("No SIDL library")])
    AC_CHECK_PROG( BABEL, babel, babel )

  fi  
  ])

  # If generating TSTT headers/stubs in local tstt directory,
  # need babel compiler to do so.
if test -z "$BABEL"; then
  if test -n "$TSTT_CFLAGS"; then
    if test "$MSQ_DEFAULT_TSTT_DIR" = "$TSTT_CLIENT_DIR"; then
      AC_MSG_ERROR( "Babel is required to generated TSTT client headers/stubs" )
    fi
  fi
fi


AC_SUBST(TSTT_CFLAGS)
AC_SUBST(TSTT_OBJS)
AC_SUBST(TSTT_LDFLAGS)
AC_SUBST(TSTT_CLIENT_SRCS)
AC_SUBST(TSTT_MKINCL)
AC_SUBST(BABEL)


#------------------------------------------------------------------------------
# CppUnit
#------------------------------------------------------------------------------
CPPUNIT_INC=
CPPUNIT_LNK=
WITH_CPPUNIT=no
AC_ARG_WITH(cppunit,[[
  --with-cppunit[=DIR]    Specify directory where CppUnit is installed.
  --without-cppunit       Disable CppUnit tests]],
  [
  AC_LANG_PUSH(C++)
  if test "$withval" == "yes"; then

    WITH_CPPUNIT=yes
    AC_CHECK_HEADER( [cppunit/Test.h], [], [AC_MSG_ERROR("cppunit/Test.h not found")])
    AC_CHECK_LIB( [cppunit], [main], [CPPUNIT_LNK=-lcppunit], [
      unset ac_cv_lib_cppunit_main
      AC_CHECK_LIB( [cppunit], [main], [CPPUNIT_LNK="-lcppunit -ldl"], [AC_MSG_ERROR("No libcppunit")], [-ldl])
    ])

  elif test "$withval" != "no"; then
    
    WITH_CPPUNIT=yes
    CPPUNIT_INC="-I${withval}/include/cppunit"
    CPPUNIT_LNK="-L${withval}/lib -lcppunit"
    
    AC_CHECK_FILE( [${withval}/include/cppunit/Test.h], [], 
       [AC_MSG_ERROR("${withval}/include/cppunit/Test.h does not exist")] )
       
    AC_MSG_CHECKING("Checking if cppunit requires -ldl");
    LIBS="-L${withval}/lib -lcppunit"
    AC_TRY_LINK( [], [], [], [
      LIBS="-L${withval}/lib -lcppunit -ldl"
      AC_TRY_LINK( [], [], 
       [CPPUNIT_LNK="$CPPUNIT_LNK -ldl" ], 
       [AC_MSG_ERROR("Cannot link cppunit")] 
      )
    ])
    AC_MSG_RESULT("done")
    
  fi
  AC_LANG_POP(C++)
  ], [
  AC_LANG_PUSH(C++)
  AC_CHECK_HEADER( [cppunit/Test.h], [WITH_CPPUNIT=yes], [WITH_CPPUNIT=no])
  AC_CHECK_LIB( [cppunit], [main], [WITH_CPPUNIT=yes; CPPUNIT_LNK="-lcppunit"], [WITH_CPPUNIT=no] )
  if test "$HAVE_CPPUNIT" != "yes"; then
    unset ac_cv_lib_cppunit_main
    AC_CHECK_LIB( [cppunit], [main], [WITH_CPPUNIT=yes; CPPUNIT_LNK="-lcppunit -ldl"], [], [-ldl] )
  fi
  if test "$WITH_CPPUNIT" != "yes"; then
    AC_MSG_WARN("CppUnit not found")
  fi  
  AC_LANG_POP(C++)
  ])

AC_SUBST(CPPUNIT_INC)
AC_SUBST(CPPUNIT_LNK)




#------------------------------------------------------------------------------
# Set up source directory
#------------------------------------------------------------------------------
MSQ_BASE_DIR=`pwd`
AC_SUBST(MSQ_BASE_DIR)
touch make.dependencies
for dir in includeLinks obj lib; do
  if test ! -d $dir; then
    mkdir $dir
  fi
done

#------------------------------------------------------------------------------
# The End
#------------------------------------------------------------------------------
AC_CONFIG_HEADERS(include/mesquite_config.h)
AC_OUTPUT(Makefile.customize)
