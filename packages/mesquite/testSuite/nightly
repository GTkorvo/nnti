#!/bin/sh

# This is a script to do a nightly build an test of Mesquite.
# It generates four output files (see comments for "RESULTS"
# below.)  The exit value of this script should be one if
# either mesquite or the CppUnit-tester failed to build, zero
# otherwise.  Neither the test results nor a failure to build
# one of the stand-alone test will affect the exit value -- this 
# is intentional.


  # Base file name for test results.  
  # Three files are generated : standalone test results,
  # cppunit regression tests and cppunit unit tests.  The
  # strings .tests, .regress and .cppunit will be appended
  # to the RESULTS value to get the filename for the results
  # of corresponding group of tests.
RESULTS=results

  # File to write output of build and tests
LOGFILE=log

  # Location to send result files to.  May be either
  # a local directory (e.g. NFS share) or a rcp-style
  # host and path. ([username@]hostname:path).
REMOTE=$1


  # The CppUnit testing application to build -- path relative to mesquite root dir
UNITTESTER=testSuite/unit/msq_test

 # Run all this stuff in a sub-shell so the output
 # can be redirected to a file.
rm -f ${LOGFILE}
(

  # Save the working directory so we can write output files there
pwd=`pwd`

  # Get rid of old output files
rm -f ${RESULTS}.tests ${RESULTS}.unit ${RESULTS}.regress


  # Echo all commands
set -v

  # Echo some useful info for the log file
echo
uname -a 
pwd
which make && make --version
which CC && (CC --version || CC -V)


  # Change to mesquite root directory
CDPATH=
MESQUITE=`dirname $0`
cd $MESQUITE/..

echo
echo "********************************************************"
echo "                      make clean" 
echo "********************************************************"
echo

make veryclean

echo
echo "********************************************************"
echo "                      cvs update" 
echo "********************************************************"
echo

cvs update || exit 1

echo
echo "********************************************************"
echo "                      configure" 
echo "********************************************************"
echo

./configure || exit 1

echo
echo "********************************************************"
echo "                          make" 
echo "********************************************************"
echo


mkdir includeLinks
mkdir obj
make || exit 1
test -f lib/libmesquite.a || exit 1

  # for each subdirectory
for test in testSuite/*; do
    # if it looks like a test
  if [ -f ${test}/main.cpp ]; then 

    name=`basename ${test}`
    echo
    echo "********************************************************"
    echo "                          ${name}" 
    echo "********************************************************"
    echo

      # try to compile it
    rm -f ${test}/main
    if make ${test}/main && test -x ${test}/main; then
        # and run it
      if (cd ${test} && ./main); then
          # test completed successfully
      	result=succeeded
      else
          # test failed
        result=failed
      fi
    else
        # test failed to build or some other unexpected problem
      result=broken 
    fi
    
    echo "${name} : ${result}" >> ${pwd}/${RESULTS}.tests
  fi
done

echo
echo "********************************************************"
echo "                  make ${UNITTESTER}" 
echo "********************************************************"
echo

  # compile CppUnit tests
rm -f "$UNITTESTER"
make "$UNITTESTER" || exit 1
test -x "$UNITTESTER" || exit 1

  # run CppUnit tests
dir=`dirname "$UNITTESTER"`
exe=`basename "$UNITTESTER"`

echo
echo "********************************************************"
echo "                  CppUnit Unit tests" 
echo "********************************************************"
echo

(cd $dir && ./$exe -s ${pwd}/${RESULTS}.unit Unit)

echo
echo "********************************************************"
echo "                CppUnit Regression tests" 
echo "********************************************************"
echo

(cd $dir && ./$exe -s ${pwd}/${RESULTS}.regress Regression)

exit 0
 
  # End of subshell - redirect all output to a file
) > ${LOGFILE} 2>&1

  # Copy files to central machine
uname=`uname`
for file in ${LOGFILE} ${RESULTS}.tests ${RESULTS}.unit ${RESULTS}.regress; do
  if [ -f $file -a "x$REMOTE" != "x" ]; then
      # Try twice.  Don't redirect the output on the second attempt.
    scp $file ${REMOTE}/${uname}.${file} > /dev/null 2>&1 || \
    scp $file ${REMOTE}/${uname}.${file}
  fi
done

