/*!
\mainpage %Belos: A Block Linear Solvers Package

\image html Belos-Interfaces-Harder.gif "UML class diagram showing basic Belos object-oriented design"

\section Belos_classes Belos classes

<ul>

<li><b>Fundamental Belos interface classes</b>

The following abstract classes define the fundumental %Belos
interfaces required for standardization:

<ul>
<li>
<tt>Belos::StatusTest</tt> defines an interface for checking the
status of a block iterative solver.  This class decouples concrete iterative
solvers from user-defined status tests.
<li>
<tt>Belos::BasicIterationState</tt> defines an interface for
presenting the current state of the block iterative solver to a
<tt>Belos::StatusTest</tt>.
<li>
<tt>Belos::BasicIteration</tt> defines an interface for presenting
abstracting concrete iterative solver implementations away for
clients.  This is the basic interface that allows a client to access
an iterative linear solver without knowing the exact concrete
implemenation.
<li>
<tt>Belos::LinearProblemState</tt> presents the current state of a
linear problem to a <tt>Belos::StatusTest</tt>.
<li>
<tt>Belos::LinearProblemIteration</tt> defines an interface to a
linear problem for managing the current block system that is designed
to be accessed by a concrete <tt>Belos::BasicIteration</tt> subclass.
<li>
<tt>Belos::LinearProblemSetup</tt> defines an interface to be
accessed by a client to setup the definition of a linear problem by
setting the operator, left and/or right precondtioners, left and/or
right scaling vectors, RHS multi-vector and LHS multi-vector (with
initial guess).
</ul>

The above interface classes satisfy all of the requirements spelled
out in ???.

<li><b>Convenient implementations</b>

The following classes define convient implementations of the basic
interface classes buta are not at all required for standardization.

<ul>
<li>
<tt>Belos::LinearProblem</tt> is a 100\% general implementation of
<tt>Belos::LinearProblemSetup</tt> (and therefore also
<tt>Belos::LinearProblemIteration</tt> and
<tt>Belos::LinearProblemState</tt>).
<li>
<tt>Belos::NativeNormStatusTest</tt> is a concrete implementation
of a <tt>Belos::StatusTest</tt> that checks the native relative
residual norm against a set of tolerances.
<li>
<tt>Belos::ResidualNormStatusTest</tt> is a concrete
implementation of a <tt>Belos::StatusTest</tt> that checks the
unscaled unpreconditioned residual norm against a set of tolerances.
<li>
<tt>Belos::SummaryOutputterStatusTest</tt> is a concrete
implementation of a <tt>Belos::StatusTest</tt> that does nothing more
than print summary information about each iterative solver iteration.
</ul>

Note that the subclasses <tt>Belos::NativeNormStatusTest</tt>,
<tt>Belos::StatusTest</tt> and <tt>Belos::ResidualNormStatusTest</tt>
are examples of the <b><tt>ConcreteStatusTest</tt></b> subclass shown
in the above UML class diagram.

<li><b>Example/prototypical concrete iterative linear solvers</b>

The following classes are concrete implementations of
<tt>Belos::BasicIteration</tt> that are provided primarily for testing
and demonstration purposes.  These represent examples of the
<b><tt>ConcreteIterativeLinearSolver</tt></b> subclass shown in the above UML
class diagram.

<ul>
<li>
<tt>Belos::NonblockCg</tt> is a concrete implementation of a CG
iterative solver that simultaniously solves for multiple RHS but is
not a true block solver.  The primary purpose of this class is to test
deflation.
<li>
<tt>Belos::NonblockGmres</tt> is a concrete implementation of a
GMRES iterative solver that solves only single RHS at a time.  The
primary purpose of this class is to test the special use cases related
GMRES solvers.
</ul>

</ul>

*/
