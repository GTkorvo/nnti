/*! \mainpage Teuchos:  The Trilinos Tools Library

\section intro Introduction

Teuchos provides a suite of common tools for Trilinos for developers to use.  These tools 
include BLAS/LAPACK wrappers, smart pointers, parameter lists, XML parsers, etc. 

\section contributors Teuchos Contributors

The following people have contributed to the development of Teuchos:

<ul>
	<li> Roscoe Bartlett, Sandia National Labs, rabartl@sandia.gov
	<li> Michael Heroux, Sandia National Labs, maherou@sandia.gov
	<li> Kris Kampshoff, University of Minnesota, kamp@cs.umn.edu
	<li> Kevin Long, Sandia National Labs, krlong@sandia.gov
	<li> Paul Sexton, University of Illinois-Chicago, pmsext@software.sandia.gov
	<li> Heidi Thornquist (Package Lead), Sandia National Labs, hkthorn@sandia.gov
</ul>

\section startup Overview of Teuchos

Teuchos contains a number of classes.  These classes have been divided 
between a "standard" build and an "extended" build.  The "standard" build has shown to be 
a portable subset of the Teuchos tools and is built by default when Teuchos is enabled (<i>--enable-teuchos</i>).  
The "extended" build is also portable, but contains more special purpose tools like XML parsing and
communicators (<i>--enable-teuchos-extended</i>).

Additionally, boundschecking for some of the container classes can be enabled through configuring 
Trilinos with <i>--enable-teuchos-abc</i>.  <b>Boundschecking incurs a significant performance penalty and so is 
not recommended for production builds.</b>  To enable complex arithmetic in the computational classes, 
Teuchos must be configured with <i>--enable-teuchos-complex</i>.


\subsection sclasses Teuchos "Standard" Classes

<ul>

<li> <b>Low-level math</b>

  <ul>

  <li> Numerical scalar traits : Teuchos::ScalarTraits - a traits class defining basic propertys and elementary
  functions for various scalar data types to be used in numerical computations.

  <li> BLAS wrapper class: Teuchos::BLAS - A ``thin'' layer of C++ code wrapping the basic linear algebra subprograms (BLAS).
       This class provides a single instance interface between Teuchos and the BLAS.  In this way we can easily
       switch BLAS interfaces and manage the C++/Fortran translation differences that exist between different
       computer systems.  This class also provides a very convenient
       way to templatize the BLAS.

  <li> LAPACK wrapper class: Teuchos::LAPACK - A ``thin'' layer of C++ code wrapping LAPACK.  Like Teuchos::BLAS,
       it provides nice C++ access to LAPACK.

  <li> Serial Dense Matrix class:  Teuchos::SerialDenseMatrix - A templated, dense rectangular matrix class that provides basic
       operations like addition, multiplication, scaling, logical comparison, norms, etc.  This class also provides support for a dense
       matrix that needs to be replicated across processors in a parallel application.  Teuchos::SerialDenseVector inherits from
       Teuchos::SerialDenseMatrix, providing some additional methods that are useful to dense vectors.  Boundschecking
       can be turned on at compile time with the
       <tt>--enable-teuchos-abc </tt> configure flag.

  </ul>

<li> <b> Parameter Options: </b>

  <ul>

  <li> Parameter Entry:  Teuchos::ParameterEntry - A structure that holds a Teuchos::any object as the value
       and information on the status of the parameter.  The type of parameter is chosen through the templated Set/Get methods.
       Teuchos::ParameterEntry object is held as the "value" in the Teuchos::ParameterList map.

  <li> Parameter List:  Teuchos::ParameterList - A templated parameter list which holds a map of <key,value> pairs, where the
       "value" is a Teuchos::ParameterEntry object and the "key" is a string object.  The type of parameter is chosen through
       the templated Set/Get methods, which allows it to be any standard type (float, double, int, ...) or another parameter list.

  <li> Commandline arguments: Teuchos::CommandLineProcessor - processes commandline arguments from (argc,argv[])
       in a validated manner and automatically generates a documented --help option. 

  </ul>

<li> <b> Low-Level Language Support: </b>

  <ul>

  <li> Smart pointer: Teuchos::RefCountPtr - a reference-counted
  pointer for managing dynamically allocated memory that is safe under
  multiple inheritance.

	<li> Abstract factories:
    <ul>
    <li> Teuchos::AbstractFactory - defines a basic "Abstract Factory" interface
         that allocates objects and returns them wrapped in <tt>Teuchos::RefCountPtr</tt>
         objects.
    <li> Teuchos::AbstractFactoryStd - defines a general concrete implementation of 
         Teuchos::AbstractFactory that allows creating quick concrete subclass
         implementations for concrete types.
    </ul>

  <li> Dynamic casting: Teuchos::dyn_cast - a wrapper for
  <tt>dynamic_cast<></tt> that throws <tt>std::bad_cast</tt>
  exceptions with very detailed error messages on what types are involved.

  <li> Array argument call generation : \ref Teuchos_Array_Arguments "arrayArg()" - a set of overloaded
  templated functions for generating inline array arguments for
  function calls.

	<li><tt>Teuchos::getConst()</tt> is a silly little templated function that returns a
	constant reference given any constant object.  This function allows a piece of code
	to access the <tt>const</tt> version of a member function given a non-<tt>const</tt> reference
	to an object.

	<li><tt>Teuchos::oblackholestream</tt> is a concrete subclass of <tt>std::ostream</tt>
	that ignores all output.  This class is very useful in writting SPMD parallel programs
	and controlling which processor(s) produce output.  Generally only the the root process
	uses a real <tt>std::ostream</tt> object while all of the slave processors use
	a <tt>Teuchos::oblackholestream</tt> for console output.

  </ul>


<li> <b> Performance Monitoring </b>

  <ul>

  <li> Timing class: Teuchos::TimeMonitor - Provides timing functions for the
       purposes of performance analysis. 

  <li> Floating point operation class: Teuchos::Flops - Provides floating point operations (FLOPS)
       counting and reporting functions for the purposes of performance analysis.  All Teuchos computational
       classes accumulate FLOP counts associated with the \e this object of the computations.

  </ul>

<li> <b> Exception Handling </b>

  <ul>

  <li> Testing for Exceptions: The TEST_FOR_EXCEPTION() macro accepts a
  logical test, an exception handler, and a
  message.  It then throws an "intelligent" exception informing the
  user of the file, line, and message where
  the exception was thrown.  The macro TEST_FOR_EXCEPT() is a shorter
	macro that just accepts a logic test and is therefore easier to write.
	Please use TEST_FOR_EXCEPT(!test) as an alternative to assert(test).

  </ul>


<li> <b> Debugging Support </b>

  <ul>

  <li> Pretty Printing Objects: The abstract base class
  <tt>Teuchos::Describable</tt> defines an interface that
	subclasses can override that allows the creation of formated
	output of an object's state complete with indentation control.
	This class has default definitions for all of its virtual member
	functions and therefore can be inherited by existing C++ classes
	without requiring any additional implementation support to get
	started.

  </ul>

</ul>

\subsection eclasses Teuchos "Extended" Classes

<ul>

<li> <b> Containers </b>
<ul>

<li> Teuchos::Array is a templated
array class similar to the STL vector, but with optional boundschecking.
Boundschecking is useful for debugging, and can be turned on at compile time with
the <tt>--enable-teuchos-abc</tt> configure flag. 

<li> Teuchos::Hashtable is a templated map with constant-time lookup.

<li> Teuchos::HashSet is a templated set with constant-time lookup.

</ul>

<br>
<li> <b> XML </b>
<ul>

<li> Teuchos::XMLObject is an object representation of a subset of XML data. Supported XML features
are tags, attributes, and character content. 

<li> Teuchos::FileInputSource can read XML from a file and produce a Teuchos::XMLObject

<li> Teuchos::StringInputSource can read XML from a character string and produce a Teuchos::XMLObject

</ul>

<br>
<li> <b> MPI </b>
<ul>

<li> Teuchos::MPISession has methods to initialize, finalize, and query the global MPI environment.

<li> Teuchos::MPIComm represents an MPI communicator

<li> Teuchos::MPIContainerComm has methods to communicate Teuchos::Array objects

</ul>

</ul>

*/
