# Makefile.in generated by automake 1.7.1 from Makefile.am.
# src/LinearOperators/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# @HEADER
# @HEADER

# ------------------------------------------------------------------------
# For each category, create two variables - NAME and NAME_H. The
# second is the list of headers to be installed, i.e., any header that
# might someday be needed by some other code outside Ifpack. The first is
# the list of all source and any other header files.
# ------------------------------------------------------------------------
# For now, these are just guesses as to where the files belong.
# Files that prove to be troublesome have been commented out and 
# placed at the bottom of the appropriate section

srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/TSF
pkglibdir = $(libdir)/TSF
pkgincludedir = $(includedir)/TSF
top_builddir = ../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run aclocal-1.7
ALTERNATE_AR = 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run tar
AUTOCONF = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run automake-1.7
AWK = gawk
BLAS_LIBS = -lblas
BUILD_OLDIFPACK_FALSE = 
BUILD_OLDIFPACK_TRUE = #
CC = cc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = g77
FFLAGS = -g -O2
FLIBS =  -L/usr/local/gcc-3.0.4/lib/gcc-lib/i686-pc-linux-gnu/3.0.4 -L/usr/local/gcc-3.0.4/lib/gcc-lib/i686-pc-linux-gnu/3.0.4/../../.. -lg2c -lm
HAVE_MPI_FALSE = 
HAVE_MPI_TRUE = #
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LAPACK_LIBS = -llapack
LDFLAGS = 
LIBS = 
LTLIBOBJS = 
MAINT = #
MAINTAINER_MODE_FALSE = 
MAINTAINER_MODE_TRUE = #
MAKEINFO = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run makeinfo
MPI_CC_EXISTS = 
MPI_CXX_EXISTS = 
MPI_F77_EXISTS = 
OBJEXT = o
PACKAGE = TSF
PACKAGE_BUGREPORT = krlong@sandia.gov
PACKAGE_NAME = TSF
PACKAGE_STRING = TSF 2.0
PACKAGE_TARNAME = tsf
PACKAGE_VERSION = 2.0
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
USE_ALTERNATE_AR_FALSE = 
USE_ALTERNATE_AR_TRUE = #
VERSION = 2.0
XTRALDADD = 
ac_aux_dir = config
ac_ct_CC = cc
ac_ct_CXX = g++
ac_ct_F77 = g77
ac_ct_RANLIB = ranlib
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__quote = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/kevin/Projects/Trilinos/packages/TSF/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc

SOURCES_H = \
   $(srcdir)/TSFAdjointMatrixOperator.h \
   $(srcdir)/TSFAdjointOperator.h \
   $(srcdir)/TSFBlockLinearOperator.h \
   $(srcdir)/TSFComposedOperator.h \
   $(srcdir)/TSFDenseMatrix.h \
   $(srcdir)/TSFDiagonalOperator.h \
   $(srcdir)/TSFIdentityOperator.h \
   $(srcdir)/TSFInverseAdjointOperator.h \
   $(srcdir)/TSFInverseOperator.h \
   $(srcdir)/TSFLinearOperatorBase.h \
   $(srcdir)/TSFLinearOperator.h \
   $(srcdir)/TSFMatrixOperator.h \
   $(srcdir)/TSFMatrixView.h \
   $(srcdir)/TSFMultiVectorOperator.h \
   $(srcdir)/TSFScaledOperator.h \
   $(srcdir)/TSFSumOperator.h \
   $(srcdir)/TSFZeroOperator.h 


SOURCES = \
   $(srcdir)/TSFAdjointMatrixOperator.cpp \
   $(srcdir)/TSFAdjointOperator.cpp \
   $(srcdir)/TSFBlockLinearOperator.cpp \
   $(srcdir)/TSFComposedOperator.cpp \
   $(srcdir)/TSFDenseMatrix.cpp \
   $(srcdir)/TSFDiagonalOperator.cpp \
   $(srcdir)/TSFIdentityOperator.cpp \
   $(srcdir)/TSFInverseAdjointOperator.cpp \
   $(srcdir)/TSFInverseOperator.cpp \
   $(srcdir)/TSFLinearOperatorBase.cpp \
   $(srcdir)/TSFLinearOperator.cpp \
   $(srcdir)/TSFMatrixOperator.cpp \
   $(srcdir)/TSFMatrixView.cpp \
   $(srcdir)/TSFMultiVectorOperator.cpp \
   $(srcdir)/TSFScaledOperator.cpp \
   $(srcdir)/TSFSumOperator.cpp \
   $(srcdir)/TSFZeroOperator.cpp 



### add in paths as needed - trying to prevent 
### unnecessary paths from being listed - see old.Makefile for ideas
### Should I add a dependence on AztecOO??  Library doesn't necessarily have
### to be built - just need some headers???  Ask Mike about headers that 
### may be needed outside of the various packages, vs those that will not
### be needed and if I should split them up.
TSF_INCLUDES = -I$(top_srcdir)/src/Support -I$(top_srcdir)/src/Vectors \
	-I$(top_srcdir)/src/VectorSpaces -I$(top_srcdir)/src/LinearOperators \
	-I$(top_srcdir)/src/Preconditioners -I$(top_srcdir)/src/NonlinearOperators \
	-I$(top_srcdir)/src/LinearSolvers -I$(top_srcdir)/src/NonlinearSolvers \
	-I$(top_srcdir)/src/LinearProblem -I$(top_srcdir)/src/Readers \
	-I$(top_srcdir)/src/Writers -I$(top_srcdir)/src/XML 


AM_CPPFLAGS = $(TSF_INCLUDES) -I$(top_srcdir)/../aztecoo/src -I$(top_builddir)/../aztecoo/src \
	-I$(top_srcdir)/../epetra/src -I$(top_builddir)/../epetra/src 



# ------------------------------------------------------------------------
# Ifpack library specifications
# ------------------------------------------------------------------------
TSF_LIB = libtsf.a

TSF_H = $(SOURCES_H)

libtsf_a_SOURCES = $(SOURCES)

libtsf_a_AR = $(AR) cru


#EXTRA_libtsf_a_SOURCES = 

# ------------------------------------------------------------------------
# For using a special archiver
# ------------------------------------------------------------------------

# SPECIAL NOTE: Why is the "else" there?  For some reason, automake
# fails to define <lib>_AR of USE_ALTERNATE_AR is false, so we have to
# define it manually.
#libtsf_a_AR = $(ALTERNATE_AR)


# ------------------------------------------------------------------------
# Some C++ compilers create extra .o-files for templates. We need to
# be sure to include these, and this is the hack to do it.
# ------------------------------------------------------------------------
libtsf_a_LIBADD = $(XTRALDADD)


# ------------------------------------------------------------------------
# List of all libraries to install in $(libexecdir)
# ------------------------------------------------------------------------
lib_LIBRARIES = $(TSF_LIB)


# ------------------------------------------------------------------------
# List of all headers to install in $(pkgincludedir)
# ------------------------------------------------------------------------
pkginclude_HEADERS = $(TSF_H)


# ------------------------------------------------------------------------
# Special stuff to install in our special $(pkgexecincludedir)
# ------------------------------------------------------------------------

# SPECIAL NOTE: Ifpack_config.h is a machine-dependent file, so we need
# to install it in the machine-dependent directory. However, that is
# not a default installation directory, so we had to create it
# special.
pkgexecincludedir = $(exec_prefix)/include/TSF

#nodist_pkgexecinclude_HEADERS = TSFConfig.h

# ------------------------------------------------------------------------
# Files to be deleted by 'make maintainer-clean'
# ------------------------------------------------------------------------
MAINTAINERCLEANFILES = Makefile.in 
subdir = src/LinearOperators
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/src/Support/TSFConfig.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(lib_LIBRARIES)

libtsf_a_DEPENDENCIES =
am__objects_1 = TSFAdjointMatrixOperator.$(OBJEXT) \
	TSFAdjointOperator.$(OBJEXT) TSFBlockLinearOperator.$(OBJEXT) \
	TSFComposedOperator.$(OBJEXT) TSFDenseMatrix.$(OBJEXT) \
	TSFDiagonalOperator.$(OBJEXT) TSFIdentityOperator.$(OBJEXT) \
	TSFInverseAdjointOperator.$(OBJEXT) \
	TSFInverseOperator.$(OBJEXT) TSFLinearOperatorBase.$(OBJEXT) \
	TSFLinearOperator.$(OBJEXT) TSFMatrixOperator.$(OBJEXT) \
	TSFMatrixView.$(OBJEXT) TSFMultiVectorOperator.$(OBJEXT) \
	TSFScaledOperator.$(OBJEXT) TSFSumOperator.$(OBJEXT) \
	TSFZeroOperator.$(OBJEXT)
am_libtsf_a_OBJECTS = $(am__objects_1)
libtsf_a_OBJECTS = $(am_libtsf_a_OBJECTS)

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)/src/Support
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/TSFAdjointMatrixOperator.Po \
	./$(DEPDIR)/TSFAdjointOperator.Po \
	./$(DEPDIR)/TSFBlockLinearOperator.Po \
	./$(DEPDIR)/TSFComposedOperator.Po \
	./$(DEPDIR)/TSFDenseMatrix.Po \
	./$(DEPDIR)/TSFDiagonalOperator.Po \
	./$(DEPDIR)/TSFIdentityOperator.Po \
	./$(DEPDIR)/TSFInverseAdjointOperator.Po \
	./$(DEPDIR)/TSFInverseOperator.Po \
	./$(DEPDIR)/TSFLinearOperator.Po \
	./$(DEPDIR)/TSFLinearOperatorBase.Po \
	./$(DEPDIR)/TSFMatrixOperator.Po \
	./$(DEPDIR)/TSFMatrixView.Po \
	./$(DEPDIR)/TSFMultiVectorOperator.Po \
	./$(DEPDIR)/TSFScaledOperator.Po \
	./$(DEPDIR)/TSFSumOperator.Po \
	./$(DEPDIR)/TSFZeroOperator.Po
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
DIST_SOURCES = $(libtsf_a_SOURCES)
HEADERS = $(pkginclude_HEADERS)

DIST_COMMON = $(pkginclude_HEADERS) Makefile.am Makefile.in
SOURCES = \
   $(srcdir)/TSFAdjointMatrixOperator.cpp \
   $(srcdir)/TSFAdjointOperator.cpp \
   $(srcdir)/TSFBlockLinearOperator.cpp \
   $(srcdir)/TSFComposedOperator.cpp \
   $(srcdir)/TSFDenseMatrix.cpp \
   $(srcdir)/TSFDiagonalOperator.cpp \
   $(srcdir)/TSFIdentityOperator.cpp \
   $(srcdir)/TSFInverseAdjointOperator.cpp \
   $(srcdir)/TSFInverseOperator.cpp \
   $(srcdir)/TSFLinearOperatorBase.cpp \
   $(srcdir)/TSFLinearOperator.cpp \
   $(srcdir)/TSFMatrixOperator.cpp \
   $(srcdir)/TSFMatrixView.cpp \
   $(srcdir)/TSFMultiVectorOperator.cpp \
   $(srcdir)/TSFScaledOperator.cpp \
   $(srcdir)/TSFSumOperator.cpp \
   $(srcdir)/TSFZeroOperator.cpp 


all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in: # Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  src/LinearOperators/Makefile
Makefile: # $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

AR = ar
libLIBRARIES_INSTALL = $(INSTALL_DATA)
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(libLIBRARIES_INSTALL) $$p $(DESTDIR)$(libdir)/$$f"; \
	    $(libLIBRARIES_INSTALL) $$p $(DESTDIR)$(libdir)/$$f; \
	  else :; fi; \
	done
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    p="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  p="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(libdir)/$$p"; \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
	done

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
TSFAdjointMatrixOperator.$(OBJEXT): \
	$(srcdir)/TSFAdjointMatrixOperator.cpp
TSFAdjointOperator.$(OBJEXT): $(srcdir)/TSFAdjointOperator.cpp
TSFBlockLinearOperator.$(OBJEXT): $(srcdir)/TSFBlockLinearOperator.cpp
TSFComposedOperator.$(OBJEXT): $(srcdir)/TSFComposedOperator.cpp
TSFDenseMatrix.$(OBJEXT): $(srcdir)/TSFDenseMatrix.cpp
TSFDiagonalOperator.$(OBJEXT): $(srcdir)/TSFDiagonalOperator.cpp
TSFIdentityOperator.$(OBJEXT): $(srcdir)/TSFIdentityOperator.cpp
TSFInverseAdjointOperator.$(OBJEXT): \
	$(srcdir)/TSFInverseAdjointOperator.cpp
TSFInverseOperator.$(OBJEXT): $(srcdir)/TSFInverseOperator.cpp
TSFLinearOperatorBase.$(OBJEXT): $(srcdir)/TSFLinearOperatorBase.cpp
TSFLinearOperator.$(OBJEXT): $(srcdir)/TSFLinearOperator.cpp
TSFMatrixOperator.$(OBJEXT): $(srcdir)/TSFMatrixOperator.cpp
TSFMatrixView.$(OBJEXT): $(srcdir)/TSFMatrixView.cpp
TSFMultiVectorOperator.$(OBJEXT): $(srcdir)/TSFMultiVectorOperator.cpp
TSFScaledOperator.$(OBJEXT): $(srcdir)/TSFScaledOperator.cpp
TSFSumOperator.$(OBJEXT): $(srcdir)/TSFSumOperator.cpp
TSFZeroOperator.$(OBJEXT): $(srcdir)/TSFZeroOperator.cpp
libtsf.a: $(libtsf_a_OBJECTS) $(libtsf_a_DEPENDENCIES) 
	-rm -f libtsf.a
	$(libtsf_a_AR) libtsf.a $(libtsf_a_OBJECTS) $(libtsf_a_LIBADD)
	$(RANLIB) libtsf.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/TSFAdjointMatrixOperator.Po
include ./$(DEPDIR)/TSFAdjointOperator.Po
include ./$(DEPDIR)/TSFBlockLinearOperator.Po
include ./$(DEPDIR)/TSFComposedOperator.Po
include ./$(DEPDIR)/TSFDenseMatrix.Po
include ./$(DEPDIR)/TSFDiagonalOperator.Po
include ./$(DEPDIR)/TSFIdentityOperator.Po
include ./$(DEPDIR)/TSFInverseAdjointOperator.Po
include ./$(DEPDIR)/TSFInverseOperator.Po
include ./$(DEPDIR)/TSFLinearOperator.Po
include ./$(DEPDIR)/TSFLinearOperatorBase.Po
include ./$(DEPDIR)/TSFMatrixOperator.Po
include ./$(DEPDIR)/TSFMatrixView.Po
include ./$(DEPDIR)/TSFMultiVectorOperator.Po
include ./$(DEPDIR)/TSFScaledOperator.Po
include ./$(DEPDIR)/TSFSumOperator.Po
include ./$(DEPDIR)/TSFZeroOperator.Po

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'`; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'`

TSFAdjointMatrixOperator.o: $(srcdir)/TSFAdjointMatrixOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFAdjointMatrixOperator.o -MD -MP -MF "$(DEPDIR)/TSFAdjointMatrixOperator.Tpo" \
	  -c -o TSFAdjointMatrixOperator.o `test -f '$(srcdir)/TSFAdjointMatrixOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFAdjointMatrixOperator.cpp; \
	then mv "$(DEPDIR)/TSFAdjointMatrixOperator.Tpo" "$(DEPDIR)/TSFAdjointMatrixOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFAdjointMatrixOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFAdjointMatrixOperator.cpp' object='TSFAdjointMatrixOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFAdjointMatrixOperator.Po' tmpdepfile='$(DEPDIR)/TSFAdjointMatrixOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFAdjointMatrixOperator.o `test -f '$(srcdir)/TSFAdjointMatrixOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFAdjointMatrixOperator.cpp

TSFAdjointMatrixOperator.obj: $(srcdir)/TSFAdjointMatrixOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFAdjointMatrixOperator.obj -MD -MP -MF "$(DEPDIR)/TSFAdjointMatrixOperator.Tpo" \
	  -c -o TSFAdjointMatrixOperator.obj `if test -f '$(srcdir)/TSFAdjointMatrixOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFAdjointMatrixOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFAdjointMatrixOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFAdjointMatrixOperator.Tpo" "$(DEPDIR)/TSFAdjointMatrixOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFAdjointMatrixOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFAdjointMatrixOperator.cpp' object='TSFAdjointMatrixOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFAdjointMatrixOperator.Po' tmpdepfile='$(DEPDIR)/TSFAdjointMatrixOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFAdjointMatrixOperator.obj `if test -f '$(srcdir)/TSFAdjointMatrixOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFAdjointMatrixOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFAdjointMatrixOperator.cpp'`

TSFAdjointOperator.o: $(srcdir)/TSFAdjointOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFAdjointOperator.o -MD -MP -MF "$(DEPDIR)/TSFAdjointOperator.Tpo" \
	  -c -o TSFAdjointOperator.o `test -f '$(srcdir)/TSFAdjointOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFAdjointOperator.cpp; \
	then mv "$(DEPDIR)/TSFAdjointOperator.Tpo" "$(DEPDIR)/TSFAdjointOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFAdjointOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFAdjointOperator.cpp' object='TSFAdjointOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFAdjointOperator.Po' tmpdepfile='$(DEPDIR)/TSFAdjointOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFAdjointOperator.o `test -f '$(srcdir)/TSFAdjointOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFAdjointOperator.cpp

TSFAdjointOperator.obj: $(srcdir)/TSFAdjointOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFAdjointOperator.obj -MD -MP -MF "$(DEPDIR)/TSFAdjointOperator.Tpo" \
	  -c -o TSFAdjointOperator.obj `if test -f '$(srcdir)/TSFAdjointOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFAdjointOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFAdjointOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFAdjointOperator.Tpo" "$(DEPDIR)/TSFAdjointOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFAdjointOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFAdjointOperator.cpp' object='TSFAdjointOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFAdjointOperator.Po' tmpdepfile='$(DEPDIR)/TSFAdjointOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFAdjointOperator.obj `if test -f '$(srcdir)/TSFAdjointOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFAdjointOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFAdjointOperator.cpp'`

TSFBlockLinearOperator.o: $(srcdir)/TSFBlockLinearOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFBlockLinearOperator.o -MD -MP -MF "$(DEPDIR)/TSFBlockLinearOperator.Tpo" \
	  -c -o TSFBlockLinearOperator.o `test -f '$(srcdir)/TSFBlockLinearOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFBlockLinearOperator.cpp; \
	then mv "$(DEPDIR)/TSFBlockLinearOperator.Tpo" "$(DEPDIR)/TSFBlockLinearOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFBlockLinearOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFBlockLinearOperator.cpp' object='TSFBlockLinearOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFBlockLinearOperator.Po' tmpdepfile='$(DEPDIR)/TSFBlockLinearOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFBlockLinearOperator.o `test -f '$(srcdir)/TSFBlockLinearOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFBlockLinearOperator.cpp

TSFBlockLinearOperator.obj: $(srcdir)/TSFBlockLinearOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFBlockLinearOperator.obj -MD -MP -MF "$(DEPDIR)/TSFBlockLinearOperator.Tpo" \
	  -c -o TSFBlockLinearOperator.obj `if test -f '$(srcdir)/TSFBlockLinearOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFBlockLinearOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFBlockLinearOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFBlockLinearOperator.Tpo" "$(DEPDIR)/TSFBlockLinearOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFBlockLinearOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFBlockLinearOperator.cpp' object='TSFBlockLinearOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFBlockLinearOperator.Po' tmpdepfile='$(DEPDIR)/TSFBlockLinearOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFBlockLinearOperator.obj `if test -f '$(srcdir)/TSFBlockLinearOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFBlockLinearOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFBlockLinearOperator.cpp'`

TSFComposedOperator.o: $(srcdir)/TSFComposedOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFComposedOperator.o -MD -MP -MF "$(DEPDIR)/TSFComposedOperator.Tpo" \
	  -c -o TSFComposedOperator.o `test -f '$(srcdir)/TSFComposedOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFComposedOperator.cpp; \
	then mv "$(DEPDIR)/TSFComposedOperator.Tpo" "$(DEPDIR)/TSFComposedOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFComposedOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFComposedOperator.cpp' object='TSFComposedOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFComposedOperator.Po' tmpdepfile='$(DEPDIR)/TSFComposedOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFComposedOperator.o `test -f '$(srcdir)/TSFComposedOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFComposedOperator.cpp

TSFComposedOperator.obj: $(srcdir)/TSFComposedOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFComposedOperator.obj -MD -MP -MF "$(DEPDIR)/TSFComposedOperator.Tpo" \
	  -c -o TSFComposedOperator.obj `if test -f '$(srcdir)/TSFComposedOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFComposedOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFComposedOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFComposedOperator.Tpo" "$(DEPDIR)/TSFComposedOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFComposedOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFComposedOperator.cpp' object='TSFComposedOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFComposedOperator.Po' tmpdepfile='$(DEPDIR)/TSFComposedOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFComposedOperator.obj `if test -f '$(srcdir)/TSFComposedOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFComposedOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFComposedOperator.cpp'`

TSFDenseMatrix.o: $(srcdir)/TSFDenseMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFDenseMatrix.o -MD -MP -MF "$(DEPDIR)/TSFDenseMatrix.Tpo" \
	  -c -o TSFDenseMatrix.o `test -f '$(srcdir)/TSFDenseMatrix.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFDenseMatrix.cpp; \
	then mv "$(DEPDIR)/TSFDenseMatrix.Tpo" "$(DEPDIR)/TSFDenseMatrix.Po"; \
	else rm -f "$(DEPDIR)/TSFDenseMatrix.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFDenseMatrix.cpp' object='TSFDenseMatrix.o' libtool=no \
#	depfile='$(DEPDIR)/TSFDenseMatrix.Po' tmpdepfile='$(DEPDIR)/TSFDenseMatrix.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFDenseMatrix.o `test -f '$(srcdir)/TSFDenseMatrix.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFDenseMatrix.cpp

TSFDenseMatrix.obj: $(srcdir)/TSFDenseMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFDenseMatrix.obj -MD -MP -MF "$(DEPDIR)/TSFDenseMatrix.Tpo" \
	  -c -o TSFDenseMatrix.obj `if test -f '$(srcdir)/TSFDenseMatrix.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFDenseMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFDenseMatrix.cpp'`; \
	then mv "$(DEPDIR)/TSFDenseMatrix.Tpo" "$(DEPDIR)/TSFDenseMatrix.Po"; \
	else rm -f "$(DEPDIR)/TSFDenseMatrix.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFDenseMatrix.cpp' object='TSFDenseMatrix.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFDenseMatrix.Po' tmpdepfile='$(DEPDIR)/TSFDenseMatrix.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFDenseMatrix.obj `if test -f '$(srcdir)/TSFDenseMatrix.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFDenseMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFDenseMatrix.cpp'`

TSFDiagonalOperator.o: $(srcdir)/TSFDiagonalOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFDiagonalOperator.o -MD -MP -MF "$(DEPDIR)/TSFDiagonalOperator.Tpo" \
	  -c -o TSFDiagonalOperator.o `test -f '$(srcdir)/TSFDiagonalOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFDiagonalOperator.cpp; \
	then mv "$(DEPDIR)/TSFDiagonalOperator.Tpo" "$(DEPDIR)/TSFDiagonalOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFDiagonalOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFDiagonalOperator.cpp' object='TSFDiagonalOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFDiagonalOperator.Po' tmpdepfile='$(DEPDIR)/TSFDiagonalOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFDiagonalOperator.o `test -f '$(srcdir)/TSFDiagonalOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFDiagonalOperator.cpp

TSFDiagonalOperator.obj: $(srcdir)/TSFDiagonalOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFDiagonalOperator.obj -MD -MP -MF "$(DEPDIR)/TSFDiagonalOperator.Tpo" \
	  -c -o TSFDiagonalOperator.obj `if test -f '$(srcdir)/TSFDiagonalOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFDiagonalOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFDiagonalOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFDiagonalOperator.Tpo" "$(DEPDIR)/TSFDiagonalOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFDiagonalOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFDiagonalOperator.cpp' object='TSFDiagonalOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFDiagonalOperator.Po' tmpdepfile='$(DEPDIR)/TSFDiagonalOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFDiagonalOperator.obj `if test -f '$(srcdir)/TSFDiagonalOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFDiagonalOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFDiagonalOperator.cpp'`

TSFIdentityOperator.o: $(srcdir)/TSFIdentityOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFIdentityOperator.o -MD -MP -MF "$(DEPDIR)/TSFIdentityOperator.Tpo" \
	  -c -o TSFIdentityOperator.o `test -f '$(srcdir)/TSFIdentityOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFIdentityOperator.cpp; \
	then mv "$(DEPDIR)/TSFIdentityOperator.Tpo" "$(DEPDIR)/TSFIdentityOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFIdentityOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFIdentityOperator.cpp' object='TSFIdentityOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFIdentityOperator.Po' tmpdepfile='$(DEPDIR)/TSFIdentityOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFIdentityOperator.o `test -f '$(srcdir)/TSFIdentityOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFIdentityOperator.cpp

TSFIdentityOperator.obj: $(srcdir)/TSFIdentityOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFIdentityOperator.obj -MD -MP -MF "$(DEPDIR)/TSFIdentityOperator.Tpo" \
	  -c -o TSFIdentityOperator.obj `if test -f '$(srcdir)/TSFIdentityOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFIdentityOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFIdentityOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFIdentityOperator.Tpo" "$(DEPDIR)/TSFIdentityOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFIdentityOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFIdentityOperator.cpp' object='TSFIdentityOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFIdentityOperator.Po' tmpdepfile='$(DEPDIR)/TSFIdentityOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFIdentityOperator.obj `if test -f '$(srcdir)/TSFIdentityOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFIdentityOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFIdentityOperator.cpp'`

TSFInverseAdjointOperator.o: $(srcdir)/TSFInverseAdjointOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFInverseAdjointOperator.o -MD -MP -MF "$(DEPDIR)/TSFInverseAdjointOperator.Tpo" \
	  -c -o TSFInverseAdjointOperator.o `test -f '$(srcdir)/TSFInverseAdjointOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFInverseAdjointOperator.cpp; \
	then mv "$(DEPDIR)/TSFInverseAdjointOperator.Tpo" "$(DEPDIR)/TSFInverseAdjointOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFInverseAdjointOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFInverseAdjointOperator.cpp' object='TSFInverseAdjointOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFInverseAdjointOperator.Po' tmpdepfile='$(DEPDIR)/TSFInverseAdjointOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFInverseAdjointOperator.o `test -f '$(srcdir)/TSFInverseAdjointOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFInverseAdjointOperator.cpp

TSFInverseAdjointOperator.obj: $(srcdir)/TSFInverseAdjointOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFInverseAdjointOperator.obj -MD -MP -MF "$(DEPDIR)/TSFInverseAdjointOperator.Tpo" \
	  -c -o TSFInverseAdjointOperator.obj `if test -f '$(srcdir)/TSFInverseAdjointOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFInverseAdjointOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFInverseAdjointOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFInverseAdjointOperator.Tpo" "$(DEPDIR)/TSFInverseAdjointOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFInverseAdjointOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFInverseAdjointOperator.cpp' object='TSFInverseAdjointOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFInverseAdjointOperator.Po' tmpdepfile='$(DEPDIR)/TSFInverseAdjointOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFInverseAdjointOperator.obj `if test -f '$(srcdir)/TSFInverseAdjointOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFInverseAdjointOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFInverseAdjointOperator.cpp'`

TSFInverseOperator.o: $(srcdir)/TSFInverseOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFInverseOperator.o -MD -MP -MF "$(DEPDIR)/TSFInverseOperator.Tpo" \
	  -c -o TSFInverseOperator.o `test -f '$(srcdir)/TSFInverseOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFInverseOperator.cpp; \
	then mv "$(DEPDIR)/TSFInverseOperator.Tpo" "$(DEPDIR)/TSFInverseOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFInverseOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFInverseOperator.cpp' object='TSFInverseOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFInverseOperator.Po' tmpdepfile='$(DEPDIR)/TSFInverseOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFInverseOperator.o `test -f '$(srcdir)/TSFInverseOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFInverseOperator.cpp

TSFInverseOperator.obj: $(srcdir)/TSFInverseOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFInverseOperator.obj -MD -MP -MF "$(DEPDIR)/TSFInverseOperator.Tpo" \
	  -c -o TSFInverseOperator.obj `if test -f '$(srcdir)/TSFInverseOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFInverseOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFInverseOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFInverseOperator.Tpo" "$(DEPDIR)/TSFInverseOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFInverseOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFInverseOperator.cpp' object='TSFInverseOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFInverseOperator.Po' tmpdepfile='$(DEPDIR)/TSFInverseOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFInverseOperator.obj `if test -f '$(srcdir)/TSFInverseOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFInverseOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFInverseOperator.cpp'`

TSFLinearOperatorBase.o: $(srcdir)/TSFLinearOperatorBase.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFLinearOperatorBase.o -MD -MP -MF "$(DEPDIR)/TSFLinearOperatorBase.Tpo" \
	  -c -o TSFLinearOperatorBase.o `test -f '$(srcdir)/TSFLinearOperatorBase.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFLinearOperatorBase.cpp; \
	then mv "$(DEPDIR)/TSFLinearOperatorBase.Tpo" "$(DEPDIR)/TSFLinearOperatorBase.Po"; \
	else rm -f "$(DEPDIR)/TSFLinearOperatorBase.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFLinearOperatorBase.cpp' object='TSFLinearOperatorBase.o' libtool=no \
#	depfile='$(DEPDIR)/TSFLinearOperatorBase.Po' tmpdepfile='$(DEPDIR)/TSFLinearOperatorBase.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFLinearOperatorBase.o `test -f '$(srcdir)/TSFLinearOperatorBase.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFLinearOperatorBase.cpp

TSFLinearOperatorBase.obj: $(srcdir)/TSFLinearOperatorBase.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFLinearOperatorBase.obj -MD -MP -MF "$(DEPDIR)/TSFLinearOperatorBase.Tpo" \
	  -c -o TSFLinearOperatorBase.obj `if test -f '$(srcdir)/TSFLinearOperatorBase.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFLinearOperatorBase.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFLinearOperatorBase.cpp'`; \
	then mv "$(DEPDIR)/TSFLinearOperatorBase.Tpo" "$(DEPDIR)/TSFLinearOperatorBase.Po"; \
	else rm -f "$(DEPDIR)/TSFLinearOperatorBase.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFLinearOperatorBase.cpp' object='TSFLinearOperatorBase.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFLinearOperatorBase.Po' tmpdepfile='$(DEPDIR)/TSFLinearOperatorBase.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFLinearOperatorBase.obj `if test -f '$(srcdir)/TSFLinearOperatorBase.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFLinearOperatorBase.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFLinearOperatorBase.cpp'`

TSFLinearOperator.o: $(srcdir)/TSFLinearOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFLinearOperator.o -MD -MP -MF "$(DEPDIR)/TSFLinearOperator.Tpo" \
	  -c -o TSFLinearOperator.o `test -f '$(srcdir)/TSFLinearOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFLinearOperator.cpp; \
	then mv "$(DEPDIR)/TSFLinearOperator.Tpo" "$(DEPDIR)/TSFLinearOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFLinearOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFLinearOperator.cpp' object='TSFLinearOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFLinearOperator.Po' tmpdepfile='$(DEPDIR)/TSFLinearOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFLinearOperator.o `test -f '$(srcdir)/TSFLinearOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFLinearOperator.cpp

TSFLinearOperator.obj: $(srcdir)/TSFLinearOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFLinearOperator.obj -MD -MP -MF "$(DEPDIR)/TSFLinearOperator.Tpo" \
	  -c -o TSFLinearOperator.obj `if test -f '$(srcdir)/TSFLinearOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFLinearOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFLinearOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFLinearOperator.Tpo" "$(DEPDIR)/TSFLinearOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFLinearOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFLinearOperator.cpp' object='TSFLinearOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFLinearOperator.Po' tmpdepfile='$(DEPDIR)/TSFLinearOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFLinearOperator.obj `if test -f '$(srcdir)/TSFLinearOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFLinearOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFLinearOperator.cpp'`

TSFMatrixOperator.o: $(srcdir)/TSFMatrixOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFMatrixOperator.o -MD -MP -MF "$(DEPDIR)/TSFMatrixOperator.Tpo" \
	  -c -o TSFMatrixOperator.o `test -f '$(srcdir)/TSFMatrixOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFMatrixOperator.cpp; \
	then mv "$(DEPDIR)/TSFMatrixOperator.Tpo" "$(DEPDIR)/TSFMatrixOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFMatrixOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFMatrixOperator.cpp' object='TSFMatrixOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFMatrixOperator.Po' tmpdepfile='$(DEPDIR)/TSFMatrixOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFMatrixOperator.o `test -f '$(srcdir)/TSFMatrixOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFMatrixOperator.cpp

TSFMatrixOperator.obj: $(srcdir)/TSFMatrixOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFMatrixOperator.obj -MD -MP -MF "$(DEPDIR)/TSFMatrixOperator.Tpo" \
	  -c -o TSFMatrixOperator.obj `if test -f '$(srcdir)/TSFMatrixOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFMatrixOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFMatrixOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFMatrixOperator.Tpo" "$(DEPDIR)/TSFMatrixOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFMatrixOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFMatrixOperator.cpp' object='TSFMatrixOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFMatrixOperator.Po' tmpdepfile='$(DEPDIR)/TSFMatrixOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFMatrixOperator.obj `if test -f '$(srcdir)/TSFMatrixOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFMatrixOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFMatrixOperator.cpp'`

TSFMatrixView.o: $(srcdir)/TSFMatrixView.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFMatrixView.o -MD -MP -MF "$(DEPDIR)/TSFMatrixView.Tpo" \
	  -c -o TSFMatrixView.o `test -f '$(srcdir)/TSFMatrixView.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFMatrixView.cpp; \
	then mv "$(DEPDIR)/TSFMatrixView.Tpo" "$(DEPDIR)/TSFMatrixView.Po"; \
	else rm -f "$(DEPDIR)/TSFMatrixView.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFMatrixView.cpp' object='TSFMatrixView.o' libtool=no \
#	depfile='$(DEPDIR)/TSFMatrixView.Po' tmpdepfile='$(DEPDIR)/TSFMatrixView.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFMatrixView.o `test -f '$(srcdir)/TSFMatrixView.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFMatrixView.cpp

TSFMatrixView.obj: $(srcdir)/TSFMatrixView.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFMatrixView.obj -MD -MP -MF "$(DEPDIR)/TSFMatrixView.Tpo" \
	  -c -o TSFMatrixView.obj `if test -f '$(srcdir)/TSFMatrixView.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFMatrixView.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFMatrixView.cpp'`; \
	then mv "$(DEPDIR)/TSFMatrixView.Tpo" "$(DEPDIR)/TSFMatrixView.Po"; \
	else rm -f "$(DEPDIR)/TSFMatrixView.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFMatrixView.cpp' object='TSFMatrixView.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFMatrixView.Po' tmpdepfile='$(DEPDIR)/TSFMatrixView.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFMatrixView.obj `if test -f '$(srcdir)/TSFMatrixView.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFMatrixView.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFMatrixView.cpp'`

TSFMultiVectorOperator.o: $(srcdir)/TSFMultiVectorOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFMultiVectorOperator.o -MD -MP -MF "$(DEPDIR)/TSFMultiVectorOperator.Tpo" \
	  -c -o TSFMultiVectorOperator.o `test -f '$(srcdir)/TSFMultiVectorOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFMultiVectorOperator.cpp; \
	then mv "$(DEPDIR)/TSFMultiVectorOperator.Tpo" "$(DEPDIR)/TSFMultiVectorOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFMultiVectorOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFMultiVectorOperator.cpp' object='TSFMultiVectorOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFMultiVectorOperator.Po' tmpdepfile='$(DEPDIR)/TSFMultiVectorOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFMultiVectorOperator.o `test -f '$(srcdir)/TSFMultiVectorOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFMultiVectorOperator.cpp

TSFMultiVectorOperator.obj: $(srcdir)/TSFMultiVectorOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFMultiVectorOperator.obj -MD -MP -MF "$(DEPDIR)/TSFMultiVectorOperator.Tpo" \
	  -c -o TSFMultiVectorOperator.obj `if test -f '$(srcdir)/TSFMultiVectorOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFMultiVectorOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFMultiVectorOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFMultiVectorOperator.Tpo" "$(DEPDIR)/TSFMultiVectorOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFMultiVectorOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFMultiVectorOperator.cpp' object='TSFMultiVectorOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFMultiVectorOperator.Po' tmpdepfile='$(DEPDIR)/TSFMultiVectorOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFMultiVectorOperator.obj `if test -f '$(srcdir)/TSFMultiVectorOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFMultiVectorOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFMultiVectorOperator.cpp'`

TSFScaledOperator.o: $(srcdir)/TSFScaledOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFScaledOperator.o -MD -MP -MF "$(DEPDIR)/TSFScaledOperator.Tpo" \
	  -c -o TSFScaledOperator.o `test -f '$(srcdir)/TSFScaledOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFScaledOperator.cpp; \
	then mv "$(DEPDIR)/TSFScaledOperator.Tpo" "$(DEPDIR)/TSFScaledOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFScaledOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFScaledOperator.cpp' object='TSFScaledOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFScaledOperator.Po' tmpdepfile='$(DEPDIR)/TSFScaledOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFScaledOperator.o `test -f '$(srcdir)/TSFScaledOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFScaledOperator.cpp

TSFScaledOperator.obj: $(srcdir)/TSFScaledOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFScaledOperator.obj -MD -MP -MF "$(DEPDIR)/TSFScaledOperator.Tpo" \
	  -c -o TSFScaledOperator.obj `if test -f '$(srcdir)/TSFScaledOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFScaledOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFScaledOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFScaledOperator.Tpo" "$(DEPDIR)/TSFScaledOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFScaledOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFScaledOperator.cpp' object='TSFScaledOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFScaledOperator.Po' tmpdepfile='$(DEPDIR)/TSFScaledOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFScaledOperator.obj `if test -f '$(srcdir)/TSFScaledOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFScaledOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFScaledOperator.cpp'`

TSFSumOperator.o: $(srcdir)/TSFSumOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFSumOperator.o -MD -MP -MF "$(DEPDIR)/TSFSumOperator.Tpo" \
	  -c -o TSFSumOperator.o `test -f '$(srcdir)/TSFSumOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFSumOperator.cpp; \
	then mv "$(DEPDIR)/TSFSumOperator.Tpo" "$(DEPDIR)/TSFSumOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFSumOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFSumOperator.cpp' object='TSFSumOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFSumOperator.Po' tmpdepfile='$(DEPDIR)/TSFSumOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFSumOperator.o `test -f '$(srcdir)/TSFSumOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFSumOperator.cpp

TSFSumOperator.obj: $(srcdir)/TSFSumOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFSumOperator.obj -MD -MP -MF "$(DEPDIR)/TSFSumOperator.Tpo" \
	  -c -o TSFSumOperator.obj `if test -f '$(srcdir)/TSFSumOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFSumOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFSumOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFSumOperator.Tpo" "$(DEPDIR)/TSFSumOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFSumOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFSumOperator.cpp' object='TSFSumOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFSumOperator.Po' tmpdepfile='$(DEPDIR)/TSFSumOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFSumOperator.obj `if test -f '$(srcdir)/TSFSumOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFSumOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFSumOperator.cpp'`

TSFZeroOperator.o: $(srcdir)/TSFZeroOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFZeroOperator.o -MD -MP -MF "$(DEPDIR)/TSFZeroOperator.Tpo" \
	  -c -o TSFZeroOperator.o `test -f '$(srcdir)/TSFZeroOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFZeroOperator.cpp; \
	then mv "$(DEPDIR)/TSFZeroOperator.Tpo" "$(DEPDIR)/TSFZeroOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFZeroOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFZeroOperator.cpp' object='TSFZeroOperator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFZeroOperator.Po' tmpdepfile='$(DEPDIR)/TSFZeroOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFZeroOperator.o `test -f '$(srcdir)/TSFZeroOperator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFZeroOperator.cpp

TSFZeroOperator.obj: $(srcdir)/TSFZeroOperator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFZeroOperator.obj -MD -MP -MF "$(DEPDIR)/TSFZeroOperator.Tpo" \
	  -c -o TSFZeroOperator.obj `if test -f '$(srcdir)/TSFZeroOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFZeroOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFZeroOperator.cpp'`; \
	then mv "$(DEPDIR)/TSFZeroOperator.Tpo" "$(DEPDIR)/TSFZeroOperator.Po"; \
	else rm -f "$(DEPDIR)/TSFZeroOperator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFZeroOperator.cpp' object='TSFZeroOperator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFZeroOperator.Po' tmpdepfile='$(DEPDIR)/TSFZeroOperator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFZeroOperator.obj `if test -f '$(srcdir)/TSFZeroOperator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFZeroOperator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFZeroOperator.cpp'`
uninstall-info-am:
pkgincludeHEADERS_INSTALL = $(INSTALL_HEADER)
install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(pkgincludedir)
	@list='$(pkginclude_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(pkgincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pkgincludedir)/$$f"; \
	  $(pkgincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pkgincludedir)/$$f; \
	done

uninstall-pkgincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(pkginclude_HEADERS)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(pkgincludedir)/$$f"; \
	  rm -f $(DESTDIR)$(pkgincludedir)/$$f; \
	done

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS)

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(libdir) $(DESTDIR)$(pkgincludedir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am: install-pkgincludeHEADERS

install-exec-am: install-libLIBRARIES

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am uninstall-libLIBRARIES \
	uninstall-pkgincludeHEADERS

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLIBRARIES ctags distclean distclean-compile \
	distclean-depend distclean-generic distclean-tags distdir dvi \
	dvi-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-libLIBRARIES install-man \
	install-pkgincludeHEADERS install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am uninstall-libLIBRARIES \
	uninstall-pkgincludeHEADERS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
