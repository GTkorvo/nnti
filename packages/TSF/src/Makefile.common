
TSF_LIB = libTSF.a

libTSF_a_SOURCES = $(SOURCES)


TSF_INCLUDES = -I$(top_srcdir)/src/Support -I$(top_srcdir)/src/Vectors \
	-I$(top_srcdir)/src/VectorSpaces -I$(top_srcdir)/src/LinearOperators \
	-I$(top_srcdir)/src/Preconditioners -I$(top_srcdir)/src/NonlinearOperators \
	-I$(top_srcdir)/src/LinearSolvers -I$(top_srcdir)/src/NonlinearSolvers \
	-I$(top_srcdir)/src/LinearProblem -I$(top_srcdir)/src/Readers \
	-I$(top_srcdir)/src/Writers -I$(top_srcdir)/src/XML \
	-I$(top_srcdir)/src/Implementations 

#JW added all paths beginning with -I$(top_builddir) so that TSF could be
#configured and built in a build tree separate from the source tree.
#KL added teuchos dependencies, because ML now depends on teuchos
AM_CPPFLAGS = $(TSF_INCLUDES)\
-I$(top_builddir)/../epetra/src\
-I$(top_builddir)/../ifpack/src\
-I$(top_builddir)/../aztecoo/src\
-I$(top_builddir)/../teuchos/src\
-I$(top_builddir)/../ml/src/Include\
-I$(top_builddir)/../ml/src\
-I$(top_builddir)/../ml/src/Coarsen\
-I$(top_builddir)/../ml/src/Comm\
-I$(top_builddir)/../ml/src/FEGrid\
-I$(top_builddir)/../ml/src/Krylov\
-I$(top_builddir)/../ml/src/Main\
-I$(top_builddir)/../ml/src/Old\
-I$(top_builddir)/../ml/src/Operator\
-I$(top_builddir)/../ml/src/Runtime\
-I$(top_builddir)/../ml/src/Smoother\
-I$(top_builddir)/../ml/src/Utils\
-I$(top_srcdir)/../epetra/src\
-I$(top_srcdir)/../ifpack/src\
-I$(top_srcdir)/../aztecoo/src\
-I$(top_srcdir)/../teuchos/src\
-I$(top_srcdir)/../ml/src/Include\
-I$(top_srcdir)/../ml/src\
-I$(top_srcdir)/../ml/src/Coarsen\
-I$(top_srcdir)/../ml/src/Comm\
-I$(top_srcdir)/../ml/src/FEGrid\
-I$(top_srcdir)/../ml/src/Krylov\
-I$(top_srcdir)/../ml/src/Main\
-I$(top_srcdir)/../ml/src/Old\
-I$(top_srcdir)/../ml/src/Operator\
-I$(top_srcdir)/../ml/src/Runtime\
-I$(top_srcdir)/../ml/src/Smoother\
-I$(top_srcdir)/../ml/src/Utils


# ------------------------------------------------------------------------
# For using a special archiver
# ------------------------------------------------------------------------

# SPECIAL NOTE: Why is the "else" there?  For some reason, automake
# fails to define <lib>_AR of USE_ALTERNATE_AR is false, so we have to
# define it manually.

if USE_ALTERNATE_AR

libTSF_a_AR = $(ALTERNATE_AR)
else

libTSF_a_AR = $(AR) cru

endif

# ------------------------------------------------------------------------
# Some C++ compilers create extra .o-files for templates. We need to
# be sure to include these, and this is the hack to do it.
# ------------------------------------------------------------------------

libTSF_a_LIBADD = $(XTRALDADD)

# ------------------------------------------------------------------------
# List of all libraries to install in $(libexecdir)
# ------------------------------------------------------------------------

lib_LIBRARIES = $(TSF_LIB)

include_HEADERS = $(SOURCES_H) 

# ------------------------------------------------------------------------
# Special stuff to install in our special $(execincludedir)
# ------------------------------------------------------------------------

# SPECIAL NOTE: Ifpack_config.h is a machine-dependent file, so we need
# to install it in the machine-dependent directory. However, that is
# not a default installation directory, so we had to create it
# special.

execincludedir = $(exec_prefix)/include

nodist_execinclude_HEADERS = Support/TSFConfig.h

# ------------------------------------------------------------------------
# Files to be deleted by 'make maintainer-clean'
# ------------------------------------------------------------------------

MAINTAINERCLEANFILES = Makefile.in 
