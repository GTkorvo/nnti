# Makefile.in generated by automake 1.7.1 from Makefile.am.
# src/Support/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# @HEADER
# @HEADER

# ------------------------------------------------------------------------
# For each category, create two variables - NAME and NAME_H. The
# second is the list of headers to be installed, i.e., any header that
# might someday be needed by some other code outside Ifpack. The first is
# the list of all source and any other header files.
# ------------------------------------------------------------------------
# For now, these are just guesses as to where the files belong.
# Files that prove to be troublesome have been commented out and 
# placed at the bottom of the appropriate section

#Ifpack_CrsGraph.h
#Ifpack_CrsRick.h
#ifp_blas1.h
#
#
#

srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/TSF
pkglibdir = $(libdir)/TSF
pkgincludedir = $(includedir)/TSF
top_builddir = ../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run aclocal-1.7
ALTERNATE_AR = 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run tar
AUTOCONF = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run automake-1.7
AWK = gawk
BLAS_LIBS = -lblas
BUILD_OLDIFPACK_FALSE = 
BUILD_OLDIFPACK_TRUE = #
CC = cc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = g77
FFLAGS = -g -O2
FLIBS =  -L/usr/local/gcc-3.0.4/lib/gcc-lib/i686-pc-linux-gnu/3.0.4 -L/usr/local/gcc-3.0.4/lib/gcc-lib/i686-pc-linux-gnu/3.0.4/../../.. -lg2c -lm
HAVE_MPI_FALSE = 
HAVE_MPI_TRUE = #
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LAPACK_LIBS = -llapack
LDFLAGS = 
LIBS = 
LTLIBOBJS = 
MAINT = #
MAINTAINER_MODE_FALSE = 
MAINTAINER_MODE_TRUE = #
MAKEINFO = ${SHELL} /home/kevin/Projects/Trilinos/packages/TSF/config/missing --run makeinfo
MPI_CC_EXISTS = 
MPI_CXX_EXISTS = 
MPI_F77_EXISTS = 
OBJEXT = o
PACKAGE = TSF
PACKAGE_BUGREPORT = krlong@sandia.gov
PACKAGE_NAME = TSF
PACKAGE_STRING = TSF 2.0
PACKAGE_TARNAME = tsf
PACKAGE_VERSION = 2.0
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
USE_ALTERNATE_AR_FALSE = 
USE_ALTERNATE_AR_TRUE = #
VERSION = 2.0
XTRALDADD = 
ac_aux_dir = config
ac_ct_CC = cc
ac_ct_CXX = g++
ac_ct_F77 = g77
ac_ct_RANLIB = ranlib
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__quote = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/kevin/Projects/Trilinos/packages/TSF/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc

CORE_H = \
	$(srcdir)/TSFObject.h \
	$(srcdir)/TSFSmartPtr.h \
	$(srcdir)/TSFUnsharedPtr.h \
	$(srcdir)/TSFGeneralizedIndex.h \
	$(srcdir)/TSFUtils.h \
	$(srcdir)/TSFCommandLine.h \
	$(srcdir)/StrUtils.h \
	$(srcdir)/TSFSystem.h \
	$(srcdir)/TSFDefs.h 


ERRORS_H = \
	$(srcdir)/TSFError.h \
	$(srcdir)/TSFDefaultRaiseHandler.h \
	$(srcdir)/TSFRaiseHandlerBase.h 


OUTPUT_H = \
	$(srcdir)/TSFOut.h \
	$(srcdir)/TSFWriterBase.h \
	$(srcdir)/TSFDefaultWriter.h 


CONTAINERS_H = \
	$(srcdir)/TSFArray.h \
	$(srcdir)/TSFHashtable.h \
	$(srcdir)/TSFHashSet.h \
	$(srcdir)/TSFHashUtils.h \
	$(srcdir)/TSFIntHashtable.h


TIMERS_H = \
	$(srcdir)/TSFTimer.h \
	$(srcdir)/TSFTimeMonitor.h 


RANDOM_H = \
	$(srcdir)/TSFRandomNumberGenerator.h \
	$(srcdir)/SystemRand.h \
	$(srcdir)/DLARAN.h 


RANDOM = \
	$(srcdir)/TSFRandomNumberGenerator.cpp \
	$(srcdir)/SystemRand.cpp \
	$(srcdir)/DLARAN.cpp 


PARAMETERS_H = \
	$(srcdir)/TSFParameter.h \
	$(srcdir)/TSFParameterList.h \
	$(srcdir)/TSFParameterListImplem.h \
	$(srcdir)/TSFParameterBase.h \
	$(srcdir)/TSFParameterImplem.h 


PARAMETERS = \
	$(srcdir)/TSFParameter.cpp \
	$(srcdir)/TSFParameterList.cpp \
	$(srcdir)/TSFParameterListImplem.cpp \
	$(srcdir)/TSFParameterBase.cpp \
	$(srcdir)/TSFParameterImplem.cpp 


CORE = \
	$(srcdir)/TSFObject.cpp \
	$(srcdir)/TSFSmartPtr.cpp \
	$(srcdir)/TSFUnsharedPtr.cpp \
	$(srcdir)/TSFGeneralizedIndex.cpp\
	$(srcdir)/TSFUtils.cpp


ERRORS = \
	$(srcdir)/TSFError.cpp \
	$(srcdir)/TSFDefaultRaiseHandler.cpp 


OUTPUT = \
	$(srcdir)/TSFOut.cpp \
	$(srcdir)/TSFDefaultWriter.cpp 


CONTAINERS = \
	$(srcdir)/TSFHashUtils.cpp \
	$(srcdir)/TSFIntHashtable.cpp


TIMERS = \
	$(srcdir)/TSFTimer.cpp 


MPISTUFF_H = \
	$(srcdir)/TSFMPI.h


MPISTUFF = \
	$(srcdir)/TSFMPI.cpp


BLASSTUFF_H = \
	$(srcdir)/TSFBlas.h


BLASSTUFF = 
TSF_INCLUDES = -I$(top_srcdir)/src/Support -I$(top_srcdir)/src/Vectors \
	-I$(top_srcdir)/src/VectorSpaces -I$(top_srcdir)/src/LinearOperators \
	-I$(top_srcdir)/src/Preconditioners -I$(top_srcdir)/src/NonlinearOperators \
	-I$(top_srcdir)/src/LinearSolvers -I$(top_srcdir)/src/NonlinearSolvers \
	-I$(top_srcdir)/src/LinearProblem -I$(top_srcdir)/src/Readers \
	-I$(top_srcdir)/src/Writers -I$(top_srcdir)/src/XML \
	-I$(top_srcdir)/src/Implementations


AM_CPPFLAGS = $(TSF_INCLUDES) -I$(top_srcdir)/../aztecoo/src -I$(top_builddir)/../aztecoo/src \
	-I$(top_srcdir)/../epetra/src -I$(top_builddir)/../epetra/src 



### add in paths as needed - trying to prevent 
### unnecessary paths from being listed - see old.Makefile for ideas
### Should I add a dependence on AztecOO??  Library doesn't necessarily have
### to be built - just need some headers???  Ask Mike about headers that 
### may be needed outside of the various packages, vs those that will not
### be needed and if I should split them up.

# ------------------------------------------------------------------------
# Ifpack library specifications
# ------------------------------------------------------------------------
TSF_LIB = libtsf.a

TSF_H = \
	$(CORE_H) $(CONTAINERS_H) $(ERRORS_H) $(OUTPUT_H) $(RANDOM_H) $(PARAMETERS_H) $(TIMERS_H) $(MPISTUFF_H) $(BLASSTUFF_H)


libtsf_a_SOURCES = \
	$(CORE) $(CONTAINERS) $(ERRORS) $(OUTPUT) $(RANDOM) $(PARAMETERS) $(TIMERS) $(MPISTUFF) $(BLASSTUFF)


libtsf_a_AR = $(AR) cru


#EXTRA_libtsf_a_SOURCES = 

# ------------------------------------------------------------------------
# For using a special archiver
# ------------------------------------------------------------------------

# SPECIAL NOTE: Why is the "else" there?  For some reason, automake
# fails to define <lib>_AR of USE_ALTERNATE_AR is false, so we have to
# define it manually.
#libtsf_a_AR = $(ALTERNATE_AR)


# ------------------------------------------------------------------------
# Some C++ compilers create extra .o-files for templates. We need to
# be sure to include these, and this is the hack to do it.
# ------------------------------------------------------------------------
libtsf_a_LIBADD = $(XTRALDADD)


# ------------------------------------------------------------------------
# List of all libraries to install in $(libexecdir)
# ------------------------------------------------------------------------
lib_LIBRARIES = $(TSF_LIB)


# ------------------------------------------------------------------------
# List of all headers to install in $(pkgincludedir)
# ------------------------------------------------------------------------
include_HEADERS = $(TSF_H)


# ------------------------------------------------------------------------
# Special stuff to install in our special $(pkgexecincludedir)
# ------------------------------------------------------------------------

# SPECIAL NOTE: Ifpack_config.h is a machine-dependent file, so we need
# to install it in the machine-dependent directory. However, that is
# not a default installation directory, so we had to create it
# special.
pkgexecincludedir = $(exec_prefix)/include/TSF
nodist_pkgexecinclude_HEADERS = TSFConfig.h


# ------------------------------------------------------------------------
# Files to be deleted by 'make maintainer-clean'
# ------------------------------------------------------------------------
MAINTAINERCLEANFILES = Makefile.in 
subdir = src/Support
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = TSFConfig.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(lib_LIBRARIES)

libtsf_a_DEPENDENCIES =
am__objects_1 = TSFObject.$(OBJEXT) TSFSmartPtr.$(OBJEXT) \
	TSFUnsharedPtr.$(OBJEXT) TSFGeneralizedIndex.$(OBJEXT) \
	TSFUtils.$(OBJEXT)
am__objects_2 = TSFHashUtils.$(OBJEXT) TSFIntHashtable.$(OBJEXT)
am__objects_3 = TSFError.$(OBJEXT) TSFDefaultRaiseHandler.$(OBJEXT)
am__objects_4 = TSFOut.$(OBJEXT) TSFDefaultWriter.$(OBJEXT)
am__objects_5 = TSFRandomNumberGenerator.$(OBJEXT) SystemRand.$(OBJEXT) \
	DLARAN.$(OBJEXT)
am__objects_6 = TSFParameter.$(OBJEXT) TSFParameterList.$(OBJEXT) \
	TSFParameterListImplem.$(OBJEXT) TSFParameterBase.$(OBJEXT) \
	TSFParameterImplem.$(OBJEXT)
am__objects_7 = TSFTimer.$(OBJEXT)
am__objects_8 = TSFMPI.$(OBJEXT)
am__objects_9 =
am_libtsf_a_OBJECTS = $(am__objects_1) $(am__objects_2) $(am__objects_3) \
	$(am__objects_4) $(am__objects_5) $(am__objects_6) \
	$(am__objects_7) $(am__objects_8) $(am__objects_9)
libtsf_a_OBJECTS = $(am_libtsf_a_OBJECTS)

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I.
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/DLARAN.Po ./$(DEPDIR)/SystemRand.Po \
	./$(DEPDIR)/TSFDefaultRaiseHandler.Po \
	./$(DEPDIR)/TSFDefaultWriter.Po \
	./$(DEPDIR)/TSFError.Po \
	./$(DEPDIR)/TSFGeneralizedIndex.Po \
	./$(DEPDIR)/TSFHashUtils.Po \
	./$(DEPDIR)/TSFIntHashtable.Po \
	./$(DEPDIR)/TSFMPI.Po ./$(DEPDIR)/TSFObject.Po \
	./$(DEPDIR)/TSFOut.Po ./$(DEPDIR)/TSFParameter.Po \
	./$(DEPDIR)/TSFParameterBase.Po \
	./$(DEPDIR)/TSFParameterImplem.Po \
	./$(DEPDIR)/TSFParameterList.Po \
	./$(DEPDIR)/TSFParameterListImplem.Po \
	./$(DEPDIR)/TSFRandomNumberGenerator.Po \
	./$(DEPDIR)/TSFSmartPtr.Po ./$(DEPDIR)/TSFTimer.Po \
	./$(DEPDIR)/TSFUnsharedPtr.Po \
	./$(DEPDIR)/TSFUtils.Po
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
DIST_SOURCES = $(libtsf_a_SOURCES)
HEADERS = $(include_HEADERS) $(nodist_pkgexecinclude_HEADERS)

DIST_COMMON = $(include_HEADERS) $(srcdir)/Makefile.includes \
	Makefile.am Makefile.in TSFConfig.h.in
SOURCES = $(libtsf_a_SOURCES)

all: TSFConfig.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in: # Makefile.am $(srcdir)/Makefile.includes $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  src/Support/Makefile
Makefile: # $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

TSFConfig.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/TSFConfig.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/Support/TSFConfig.h

$(srcdir)/TSFConfig.h.in: # $(top_srcdir)/configure.ac $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOHEADER)
	touch $(srcdir)/TSFConfig.h.in

distclean-hdr:
	-rm -f TSFConfig.h stamp-h1

AR = ar
libLIBRARIES_INSTALL = $(INSTALL_DATA)
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(libLIBRARIES_INSTALL) $$p $(DESTDIR)$(libdir)/$$f"; \
	    $(libLIBRARIES_INSTALL) $$p $(DESTDIR)$(libdir)/$$f; \
	  else :; fi; \
	done
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    p="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  p="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(libdir)/$$p"; \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
	done

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
TSFObject.$(OBJEXT): $(srcdir)/TSFObject.cpp
TSFSmartPtr.$(OBJEXT): $(srcdir)/TSFSmartPtr.cpp
TSFUnsharedPtr.$(OBJEXT): $(srcdir)/TSFUnsharedPtr.cpp
TSFGeneralizedIndex.$(OBJEXT): $(srcdir)/TSFGeneralizedIndex.cpp
TSFUtils.$(OBJEXT): $(srcdir)/TSFUtils.cpp
TSFHashUtils.$(OBJEXT): $(srcdir)/TSFHashUtils.cpp
TSFIntHashtable.$(OBJEXT): $(srcdir)/TSFIntHashtable.cpp
TSFError.$(OBJEXT): $(srcdir)/TSFError.cpp
TSFDefaultRaiseHandler.$(OBJEXT): $(srcdir)/TSFDefaultRaiseHandler.cpp
TSFOut.$(OBJEXT): $(srcdir)/TSFOut.cpp
TSFDefaultWriter.$(OBJEXT): $(srcdir)/TSFDefaultWriter.cpp
TSFRandomNumberGenerator.$(OBJEXT): \
	$(srcdir)/TSFRandomNumberGenerator.cpp
SystemRand.$(OBJEXT): $(srcdir)/SystemRand.cpp
DLARAN.$(OBJEXT): $(srcdir)/DLARAN.cpp
TSFParameter.$(OBJEXT): $(srcdir)/TSFParameter.cpp
TSFParameterList.$(OBJEXT): $(srcdir)/TSFParameterList.cpp
TSFParameterListImplem.$(OBJEXT): $(srcdir)/TSFParameterListImplem.cpp
TSFParameterBase.$(OBJEXT): $(srcdir)/TSFParameterBase.cpp
TSFParameterImplem.$(OBJEXT): $(srcdir)/TSFParameterImplem.cpp
TSFTimer.$(OBJEXT): $(srcdir)/TSFTimer.cpp
TSFMPI.$(OBJEXT): $(srcdir)/TSFMPI.cpp
libtsf.a: $(libtsf_a_OBJECTS) $(libtsf_a_DEPENDENCIES) 
	-rm -f libtsf.a
	$(libtsf_a_AR) libtsf.a $(libtsf_a_OBJECTS) $(libtsf_a_LIBADD)
	$(RANLIB) libtsf.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/DLARAN.Po
include ./$(DEPDIR)/SystemRand.Po
include ./$(DEPDIR)/TSFDefaultRaiseHandler.Po
include ./$(DEPDIR)/TSFDefaultWriter.Po
include ./$(DEPDIR)/TSFError.Po
include ./$(DEPDIR)/TSFGeneralizedIndex.Po
include ./$(DEPDIR)/TSFHashUtils.Po
include ./$(DEPDIR)/TSFIntHashtable.Po
include ./$(DEPDIR)/TSFMPI.Po
include ./$(DEPDIR)/TSFObject.Po
include ./$(DEPDIR)/TSFOut.Po
include ./$(DEPDIR)/TSFParameter.Po
include ./$(DEPDIR)/TSFParameterBase.Po
include ./$(DEPDIR)/TSFParameterImplem.Po
include ./$(DEPDIR)/TSFParameterList.Po
include ./$(DEPDIR)/TSFParameterListImplem.Po
include ./$(DEPDIR)/TSFRandomNumberGenerator.Po
include ./$(DEPDIR)/TSFSmartPtr.Po
include ./$(DEPDIR)/TSFTimer.Po
include ./$(DEPDIR)/TSFUnsharedPtr.Po
include ./$(DEPDIR)/TSFUtils.Po

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'`; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'`

TSFObject.o: $(srcdir)/TSFObject.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFObject.o -MD -MP -MF "$(DEPDIR)/TSFObject.Tpo" \
	  -c -o TSFObject.o `test -f '$(srcdir)/TSFObject.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFObject.cpp; \
	then mv "$(DEPDIR)/TSFObject.Tpo" "$(DEPDIR)/TSFObject.Po"; \
	else rm -f "$(DEPDIR)/TSFObject.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFObject.cpp' object='TSFObject.o' libtool=no \
#	depfile='$(DEPDIR)/TSFObject.Po' tmpdepfile='$(DEPDIR)/TSFObject.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFObject.o `test -f '$(srcdir)/TSFObject.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFObject.cpp

TSFObject.obj: $(srcdir)/TSFObject.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFObject.obj -MD -MP -MF "$(DEPDIR)/TSFObject.Tpo" \
	  -c -o TSFObject.obj `if test -f '$(srcdir)/TSFObject.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFObject.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFObject.cpp'`; \
	then mv "$(DEPDIR)/TSFObject.Tpo" "$(DEPDIR)/TSFObject.Po"; \
	else rm -f "$(DEPDIR)/TSFObject.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFObject.cpp' object='TSFObject.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFObject.Po' tmpdepfile='$(DEPDIR)/TSFObject.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFObject.obj `if test -f '$(srcdir)/TSFObject.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFObject.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFObject.cpp'`

TSFSmartPtr.o: $(srcdir)/TSFSmartPtr.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFSmartPtr.o -MD -MP -MF "$(DEPDIR)/TSFSmartPtr.Tpo" \
	  -c -o TSFSmartPtr.o `test -f '$(srcdir)/TSFSmartPtr.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFSmartPtr.cpp; \
	then mv "$(DEPDIR)/TSFSmartPtr.Tpo" "$(DEPDIR)/TSFSmartPtr.Po"; \
	else rm -f "$(DEPDIR)/TSFSmartPtr.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFSmartPtr.cpp' object='TSFSmartPtr.o' libtool=no \
#	depfile='$(DEPDIR)/TSFSmartPtr.Po' tmpdepfile='$(DEPDIR)/TSFSmartPtr.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFSmartPtr.o `test -f '$(srcdir)/TSFSmartPtr.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFSmartPtr.cpp

TSFSmartPtr.obj: $(srcdir)/TSFSmartPtr.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFSmartPtr.obj -MD -MP -MF "$(DEPDIR)/TSFSmartPtr.Tpo" \
	  -c -o TSFSmartPtr.obj `if test -f '$(srcdir)/TSFSmartPtr.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFSmartPtr.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFSmartPtr.cpp'`; \
	then mv "$(DEPDIR)/TSFSmartPtr.Tpo" "$(DEPDIR)/TSFSmartPtr.Po"; \
	else rm -f "$(DEPDIR)/TSFSmartPtr.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFSmartPtr.cpp' object='TSFSmartPtr.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFSmartPtr.Po' tmpdepfile='$(DEPDIR)/TSFSmartPtr.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFSmartPtr.obj `if test -f '$(srcdir)/TSFSmartPtr.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFSmartPtr.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFSmartPtr.cpp'`

TSFUnsharedPtr.o: $(srcdir)/TSFUnsharedPtr.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFUnsharedPtr.o -MD -MP -MF "$(DEPDIR)/TSFUnsharedPtr.Tpo" \
	  -c -o TSFUnsharedPtr.o `test -f '$(srcdir)/TSFUnsharedPtr.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFUnsharedPtr.cpp; \
	then mv "$(DEPDIR)/TSFUnsharedPtr.Tpo" "$(DEPDIR)/TSFUnsharedPtr.Po"; \
	else rm -f "$(DEPDIR)/TSFUnsharedPtr.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFUnsharedPtr.cpp' object='TSFUnsharedPtr.o' libtool=no \
#	depfile='$(DEPDIR)/TSFUnsharedPtr.Po' tmpdepfile='$(DEPDIR)/TSFUnsharedPtr.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFUnsharedPtr.o `test -f '$(srcdir)/TSFUnsharedPtr.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFUnsharedPtr.cpp

TSFUnsharedPtr.obj: $(srcdir)/TSFUnsharedPtr.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFUnsharedPtr.obj -MD -MP -MF "$(DEPDIR)/TSFUnsharedPtr.Tpo" \
	  -c -o TSFUnsharedPtr.obj `if test -f '$(srcdir)/TSFUnsharedPtr.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFUnsharedPtr.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFUnsharedPtr.cpp'`; \
	then mv "$(DEPDIR)/TSFUnsharedPtr.Tpo" "$(DEPDIR)/TSFUnsharedPtr.Po"; \
	else rm -f "$(DEPDIR)/TSFUnsharedPtr.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFUnsharedPtr.cpp' object='TSFUnsharedPtr.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFUnsharedPtr.Po' tmpdepfile='$(DEPDIR)/TSFUnsharedPtr.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFUnsharedPtr.obj `if test -f '$(srcdir)/TSFUnsharedPtr.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFUnsharedPtr.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFUnsharedPtr.cpp'`

TSFGeneralizedIndex.o: $(srcdir)/TSFGeneralizedIndex.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFGeneralizedIndex.o -MD -MP -MF "$(DEPDIR)/TSFGeneralizedIndex.Tpo" \
	  -c -o TSFGeneralizedIndex.o `test -f '$(srcdir)/TSFGeneralizedIndex.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFGeneralizedIndex.cpp; \
	then mv "$(DEPDIR)/TSFGeneralizedIndex.Tpo" "$(DEPDIR)/TSFGeneralizedIndex.Po"; \
	else rm -f "$(DEPDIR)/TSFGeneralizedIndex.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFGeneralizedIndex.cpp' object='TSFGeneralizedIndex.o' libtool=no \
#	depfile='$(DEPDIR)/TSFGeneralizedIndex.Po' tmpdepfile='$(DEPDIR)/TSFGeneralizedIndex.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFGeneralizedIndex.o `test -f '$(srcdir)/TSFGeneralizedIndex.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFGeneralizedIndex.cpp

TSFGeneralizedIndex.obj: $(srcdir)/TSFGeneralizedIndex.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFGeneralizedIndex.obj -MD -MP -MF "$(DEPDIR)/TSFGeneralizedIndex.Tpo" \
	  -c -o TSFGeneralizedIndex.obj `if test -f '$(srcdir)/TSFGeneralizedIndex.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFGeneralizedIndex.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFGeneralizedIndex.cpp'`; \
	then mv "$(DEPDIR)/TSFGeneralizedIndex.Tpo" "$(DEPDIR)/TSFGeneralizedIndex.Po"; \
	else rm -f "$(DEPDIR)/TSFGeneralizedIndex.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFGeneralizedIndex.cpp' object='TSFGeneralizedIndex.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFGeneralizedIndex.Po' tmpdepfile='$(DEPDIR)/TSFGeneralizedIndex.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFGeneralizedIndex.obj `if test -f '$(srcdir)/TSFGeneralizedIndex.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFGeneralizedIndex.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFGeneralizedIndex.cpp'`

TSFUtils.o: $(srcdir)/TSFUtils.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFUtils.o -MD -MP -MF "$(DEPDIR)/TSFUtils.Tpo" \
	  -c -o TSFUtils.o `test -f '$(srcdir)/TSFUtils.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFUtils.cpp; \
	then mv "$(DEPDIR)/TSFUtils.Tpo" "$(DEPDIR)/TSFUtils.Po"; \
	else rm -f "$(DEPDIR)/TSFUtils.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFUtils.cpp' object='TSFUtils.o' libtool=no \
#	depfile='$(DEPDIR)/TSFUtils.Po' tmpdepfile='$(DEPDIR)/TSFUtils.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFUtils.o `test -f '$(srcdir)/TSFUtils.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFUtils.cpp

TSFUtils.obj: $(srcdir)/TSFUtils.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFUtils.obj -MD -MP -MF "$(DEPDIR)/TSFUtils.Tpo" \
	  -c -o TSFUtils.obj `if test -f '$(srcdir)/TSFUtils.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFUtils.cpp'`; \
	then mv "$(DEPDIR)/TSFUtils.Tpo" "$(DEPDIR)/TSFUtils.Po"; \
	else rm -f "$(DEPDIR)/TSFUtils.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFUtils.cpp' object='TSFUtils.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFUtils.Po' tmpdepfile='$(DEPDIR)/TSFUtils.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFUtils.obj `if test -f '$(srcdir)/TSFUtils.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFUtils.cpp'`

TSFHashUtils.o: $(srcdir)/TSFHashUtils.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFHashUtils.o -MD -MP -MF "$(DEPDIR)/TSFHashUtils.Tpo" \
	  -c -o TSFHashUtils.o `test -f '$(srcdir)/TSFHashUtils.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFHashUtils.cpp; \
	then mv "$(DEPDIR)/TSFHashUtils.Tpo" "$(DEPDIR)/TSFHashUtils.Po"; \
	else rm -f "$(DEPDIR)/TSFHashUtils.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFHashUtils.cpp' object='TSFHashUtils.o' libtool=no \
#	depfile='$(DEPDIR)/TSFHashUtils.Po' tmpdepfile='$(DEPDIR)/TSFHashUtils.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFHashUtils.o `test -f '$(srcdir)/TSFHashUtils.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFHashUtils.cpp

TSFHashUtils.obj: $(srcdir)/TSFHashUtils.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFHashUtils.obj -MD -MP -MF "$(DEPDIR)/TSFHashUtils.Tpo" \
	  -c -o TSFHashUtils.obj `if test -f '$(srcdir)/TSFHashUtils.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFHashUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFHashUtils.cpp'`; \
	then mv "$(DEPDIR)/TSFHashUtils.Tpo" "$(DEPDIR)/TSFHashUtils.Po"; \
	else rm -f "$(DEPDIR)/TSFHashUtils.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFHashUtils.cpp' object='TSFHashUtils.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFHashUtils.Po' tmpdepfile='$(DEPDIR)/TSFHashUtils.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFHashUtils.obj `if test -f '$(srcdir)/TSFHashUtils.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFHashUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFHashUtils.cpp'`

TSFIntHashtable.o: $(srcdir)/TSFIntHashtable.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFIntHashtable.o -MD -MP -MF "$(DEPDIR)/TSFIntHashtable.Tpo" \
	  -c -o TSFIntHashtable.o `test -f '$(srcdir)/TSFIntHashtable.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFIntHashtable.cpp; \
	then mv "$(DEPDIR)/TSFIntHashtable.Tpo" "$(DEPDIR)/TSFIntHashtable.Po"; \
	else rm -f "$(DEPDIR)/TSFIntHashtable.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFIntHashtable.cpp' object='TSFIntHashtable.o' libtool=no \
#	depfile='$(DEPDIR)/TSFIntHashtable.Po' tmpdepfile='$(DEPDIR)/TSFIntHashtable.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFIntHashtable.o `test -f '$(srcdir)/TSFIntHashtable.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFIntHashtable.cpp

TSFIntHashtable.obj: $(srcdir)/TSFIntHashtable.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFIntHashtable.obj -MD -MP -MF "$(DEPDIR)/TSFIntHashtable.Tpo" \
	  -c -o TSFIntHashtable.obj `if test -f '$(srcdir)/TSFIntHashtable.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFIntHashtable.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFIntHashtable.cpp'`; \
	then mv "$(DEPDIR)/TSFIntHashtable.Tpo" "$(DEPDIR)/TSFIntHashtable.Po"; \
	else rm -f "$(DEPDIR)/TSFIntHashtable.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFIntHashtable.cpp' object='TSFIntHashtable.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFIntHashtable.Po' tmpdepfile='$(DEPDIR)/TSFIntHashtable.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFIntHashtable.obj `if test -f '$(srcdir)/TSFIntHashtable.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFIntHashtable.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFIntHashtable.cpp'`

TSFError.o: $(srcdir)/TSFError.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFError.o -MD -MP -MF "$(DEPDIR)/TSFError.Tpo" \
	  -c -o TSFError.o `test -f '$(srcdir)/TSFError.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFError.cpp; \
	then mv "$(DEPDIR)/TSFError.Tpo" "$(DEPDIR)/TSFError.Po"; \
	else rm -f "$(DEPDIR)/TSFError.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFError.cpp' object='TSFError.o' libtool=no \
#	depfile='$(DEPDIR)/TSFError.Po' tmpdepfile='$(DEPDIR)/TSFError.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFError.o `test -f '$(srcdir)/TSFError.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFError.cpp

TSFError.obj: $(srcdir)/TSFError.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFError.obj -MD -MP -MF "$(DEPDIR)/TSFError.Tpo" \
	  -c -o TSFError.obj `if test -f '$(srcdir)/TSFError.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFError.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFError.cpp'`; \
	then mv "$(DEPDIR)/TSFError.Tpo" "$(DEPDIR)/TSFError.Po"; \
	else rm -f "$(DEPDIR)/TSFError.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFError.cpp' object='TSFError.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFError.Po' tmpdepfile='$(DEPDIR)/TSFError.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFError.obj `if test -f '$(srcdir)/TSFError.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFError.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFError.cpp'`

TSFDefaultRaiseHandler.o: $(srcdir)/TSFDefaultRaiseHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFDefaultRaiseHandler.o -MD -MP -MF "$(DEPDIR)/TSFDefaultRaiseHandler.Tpo" \
	  -c -o TSFDefaultRaiseHandler.o `test -f '$(srcdir)/TSFDefaultRaiseHandler.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFDefaultRaiseHandler.cpp; \
	then mv "$(DEPDIR)/TSFDefaultRaiseHandler.Tpo" "$(DEPDIR)/TSFDefaultRaiseHandler.Po"; \
	else rm -f "$(DEPDIR)/TSFDefaultRaiseHandler.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFDefaultRaiseHandler.cpp' object='TSFDefaultRaiseHandler.o' libtool=no \
#	depfile='$(DEPDIR)/TSFDefaultRaiseHandler.Po' tmpdepfile='$(DEPDIR)/TSFDefaultRaiseHandler.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFDefaultRaiseHandler.o `test -f '$(srcdir)/TSFDefaultRaiseHandler.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFDefaultRaiseHandler.cpp

TSFDefaultRaiseHandler.obj: $(srcdir)/TSFDefaultRaiseHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFDefaultRaiseHandler.obj -MD -MP -MF "$(DEPDIR)/TSFDefaultRaiseHandler.Tpo" \
	  -c -o TSFDefaultRaiseHandler.obj `if test -f '$(srcdir)/TSFDefaultRaiseHandler.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFDefaultRaiseHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFDefaultRaiseHandler.cpp'`; \
	then mv "$(DEPDIR)/TSFDefaultRaiseHandler.Tpo" "$(DEPDIR)/TSFDefaultRaiseHandler.Po"; \
	else rm -f "$(DEPDIR)/TSFDefaultRaiseHandler.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFDefaultRaiseHandler.cpp' object='TSFDefaultRaiseHandler.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFDefaultRaiseHandler.Po' tmpdepfile='$(DEPDIR)/TSFDefaultRaiseHandler.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFDefaultRaiseHandler.obj `if test -f '$(srcdir)/TSFDefaultRaiseHandler.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFDefaultRaiseHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFDefaultRaiseHandler.cpp'`

TSFOut.o: $(srcdir)/TSFOut.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFOut.o -MD -MP -MF "$(DEPDIR)/TSFOut.Tpo" \
	  -c -o TSFOut.o `test -f '$(srcdir)/TSFOut.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFOut.cpp; \
	then mv "$(DEPDIR)/TSFOut.Tpo" "$(DEPDIR)/TSFOut.Po"; \
	else rm -f "$(DEPDIR)/TSFOut.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFOut.cpp' object='TSFOut.o' libtool=no \
#	depfile='$(DEPDIR)/TSFOut.Po' tmpdepfile='$(DEPDIR)/TSFOut.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFOut.o `test -f '$(srcdir)/TSFOut.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFOut.cpp

TSFOut.obj: $(srcdir)/TSFOut.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFOut.obj -MD -MP -MF "$(DEPDIR)/TSFOut.Tpo" \
	  -c -o TSFOut.obj `if test -f '$(srcdir)/TSFOut.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFOut.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFOut.cpp'`; \
	then mv "$(DEPDIR)/TSFOut.Tpo" "$(DEPDIR)/TSFOut.Po"; \
	else rm -f "$(DEPDIR)/TSFOut.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFOut.cpp' object='TSFOut.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFOut.Po' tmpdepfile='$(DEPDIR)/TSFOut.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFOut.obj `if test -f '$(srcdir)/TSFOut.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFOut.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFOut.cpp'`

TSFDefaultWriter.o: $(srcdir)/TSFDefaultWriter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFDefaultWriter.o -MD -MP -MF "$(DEPDIR)/TSFDefaultWriter.Tpo" \
	  -c -o TSFDefaultWriter.o `test -f '$(srcdir)/TSFDefaultWriter.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFDefaultWriter.cpp; \
	then mv "$(DEPDIR)/TSFDefaultWriter.Tpo" "$(DEPDIR)/TSFDefaultWriter.Po"; \
	else rm -f "$(DEPDIR)/TSFDefaultWriter.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFDefaultWriter.cpp' object='TSFDefaultWriter.o' libtool=no \
#	depfile='$(DEPDIR)/TSFDefaultWriter.Po' tmpdepfile='$(DEPDIR)/TSFDefaultWriter.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFDefaultWriter.o `test -f '$(srcdir)/TSFDefaultWriter.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFDefaultWriter.cpp

TSFDefaultWriter.obj: $(srcdir)/TSFDefaultWriter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFDefaultWriter.obj -MD -MP -MF "$(DEPDIR)/TSFDefaultWriter.Tpo" \
	  -c -o TSFDefaultWriter.obj `if test -f '$(srcdir)/TSFDefaultWriter.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFDefaultWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFDefaultWriter.cpp'`; \
	then mv "$(DEPDIR)/TSFDefaultWriter.Tpo" "$(DEPDIR)/TSFDefaultWriter.Po"; \
	else rm -f "$(DEPDIR)/TSFDefaultWriter.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFDefaultWriter.cpp' object='TSFDefaultWriter.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFDefaultWriter.Po' tmpdepfile='$(DEPDIR)/TSFDefaultWriter.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFDefaultWriter.obj `if test -f '$(srcdir)/TSFDefaultWriter.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFDefaultWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFDefaultWriter.cpp'`

TSFRandomNumberGenerator.o: $(srcdir)/TSFRandomNumberGenerator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFRandomNumberGenerator.o -MD -MP -MF "$(DEPDIR)/TSFRandomNumberGenerator.Tpo" \
	  -c -o TSFRandomNumberGenerator.o `test -f '$(srcdir)/TSFRandomNumberGenerator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFRandomNumberGenerator.cpp; \
	then mv "$(DEPDIR)/TSFRandomNumberGenerator.Tpo" "$(DEPDIR)/TSFRandomNumberGenerator.Po"; \
	else rm -f "$(DEPDIR)/TSFRandomNumberGenerator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFRandomNumberGenerator.cpp' object='TSFRandomNumberGenerator.o' libtool=no \
#	depfile='$(DEPDIR)/TSFRandomNumberGenerator.Po' tmpdepfile='$(DEPDIR)/TSFRandomNumberGenerator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFRandomNumberGenerator.o `test -f '$(srcdir)/TSFRandomNumberGenerator.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFRandomNumberGenerator.cpp

TSFRandomNumberGenerator.obj: $(srcdir)/TSFRandomNumberGenerator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFRandomNumberGenerator.obj -MD -MP -MF "$(DEPDIR)/TSFRandomNumberGenerator.Tpo" \
	  -c -o TSFRandomNumberGenerator.obj `if test -f '$(srcdir)/TSFRandomNumberGenerator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFRandomNumberGenerator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFRandomNumberGenerator.cpp'`; \
	then mv "$(DEPDIR)/TSFRandomNumberGenerator.Tpo" "$(DEPDIR)/TSFRandomNumberGenerator.Po"; \
	else rm -f "$(DEPDIR)/TSFRandomNumberGenerator.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFRandomNumberGenerator.cpp' object='TSFRandomNumberGenerator.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFRandomNumberGenerator.Po' tmpdepfile='$(DEPDIR)/TSFRandomNumberGenerator.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFRandomNumberGenerator.obj `if test -f '$(srcdir)/TSFRandomNumberGenerator.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFRandomNumberGenerator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFRandomNumberGenerator.cpp'`

SystemRand.o: $(srcdir)/SystemRand.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemRand.o -MD -MP -MF "$(DEPDIR)/SystemRand.Tpo" \
	  -c -o SystemRand.o `test -f '$(srcdir)/SystemRand.cpp' || echo '$(srcdir)/'`$(srcdir)/SystemRand.cpp; \
	then mv "$(DEPDIR)/SystemRand.Tpo" "$(DEPDIR)/SystemRand.Po"; \
	else rm -f "$(DEPDIR)/SystemRand.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/SystemRand.cpp' object='SystemRand.o' libtool=no \
#	depfile='$(DEPDIR)/SystemRand.Po' tmpdepfile='$(DEPDIR)/SystemRand.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemRand.o `test -f '$(srcdir)/SystemRand.cpp' || echo '$(srcdir)/'`$(srcdir)/SystemRand.cpp

SystemRand.obj: $(srcdir)/SystemRand.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemRand.obj -MD -MP -MF "$(DEPDIR)/SystemRand.Tpo" \
	  -c -o SystemRand.obj `if test -f '$(srcdir)/SystemRand.cpp'; then $(CYGPATH_W) '$(srcdir)/SystemRand.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/SystemRand.cpp'`; \
	then mv "$(DEPDIR)/SystemRand.Tpo" "$(DEPDIR)/SystemRand.Po"; \
	else rm -f "$(DEPDIR)/SystemRand.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/SystemRand.cpp' object='SystemRand.obj' libtool=no \
#	depfile='$(DEPDIR)/SystemRand.Po' tmpdepfile='$(DEPDIR)/SystemRand.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemRand.obj `if test -f '$(srcdir)/SystemRand.cpp'; then $(CYGPATH_W) '$(srcdir)/SystemRand.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/SystemRand.cpp'`

DLARAN.o: $(srcdir)/DLARAN.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DLARAN.o -MD -MP -MF "$(DEPDIR)/DLARAN.Tpo" \
	  -c -o DLARAN.o `test -f '$(srcdir)/DLARAN.cpp' || echo '$(srcdir)/'`$(srcdir)/DLARAN.cpp; \
	then mv "$(DEPDIR)/DLARAN.Tpo" "$(DEPDIR)/DLARAN.Po"; \
	else rm -f "$(DEPDIR)/DLARAN.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/DLARAN.cpp' object='DLARAN.o' libtool=no \
#	depfile='$(DEPDIR)/DLARAN.Po' tmpdepfile='$(DEPDIR)/DLARAN.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DLARAN.o `test -f '$(srcdir)/DLARAN.cpp' || echo '$(srcdir)/'`$(srcdir)/DLARAN.cpp

DLARAN.obj: $(srcdir)/DLARAN.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DLARAN.obj -MD -MP -MF "$(DEPDIR)/DLARAN.Tpo" \
	  -c -o DLARAN.obj `if test -f '$(srcdir)/DLARAN.cpp'; then $(CYGPATH_W) '$(srcdir)/DLARAN.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/DLARAN.cpp'`; \
	then mv "$(DEPDIR)/DLARAN.Tpo" "$(DEPDIR)/DLARAN.Po"; \
	else rm -f "$(DEPDIR)/DLARAN.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/DLARAN.cpp' object='DLARAN.obj' libtool=no \
#	depfile='$(DEPDIR)/DLARAN.Po' tmpdepfile='$(DEPDIR)/DLARAN.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DLARAN.obj `if test -f '$(srcdir)/DLARAN.cpp'; then $(CYGPATH_W) '$(srcdir)/DLARAN.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/DLARAN.cpp'`

TSFParameter.o: $(srcdir)/TSFParameter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameter.o -MD -MP -MF "$(DEPDIR)/TSFParameter.Tpo" \
	  -c -o TSFParameter.o `test -f '$(srcdir)/TSFParameter.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameter.cpp; \
	then mv "$(DEPDIR)/TSFParameter.Tpo" "$(DEPDIR)/TSFParameter.Po"; \
	else rm -f "$(DEPDIR)/TSFParameter.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameter.cpp' object='TSFParameter.o' libtool=no \
#	depfile='$(DEPDIR)/TSFParameter.Po' tmpdepfile='$(DEPDIR)/TSFParameter.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameter.o `test -f '$(srcdir)/TSFParameter.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameter.cpp

TSFParameter.obj: $(srcdir)/TSFParameter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameter.obj -MD -MP -MF "$(DEPDIR)/TSFParameter.Tpo" \
	  -c -o TSFParameter.obj `if test -f '$(srcdir)/TSFParameter.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameter.cpp'`; \
	then mv "$(DEPDIR)/TSFParameter.Tpo" "$(DEPDIR)/TSFParameter.Po"; \
	else rm -f "$(DEPDIR)/TSFParameter.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameter.cpp' object='TSFParameter.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFParameter.Po' tmpdepfile='$(DEPDIR)/TSFParameter.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameter.obj `if test -f '$(srcdir)/TSFParameter.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameter.cpp'`

TSFParameterList.o: $(srcdir)/TSFParameterList.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameterList.o -MD -MP -MF "$(DEPDIR)/TSFParameterList.Tpo" \
	  -c -o TSFParameterList.o `test -f '$(srcdir)/TSFParameterList.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameterList.cpp; \
	then mv "$(DEPDIR)/TSFParameterList.Tpo" "$(DEPDIR)/TSFParameterList.Po"; \
	else rm -f "$(DEPDIR)/TSFParameterList.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameterList.cpp' object='TSFParameterList.o' libtool=no \
#	depfile='$(DEPDIR)/TSFParameterList.Po' tmpdepfile='$(DEPDIR)/TSFParameterList.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameterList.o `test -f '$(srcdir)/TSFParameterList.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameterList.cpp

TSFParameterList.obj: $(srcdir)/TSFParameterList.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameterList.obj -MD -MP -MF "$(DEPDIR)/TSFParameterList.Tpo" \
	  -c -o TSFParameterList.obj `if test -f '$(srcdir)/TSFParameterList.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameterList.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameterList.cpp'`; \
	then mv "$(DEPDIR)/TSFParameterList.Tpo" "$(DEPDIR)/TSFParameterList.Po"; \
	else rm -f "$(DEPDIR)/TSFParameterList.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameterList.cpp' object='TSFParameterList.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFParameterList.Po' tmpdepfile='$(DEPDIR)/TSFParameterList.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameterList.obj `if test -f '$(srcdir)/TSFParameterList.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameterList.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameterList.cpp'`

TSFParameterListImplem.o: $(srcdir)/TSFParameterListImplem.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameterListImplem.o -MD -MP -MF "$(DEPDIR)/TSFParameterListImplem.Tpo" \
	  -c -o TSFParameterListImplem.o `test -f '$(srcdir)/TSFParameterListImplem.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameterListImplem.cpp; \
	then mv "$(DEPDIR)/TSFParameterListImplem.Tpo" "$(DEPDIR)/TSFParameterListImplem.Po"; \
	else rm -f "$(DEPDIR)/TSFParameterListImplem.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameterListImplem.cpp' object='TSFParameterListImplem.o' libtool=no \
#	depfile='$(DEPDIR)/TSFParameterListImplem.Po' tmpdepfile='$(DEPDIR)/TSFParameterListImplem.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameterListImplem.o `test -f '$(srcdir)/TSFParameterListImplem.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameterListImplem.cpp

TSFParameterListImplem.obj: $(srcdir)/TSFParameterListImplem.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameterListImplem.obj -MD -MP -MF "$(DEPDIR)/TSFParameterListImplem.Tpo" \
	  -c -o TSFParameterListImplem.obj `if test -f '$(srcdir)/TSFParameterListImplem.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameterListImplem.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameterListImplem.cpp'`; \
	then mv "$(DEPDIR)/TSFParameterListImplem.Tpo" "$(DEPDIR)/TSFParameterListImplem.Po"; \
	else rm -f "$(DEPDIR)/TSFParameterListImplem.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameterListImplem.cpp' object='TSFParameterListImplem.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFParameterListImplem.Po' tmpdepfile='$(DEPDIR)/TSFParameterListImplem.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameterListImplem.obj `if test -f '$(srcdir)/TSFParameterListImplem.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameterListImplem.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameterListImplem.cpp'`

TSFParameterBase.o: $(srcdir)/TSFParameterBase.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameterBase.o -MD -MP -MF "$(DEPDIR)/TSFParameterBase.Tpo" \
	  -c -o TSFParameterBase.o `test -f '$(srcdir)/TSFParameterBase.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameterBase.cpp; \
	then mv "$(DEPDIR)/TSFParameterBase.Tpo" "$(DEPDIR)/TSFParameterBase.Po"; \
	else rm -f "$(DEPDIR)/TSFParameterBase.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameterBase.cpp' object='TSFParameterBase.o' libtool=no \
#	depfile='$(DEPDIR)/TSFParameterBase.Po' tmpdepfile='$(DEPDIR)/TSFParameterBase.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameterBase.o `test -f '$(srcdir)/TSFParameterBase.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameterBase.cpp

TSFParameterBase.obj: $(srcdir)/TSFParameterBase.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameterBase.obj -MD -MP -MF "$(DEPDIR)/TSFParameterBase.Tpo" \
	  -c -o TSFParameterBase.obj `if test -f '$(srcdir)/TSFParameterBase.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameterBase.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameterBase.cpp'`; \
	then mv "$(DEPDIR)/TSFParameterBase.Tpo" "$(DEPDIR)/TSFParameterBase.Po"; \
	else rm -f "$(DEPDIR)/TSFParameterBase.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameterBase.cpp' object='TSFParameterBase.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFParameterBase.Po' tmpdepfile='$(DEPDIR)/TSFParameterBase.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameterBase.obj `if test -f '$(srcdir)/TSFParameterBase.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameterBase.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameterBase.cpp'`

TSFParameterImplem.o: $(srcdir)/TSFParameterImplem.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameterImplem.o -MD -MP -MF "$(DEPDIR)/TSFParameterImplem.Tpo" \
	  -c -o TSFParameterImplem.o `test -f '$(srcdir)/TSFParameterImplem.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameterImplem.cpp; \
	then mv "$(DEPDIR)/TSFParameterImplem.Tpo" "$(DEPDIR)/TSFParameterImplem.Po"; \
	else rm -f "$(DEPDIR)/TSFParameterImplem.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameterImplem.cpp' object='TSFParameterImplem.o' libtool=no \
#	depfile='$(DEPDIR)/TSFParameterImplem.Po' tmpdepfile='$(DEPDIR)/TSFParameterImplem.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameterImplem.o `test -f '$(srcdir)/TSFParameterImplem.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFParameterImplem.cpp

TSFParameterImplem.obj: $(srcdir)/TSFParameterImplem.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFParameterImplem.obj -MD -MP -MF "$(DEPDIR)/TSFParameterImplem.Tpo" \
	  -c -o TSFParameterImplem.obj `if test -f '$(srcdir)/TSFParameterImplem.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameterImplem.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameterImplem.cpp'`; \
	then mv "$(DEPDIR)/TSFParameterImplem.Tpo" "$(DEPDIR)/TSFParameterImplem.Po"; \
	else rm -f "$(DEPDIR)/TSFParameterImplem.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFParameterImplem.cpp' object='TSFParameterImplem.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFParameterImplem.Po' tmpdepfile='$(DEPDIR)/TSFParameterImplem.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFParameterImplem.obj `if test -f '$(srcdir)/TSFParameterImplem.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFParameterImplem.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFParameterImplem.cpp'`

TSFTimer.o: $(srcdir)/TSFTimer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFTimer.o -MD -MP -MF "$(DEPDIR)/TSFTimer.Tpo" \
	  -c -o TSFTimer.o `test -f '$(srcdir)/TSFTimer.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFTimer.cpp; \
	then mv "$(DEPDIR)/TSFTimer.Tpo" "$(DEPDIR)/TSFTimer.Po"; \
	else rm -f "$(DEPDIR)/TSFTimer.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFTimer.cpp' object='TSFTimer.o' libtool=no \
#	depfile='$(DEPDIR)/TSFTimer.Po' tmpdepfile='$(DEPDIR)/TSFTimer.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFTimer.o `test -f '$(srcdir)/TSFTimer.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFTimer.cpp

TSFTimer.obj: $(srcdir)/TSFTimer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFTimer.obj -MD -MP -MF "$(DEPDIR)/TSFTimer.Tpo" \
	  -c -o TSFTimer.obj `if test -f '$(srcdir)/TSFTimer.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFTimer.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFTimer.cpp'`; \
	then mv "$(DEPDIR)/TSFTimer.Tpo" "$(DEPDIR)/TSFTimer.Po"; \
	else rm -f "$(DEPDIR)/TSFTimer.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFTimer.cpp' object='TSFTimer.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFTimer.Po' tmpdepfile='$(DEPDIR)/TSFTimer.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFTimer.obj `if test -f '$(srcdir)/TSFTimer.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFTimer.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFTimer.cpp'`

TSFMPI.o: $(srcdir)/TSFMPI.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFMPI.o -MD -MP -MF "$(DEPDIR)/TSFMPI.Tpo" \
	  -c -o TSFMPI.o `test -f '$(srcdir)/TSFMPI.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFMPI.cpp; \
	then mv "$(DEPDIR)/TSFMPI.Tpo" "$(DEPDIR)/TSFMPI.Po"; \
	else rm -f "$(DEPDIR)/TSFMPI.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFMPI.cpp' object='TSFMPI.o' libtool=no \
#	depfile='$(DEPDIR)/TSFMPI.Po' tmpdepfile='$(DEPDIR)/TSFMPI.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFMPI.o `test -f '$(srcdir)/TSFMPI.cpp' || echo '$(srcdir)/'`$(srcdir)/TSFMPI.cpp

TSFMPI.obj: $(srcdir)/TSFMPI.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TSFMPI.obj -MD -MP -MF "$(DEPDIR)/TSFMPI.Tpo" \
	  -c -o TSFMPI.obj `if test -f '$(srcdir)/TSFMPI.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFMPI.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFMPI.cpp'`; \
	then mv "$(DEPDIR)/TSFMPI.Tpo" "$(DEPDIR)/TSFMPI.Po"; \
	else rm -f "$(DEPDIR)/TSFMPI.Tpo"; exit 1; \
	fi
#	source='$(srcdir)/TSFMPI.cpp' object='TSFMPI.obj' libtool=no \
#	depfile='$(DEPDIR)/TSFMPI.Po' tmpdepfile='$(DEPDIR)/TSFMPI.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TSFMPI.obj `if test -f '$(srcdir)/TSFMPI.cpp'; then $(CYGPATH_W) '$(srcdir)/TSFMPI.cpp'; else $(CYGPATH_W) '$(srcdir)/$(srcdir)/TSFMPI.cpp'`
uninstall-info-am:
includeHEADERS_INSTALL = $(INSTALL_HEADER)
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(includedir)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(includeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(includedir)/$$f"; \
	  $(includeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(includedir)/$$f; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(includedir)/$$f"; \
	  rm -f $(DESTDIR)$(includedir)/$$f; \
	done
nodist_pkgexecincludeHEADERS_INSTALL = $(INSTALL_HEADER)
install-nodist_pkgexecincludeHEADERS: $(nodist_pkgexecinclude_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(pkgexecincludedir)
	@list='$(nodist_pkgexecinclude_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(nodist_pkgexecincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pkgexecincludedir)/$$f"; \
	  $(nodist_pkgexecincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pkgexecincludedir)/$$f; \
	done

uninstall-nodist_pkgexecincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(nodist_pkgexecinclude_HEADERS)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(pkgexecincludedir)/$$f"; \
	  rm -f $(DESTDIR)$(pkgexecincludedir)/$$f; \
	done

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES) TSFConfig.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) TSFConfig.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES) TSFConfig.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) TSFConfig.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS) TSFConfig.h

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(libdir) $(DESTDIR)$(includedir) $(DESTDIR)$(pkgexecincludedir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am: install-includeHEADERS

install-exec-am: install-libLIBRARIES \
	install-nodist_pkgexecincludeHEADERS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-includeHEADERS uninstall-info-am \
	uninstall-libLIBRARIES uninstall-nodist_pkgexecincludeHEADERS

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLIBRARIES ctags distclean distclean-compile \
	distclean-depend distclean-generic distclean-hdr distclean-tags \
	distdir dvi dvi-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am \
	install-includeHEADERS install-info install-info-am \
	install-libLIBRARIES install-man \
	install-nodist_pkgexecincludeHEADERS install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-includeHEADERS uninstall-info-am \
	uninstall-libLIBRARIES uninstall-nodist_pkgexecincludeHEADERS

	$(srcdir)/TSFCommandLine.cpp \
	$(srcdir)/StrUtils.cpp \
	$(srcdir)/TSFSystem.cpp \
	$(srcdir)/TSFDefs.cpp 
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
