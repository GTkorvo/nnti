/*! \mainpage Thyra : Interfaces and Support code for Abstract Numerical Algorithms (ANAs)

\section thyra_outline_sec Outline

<ul>
<li> \ref thyra_intro_sec
<li> \ref thyra_software_sec
  <ul>
  <li>\ref thyra_interfaces_sec
    <ul>
    <li><a href="index.html#interfaces_operator_vector">Operator/Vector Interfaces</a>
      <ul>
      <li><a href="index.html#interfaces_operator_vector_ana_fundamental">Fundamental ANA Operator/Vector Interfaces</a>
      <li><a href="index.html#interfaces_operator_vector_ana_extended">Extended ANA Operator/Vector Interfaces</a>
      </ul>
    <li><a href="index.html#interfaces_operator_solve">Operator Solve Interfaces</a>
      <ul>
      <li><a href="index.html#interfaces_operator_solve_ana_fundamental">Fundamental ANA Operator Solve Interfaces</a>
      </ul>
    <li><a href="index.html#interfaces_nonlinear">Nonlinear Interfaces</a>
      <ul>
      <li><a href="index.html#interfaces_nonlinear_model_evaluator_ana_fundamental">Fundamental ANA Model Evaluator Interfaces</a>
      <li><a href="index.html#interfaces_nonlinear_solvers_ana_fundamental">Fundamental ANA Nonlinear Solver Interfaces</a>
      </ul>
    </ul>
  <li>\ref thyra_support_sec
    <ul>
    <li><a href="index.html#support_operator_vector">Operator/Vector Support</a>
    <li><a href="index.html#support_operator_solve">Operator Solve Support</a>
    <li><a href="index.html#support_nonlinear_model_evaluator">Nonlinear Model Evaluator Support</a>
    <li><a href="index.html#support_nonlinear_solvers">Nonlinear Solvers Support</a>
    </ul>
  <li>\ref thyra_browse_sec
  </ul>
<li> \ref thyra_software_technicalities_sec
<li> \ref thyra_dependencies_sec
<li> \ref thyra_configuration_sec
<li> \ref thyra_external_projects_sec
<li> \ref thyra_faq_sec
<li> \ref thyra_documents_sec
<li> \ref thyra_contributors_sec
<li> \ref thyra_related_software_sec
</ul>

\section thyra_intro_sec Introduction

The %Thyra package contains a set of interfaces and supporting code that
defines basic interoperability mechanisms between different types of numerical
software.  The foundation of all the interfaces related to abstract numerical
algorithms (ANAs) are the mathematical concepts of vectors, vector spaces, and
linear operators.  All other ANA interfaces and support software are built on
these fundamental operator/vector interfaces.

This main page provides the starting point for all of the documentation for
%Thyra interfaces and software.  This documentation is generated using
Doxygen.

The documentation for %Thyra is broken up into a number of different doxygen
collections as described in the next section.

\section thyra_software_sec Thyra Software Package Documentation Collections

The Doxygen-generated documentation is broken up into a number of different
doxygen collections in an attempt to make each individual collection more
manageable to browse and comprehend.

The thrya package is broadly divided into interoperability interfaces and
support software and the directory structure and the doxygen documentation is
also divided in this way.  Below are links to the different Doxygen
documentation collections for the different aspects of Thyra.  This
organization also mirrors the <a href="../../browser/doc/html/dirs.html">directory
structure of thyra</a>.

\subsection thyra_interfaces_sec Thyra interoperability interfaces

<ul>

<li> <b>Operator/Vector Interfaces</b> <a name="interfaces_operator_vector"></a>

  <ul>

  <li> <b><a href="../../src/interfaces/operator_vector/ana/fundamental/doc/html/index.html">
    Fundamental ANA Operator/Vector Interfaces</a></b>  <a name="interfaces_operator_vector_ana_fundamental"></a>

    \image html ThyraOperatorVectorSimple.gif

    These are minimal stripped-down abstract
    interface classes for basic finite-dimensional vectors, vector spaces and linear operators.
    These interfaces form the foundation for all other ANA-based interfaces.  Primary interfaces
    include <tt>Thyra::VectorSpaceBase</tt>, <tt>Thyra::VectorBase</tt>, <tt>Thyra::MultiVectorBase</tt>,
    and <tt>Thyra::LinearOpBase</tt>.

  <li> <b><a href="../../src/interfaces/operator_vector/ana/extended/doc/html/index.html">
    Extended ANA Operator/Vector Interfaces</a></b><a name="interfaces_operator_vector_ana_extended"></a>

    These are some interfaces based on the
    above Fundamental ANA Operator/Vector Interfaces and provide other pieces of functionality
    and define new types of interoperability.  For example, this is where interfaces to various
    types of <em>composite</em> subclasses exist for product, or block, vector spaces
    (<tt>Thyra::ProductVectorSpaceBase</tt>), vectors (<tt>Thyra::ProductVectorBase</tt>),
    and multi-vectors (<tt>Thyra::ProductMultiVectorBase</tt>).  Various interfaces to
    <em>decorator</em> and <em>composite</em> linear operators are also contained here
    and include, for example, <tt>Thyra::ScaledAdjointLinearOpBase</tt>.

  </ul>

<li> <b>Operator Solve Interfaces</b><a name="interfaces_operator_solve"></a>

  <ul>

  <li> <b><a href="../../src/interfaces/operator_solve/ana/fundamental/doc/html/index.html">
    Fundamental ANA Operator Solve Interfaces</a></b><a name="interfaces_operator_solve_ana_fundamental"></a>

    \image html LinearOpWithSolveAndFactory75.jpg

    These are interfaces that provide a high-level
    interface to preconditioners, linear solvers
    (<tt>Thyra::LinearOpWithSolveBase</tt>) and factories for these (i.e.
    <tt>Thyra::LinearOpWithSolveBase</tt> and <tt>Thyra::PreconditionerFactoryBase</tt>)

  </ul>

<li> <b>Nonlinear Interfaces</b><a name="interfaces_nonlinear"></a>

  <ul>

  <li><b><a href="../../src/interfaces/nonlinear/model_evaluator/ana/fundamental/doc/html/index.html">
    Fundamental ANA Model Evaluator Interfaces</a></b><a name="interfaces_nonlinear_model_evaluator_ana_fundamental"></a>

    \image html ModelEvaluator75.gif

    Contained here are interfaces for nonlinear models such as <tt>Thyra::ModelEvaluator</tt>.

  <li><b><a href="../../src/interfaces/nonlinear/solvers/ana/fundamental/doc/html/index.html">
    Fundamental ANA Nonlinear Solver Interfaces</a></b><a name="interfaces_nonlinear_solvers_ana_fundamental"></a>

    Contained here are interfaces for nonlinear equation solvers.

    <b>Warning!</b> These interfaces are highly experimental and are likely to undergo dramatic changes
    before they stabilize.    
     

  </ul>

</ul>

\subsection thyra_support_sec Thyra support software and examples

<ul>

<li> <b><a href="../../src/support/operator_vector/doc/html/index.html">
  Operator/Vector Support</a></b><a name="support_operator_vector"></a>

  Described here is a fairly large collection of ANA or client support and
  adapter support software based on the operator/vector
  interfaces.  For example, you will find things as unit testing classes
  (e.g. <tt>Thyra::LinearOpTester</tt>), and concrete product spaces/vectors/multi-vectors
  (e.g. <tt>Thyra::ProductVectorSpace</tt>).  Also included is adapter support
  and concrete implementations for serial and MPI-based space/vector/multi-vector implementations
  (e.g. <tt>Thyra::SerialVectorSpaceStd</tt> and <tt>Thyra::MPIVectorSpaceStd</tt>).
  Several examples are also included including once for CG and the Power Method .  This collection
  of software is really too vast to give a full sense of what it contains
  in this short description.

<li> <b><a href="../../src/support/operator_solve/doc/html/index.html">
  Operator Solve Support</a></b><a name="support_operator_solve"></a>

  This collection contains support software for the operator/solve interfaces.
  Examples include testing software like <tt>Thyra::LinearOpWithSolveTester</tt>
  and <em>decorator</em> subclasses like <tt>Thyra::DiagonalLinearOpWithSolve</tt>.

<li> <b><a href="../../src/support/nonlinear/model_evaluator/doc/html/index.html">
  Nonlinear Model Evaluator Support</a></b><a name="support_nonlinear_model_evaluator"></a>

  This includes support software for the nonlinear model evaluator interfaces.
  Examples include <tt>decorator</tt> subclasses like
  <tt>Thyra::SingleResidSSDAEModelEvaluator</tt>.

<li> <b><a href="../../src/support/nonlinear/solvers/doc/html/index.html">
   Nonlinear Solvers Support</a></b><a name="support_nonlinear_solvers"></a>

   Contained here in is support software for the nonlinear solver interfaces and
   some simple concrete implementations.  Simple concrete nonlinear equation solver
   implementations include examples <tt>Thyra::LinearNonlinearSolver</tt>
   and <tt>Thyra::DampenedNewtonNonlinearSolver</tt>.

</ul>

\subsection thyra_browse_sec Browse all of Thyra as a single doxygen collection

You can browse all of Thyra as a <A HREF="../../browser/doc/html/index.html">single
doxygen collection</A>. Warning, this is not the recommended way to learn
about Thyra software.  However, this is a good way to browse the <a
href="../../browser/doc/html/dirs.html">directory structure of thyra</a>, to <a
href="../../browser/doc/html/files.html">locate files</a>, etc.

\section thyra_software_technicalities_sec Some Technicalities about Thyra Interfaces and Supporting Software

A few things about the software in the %Thyra package are worth mentioning:

<ul>

<li><b>Scalar and Index (Ordinal) data types</b>

All of the interfaces are templated on a <b><tt>Scalar</tt></b> (i.e.
floating-point) type and therefore almost all of %Thyra supports arbitrary
scalar types such as complex types (e.g. <tt>std::complex<double></tt>),
automatic differentiation types, interval types and extended precision types
(i.e. <tt>mpf_class</tt>) in addition to simpler real types such as
<tt>double</tt> and <tt>float</tt>.  The only requirement for the
<tt>Scalar</tt> data type is that it have value semantics (i.e. default
constructor, copy constructor, assignment operators) and define the basic
overloaded operators <tt>operator+(...)</tt>, <tt>operator-(...)</tt>,
<tt>operator*(...)</tt> and <tt>operator/(...)</tt>.  The traits class
<tt>Teuchos::ScalarTraits</tt> provides a means to write <em>type
independent</em> code and all of the %Thyra software uses this traits class.
Any scalar type that is to be used as a <tt>Scalar</tt> must provide a
specialization of this traits class (see source code for
<tt>Teuchos_ScalarTraits.hpp</tt> for examples of how to do this).  In
addition, if MPI is to be used then specializations of the traits classes
<tt>Teuchos::PrimitiveTypeTraits</tt> and <tt>Teuchos::RawMPITraits</tt> must
also be provided.

The %Thyra interfaces and related software are not templated on an index
(i.e. ordinal) type.  Instead, the type <tt>Thyra::Index</tt> is used which is
just a typedef that is defined at configure time to be an integral type of
sufficient size.  This type must be able to hold the value of the largest
dimension of a vector space that will be used by an executable.  For most
platforms and use cases, <b><tt>int</tt></b> is sufficient but in other cases
<b><tt>long int</tt></b> may be necessary on some 64 bit platforms.  Not
templating on the index (ordinal) type does not result in any degradation in
usability, runtime speed, or storage usage for any use case.  However, certain
types of subclasses of the %Thyra interfaces, such as sparse matrix
subclasses, may need to be templated on a local index (ordinal) type.

<li><b>Dynamic memory management</b>

All of the code in the %Thyra package almost exclusively uses the
<tt>%Teuchos</tt> smart reference counted pointer class
<tt>Teuchos::RefCountPtr</tt> to handle dynamically allocated memory with
object-oriented programming.  %Thyra also religiously uses the idioms
described in <a
href="http://software.sandia.gov/Trilinos/RefCountPtrBeginnersGuideSAND.pdf">this
report</a> for passing object to and from functions that involve
<tt>Teuchos::RefCountPtr</tt> .

<li><b>Error (exception) handling</b>

All error and general exception handling in the %Thyra interfaces and related
software is performed using the built-in C++ exception handling mechanisms
(i.e. <tt>try</tt>, <tt>throw</tt> and <tt>catch</tt>) and all thrown
exceptions should inherit from the standard base class
<tt>std::exception</tt>.  All exceptions in %Thyra software are thrown using
the macros <tt>TEST_FOR_EXCEPTION()</tt> or <tt>TEST_FOR_EXCEPT()</tt>.  By
consistently using these macros is is easy to set a breakpoint in a debugger
just before an exception is thrown by setting a breakpoint on the function
<tt>TestForException_break()</tt>.  If the code is configured with the macro
<tt>_DEBUG</tt> defined (i.e. <tt>CPPFLAGS="-D_DEBUG ..."</tt>) then a lot of
runtime validation is performed.  Whenever development work is being performed
this macro should always be enabled since a lot of errors will be caught that
would be hard to diagnose otherwise.

</ul>

\section thyra_dependencies_sec Other Trilinos Packages on which Thyra Depends

The %Thyra code described here is dependent on the following Trilinos packages:

<ul>
<li><b><a href="../../../teuchos/doc/html/index.html">Teuchos</a></b>: This package supplies basic utility classes such
as <tt>Teuchos::RefCountPtr</tt> and <tt>Teuchos::BLAS</tt> that
%Thyra software is dependent on.
</ul>

\section thyra_configuration_sec Configuration of the Thyra Package

The %Thyra package's <tt>configure</tt> script (which should be called from
the base Trilinos-level configure script) responds to a number of options that
affect the code that is built and what code is installed.

Some of the more important configuration options are:

<ul>
<li><b><tt>--enable-thyra</tt></b>: Causes the %Thyra package and all of
its dependent packages to be enabled and built.  Without this option,
there will be no %Thyra header files or libraries included in the
installation of Trilinos (i.e. using <tt>make install</tt>).
<li><b><tt>--enable-export-makefiles</tt></b>: Causes the installation of
the %Thyra package (an other Trilinos packages) to have the makefile
fragments <tt>Makefile.export.thyra</tt> and <tt>Makefile.export.thyra.macros</tt>
installed in the installation directory <tt>$TRILINOS_INSTALL_DIR/include</tt> for
use by external makefiles (see \ref thyra_external_projects_sec "below").
</ul>

See the output from <tt>./configure --help</tt> (where <tt>./</tt> is the base
source directory for the <tt>thyra</tt> package) for a complete listing of all
of the configure options that Thyra responds to.

The %Thyra package is also affected by configure options passed to
other packages and some of these options are:

<ul>
<li><b><tt>--enable-teuchos-complex</tt></b>: Causes the
<tt>std::complex<></tt> scalar type to be used in templated examples
and tests.
<li><b><tt>--enable-teuchos-gmp</tt></b>: Causes the GNU MP
extended-precision <tt>mpf_class</tt> scalar type to be used in
templated examples and tests.
</ul>

Note that the above options will not be listed by
<tt>Trilinos/packages/thyra/configure --help</tt> but instead are listed by
<tt>Trilinos/packages/teuchos/configure --help</tt>.

\section thyra_external_projects_sec Building and Linking Against Thyra in External Projects

It is recommended that developers external to Trilinos install %Thyra with the
rest of Trilinos and then compile and link against the installed headers and
libraries (see the <a
href="../../../../doc/UserGuide/TrilinosUserGuide.pdf">Trilinos Users
Guide</a> for a discussion of installing Trilinos).  Remember that in order to
install the contents of the <tt>thyra</tt> packages that one must enable it
(see the <tt>--enable-thyra</tt> and other <tt>configure</tt> options
described \ref thyra_configuration_sec "above") before installation.

Once %Thyra software is installed in the location specified by the configure
option <tt>--prefix=$TRILINOS_INSTALL_DIR</tt> with the rest of Trilinos
(where <tt>$TRILINOS_INSTALL_DIR</tt> is the path of the directory that you
specify where Trilinos will be installed with <tt>make install</tt>), it is
important that a client's external makefile system be consistent with the
environment used to build %Thyra.  To do this, if the option
<tt>--enable-export-makefiles</tt> was enabled at configure time, then a set
of makefile fragments is installed in the directory

\verbatim
  $TRILINOS_INSTALL_DIR/include/
\endverbatim

The installed makefile fragment files <tt>Makefile.export.thyra</tt> and
<tt>Makefile.export.thyra.macros</tt> can then be included in an external
makefile to give compiler options, include paths, libraries etc.

\subsection thyra_external_makefile_example_sec An example external makefile

When %Thyra is installed with Trilinos, the directory

\verbatim
  $TRILINOS_INSTALL_DIR/example/thyra/
\endverbatim

is created which contains an example of an external project that uses 
%Thyra.  The example makefile 

\verbatim

  $TRILINOS_INSTALL_DIR/example/thyra/Makefile
\endverbatim

that builds an external version the <tt>sillyCgSolve_serial.exe</tt> program
is shown below:

\verbinclude external/Makefile

By using the macros starting with <tt>THYRA_</tt> one is guaranteed that the
same compiler with the same options are used to build the client's code that
were used to build Trilinos.  Of particular importance are <tt>THYRA_CXX</tt>,
<tt>THYRA_DEFS</tt>, <tt>THYRA_CPPFLAGS</tt>, and <tt>THYRA_CXXLD</tt> since
these ensure that the same C++ compiler and the same <tt>-D</tt> macro
definitions are used.

\section thyra_faq_sec Frequently Asked Questions (FAQ)

Click \ref thyra_faq_grp "here" for a list of frequently asked questions (FAQ)
compiled for thyra.

\section thyra_documents_sec Documents Describing or are Related to Thyra

<ul>

<li><b><a
href="http://software.sandia.gov/trilinos/RefCountPtrBeginnersGuideSAND.pdf">
Teuchos::RefCountPtr Beginner's Guide : An Introduction to the
Trilinos Smart Reference-Counted Pointer Class for (Almost) Automatic
Dynamic Memory Management in C++ </a></b>

This paper describes the basics of <tt>Teuchos::RefCountPtr</tt> and
outlines a convention for passing objects to and from functions that
all of the code in %Thyra adheres to.

<li><b><a href="http://software.sandia.gov/RTOp/RTOpTOMS.pdf"> Vector
Reduction/Transformation Operators </a></b>

This paper describes the need for, and the basic design of,
<tt>RTOpPack::RTOpT</tt>.  The concrete implementation described in this paper
used C structs while the current <tt>%RTOpPack::RTOpT</tt> is a fully
templated C++ class implementation.

<li><b><a
href="../../src/support/operator_vector/doc/html/LinearAlgebraFunctionConvention.pdf">A
Simple Convention for the Specification of Linear Algebra Function Prototypes
in C++ </a></b>

This short note describes a simple convention for writing function prototypes
for linear algebra operations.  This convention is used in \ref
Thyra_Op_Vec_VectorStdOpsAll_LA_names_grp "this" set of functions, for
instance.

<!-- ToDo: Put in a link to the Thyra paper at some point! -->

</ul>

\section thyra_contributors_sec Contributors to the Thyra Package and Related Software

The contributors to the %Thyra package, or related packages, in alphabetical
order, are:

<ul>
<li> Roscoe Bartlett (rabartl@sandia.gov): %Thyra lead developer, MOOCHO lead developer
<li> Paul Boggs (ptboggs@sandia.gov) : Split/O3D lead developer, %Thyra developer
<li> Todd Coffey (tscoffe@sandia.gov) : Rythmos lead developer, %Thyra developer
<li> Michael Heroux (maherou@sandia.gov): Trilinos leader, %Thyra developer
<li> Rob Hoekstra (rjhoeks@sandia.gov) : %EpetraExt lead developer
<li> Victoria Howle (vehowle@sandia.gov) : %Meros lead developer, %Thyra developer
<li> Kevin Long (krlong@sandia.gov) : %Sundance lead developer, %Thyra developer
<li> Roger Pawlowski (rppawlo@sandia.gov) : %NOX lead developer
<li> Eric Phipps (etphipp@sandia.gov) : %LOCA co-lead developer, %Thyra developer
<li> Heidi Thornquist (hkthorn@sandia.gov): %Belos lead developer, %Thyra developer
<li> Allan Williams (william@sandia.gov) : %FEI lead developer, %Thyra developer
</ul>

\section thyra_related_software_sec Other Software Related to Thyra

Below is a partial list of software related to Thyra.

<ul>

<li><b><a href="../../../epetra/thyra/doc/html/index.html">ANA Operator/Vector
Adapters for Epetra</a></b>: This software allows the creation of
<tt>Thyra::VectorSpaceBase</tt>, <tt>Thyra::VectorBase</tt>,
<tt>Thyra::MultiVectorBase</tt>, and <tt>Thyra::LinearOpBase</tt> objects out
of Epetra objects.

<li><b><a href="../../../amesos/thyra/doc/html/index.html">ANA Linear Solver
Adapters for Amesos</a></b>: This software defines the implementation of the
extended interfaces <tt>Thyra::LinearOpWithSolveBase</tt> and
<tt>Thyra::LinearOpWithSolveFactoryBase</tt> in terms of
<tt>Amesos_BaseSolver</tt> implementations.  These adapters allow a client to
take any <tt>Epetra_RowMatrix</tt> object embedded in a
<tt>Thyra::EpetraLinearOp</tt> object and immediately use to to define a
direct linear solver.

<li><b><a href="../../../aztecoo/thyra/doc/html/index.html">ANA Linear Solver
Adapters for AztecOO</a></b>: This software defines the implementation of the
extended interfaces <tt>Thyra::LinearOpWithSolveBase</tt> and
<tt>Thyra::LinearOpWithSolveFactoryBase</tt> in terms of the <tt>AztecOO</tt>
class.  These adapters allow a client to take any <tt>Epetra_RowMatrix</tt>
object embedded in a <tt>Thyra::EpetraLinearOp</tt> object and immediately use
to to define an iterative linear solver such as GMRES and CG.

</ul>

*/
