/* @HEADER@ */
/* ***********************************************************************
// 
//           TSFExtended: Trilinos Solver Framework Extended
//                 Copyright (2004) Sandia Corporation
// 
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
// 
// This library is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of the
// License, or (at your option) any later version.
//  
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//  
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA
// Questions? Contact Michael A. Heroux (maherou@sandia.gov) 
// 
// **********************************************************************/
/* @HEADER@ */

#ifndef TSFNOXSOLVER_HPP
#define TSFNOXSOLVER_HPP

#include "TSFConfigDefs.hpp"
#include "NOX.H"
#include "NOX_Common.H"
#include "NOX_Utils.H"
#include "NOX_TSF_Group.H"
#include "NOX_TSF_StatusTestBuilder.H"
#include "NOX_Multiphysics_Solver_Manager.H"
#include "Teuchos_TestForException.hpp"   
#include "Teuchos_ParameterList.hpp"

namespace TSFExtended
{
  using namespace Teuchos;

  /**
   *
   */
  class NOXSolver 
  {
  public:
    /** */
    NOXSolver(const ParameterList& params,
              const NonlinearOperator<double>& F);

    /** */
    NOX::StatusTest::StatusType solve() const ;


    /** */
    Vector<double> getSolution() const {return soln_;}


  private:
    void reset() const ;

    mutable NonlinearOperator<double> F_;
    LinearSolver<double> linSolver_;
    mutable Vector<double> x0_;
    mutable Vector<double> soln_;
    mutable RefCountPtr<NOX::TSF::Group> grp_;
    mutable RefCountPtr<NOX::Solver::Generic> solver_;
    mutable RefCountPtr<NOX::StatusTest::Generic> statusTest_;
    mutable ParameterList params_;
#ifdef TRILINOS_6
    mutable NOX::Parameter::List noxParams_;
#else
    mutable RefCountPtr<Teuchos::ParameterList> noxParams_;
#endif
  };
}

#endif
