#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass extarticle
\begin_preamble
\newcommand{\pd}[2]{\frac{\partial #1}{\partial #2}}
\newcommand{\fdo}[1]{\mathcal{D}_{#1}}
\newcommand{\sdo}[1]{D_{#1}}
\newcommand{\tdo}[1]{D_{#1}}
\newcommand{\fd}[2]{\fdo{#1} #2}
\newcommand{\sd}[2]{\sdo{#1} #2}
\newcommand{\td}[2]{\tdo{#1} #2}
\newcommand{\pdd}[2]{\frac{\partial^2 #1}{\partial #2^2}}
\newcommand{\pddd}[2]{\frac{\partial^3 #1}{\partial #2^3}}
\newcommand{\pmix}[3]{\frac{\partial^2 #1}{\partial #2 \partial #3}}
\newcommand{\pmixx}[4]{\frac{\partial^3 #1}{\partial #2 \partial #3 \partial #4}}
\newcommand{\funcd}[2]{\frac{\partial #1}{\partial #2}}
\newcommand{\spaced}[2]{{\cal D}^{#1} #2}
\newcommand{\totald}[2]{{D}^{#1} #2}

\newcommand{\abs}[1]{\left\vert{#1}\right\vert}
\newcommand{\od}[2]{\frac{d #1}{d #2}}
\newcommand{\odd}[2]{\frac{d^2 #1}{d #2^2}}
\newcommand{\R}{\mathbb{R}}

\usepackage{algorithmic}
\usepackage{listings}
\usepackage[usenames,dvipsnames]{color}
\definecolor{lightgray}{RGB}{240,240,240}
\definecolor{lapis}{RGB}{38,97,156}
\definecolor{bluegray}{RGB}{180,180,200}

\lstset{basicstyle={\sffamily\footnotesize}, language={C++},%
tabsize=2,%
showstringspaces=false,%
frame=shadowbox,%
breaklines=true,%
mathescape=true,%
commentstyle={\itshape\textcolor{lapis}},%
lineskip=1pt,%
aboveskip=\bigskipamount,%
belowskip=\bigskipamount,%
rulesepcolor=\color{bluegray},%
morecomment=[s][\color{red}]{/*!}{*/}}

\renewcommand{\algorithmiccomment}[1]{\textcolor{lapis}{//#1}}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
theorems-ams-extended
\end_modules
\language english
\inputencoding auto
\font_roman palatino
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\branch answers
\selected 1
\color #5555ff
\end_branch
\leftmargin 0.9in
\topmargin 0.75in
\rightmargin 0.9in
\bottommargin 0.75in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Sundance examples: A nonlinear initial-boundary-value problem
\end_layout

\begin_layout Standard
This example shows how to implement a nonlinear solve within a timestepping
 loop.
\end_layout

\begin_layout Section
Statement of problem
\end_layout

\begin_layout Standard
In this example we'll solve the time-dependent radiation diffusion equation,
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\pd{u}{t}=\pdd{}{x}\left[u^{4}\right]+f(x,t)\]

\end_inset

on 
\begin_inset Formula $[0,1]$
\end_inset

 with a homogeneous Neumann boundary condition at 
\begin_inset Formula $x=0$
\end_inset

 and an inhomogeneous Dirichlet boundary condition at 
\begin_inset Formula $x=1$
\end_inset

, 
\begin_inset Formula \[
u(0,t)=1\]

\end_inset


\begin_inset Formula \[
u(1,t)=1+\epsilon\cos\left(2\pi t\right).\]

\end_inset

where 
\begin_inset Formula $\epsilon$
\end_inset

 is some constant such that 
\begin_inset Formula $\left|\epsilon\right|<1$
\end_inset

.
 This initial profile is
\begin_inset Formula \[
u(x,0)=1+\epsilon x^{2}.\]

\end_inset

Given a choice of 
\begin_inset Formula $f$
\end_inset

, finding an exact solution is difficult.
 To produce an exact solution for validation purposes we'll therefore use
 the method of manufactured solutions: choose some function 
\begin_inset Formula $u(x,t)$
\end_inset

 that obeys the BCs and IC, and then produce a function 
\begin_inset Formula $f\left(x,t\right)$
\end_inset

 so that 
\begin_inset Formula $u$
\end_inset

 is the solution to the problem.
\end_layout

\begin_layout Subsection
Manufactured solution
\end_layout

\begin_layout Standard
We'll choose as our solution the simple function
\begin_inset Formula \[
u\left(x,t\right)=1+\epsilon x^{2}\cos\left(2\pi t\right)\]

\end_inset

and plug in to the radiation diffusion equation.
 Using Mathematica to do the differentiation, we find that for 
\begin_inset Formula $u$
\end_inset

 to be a solution we must have
\end_layout

\begin_layout Standard
\begin_inset Formula \[
f(x,t)=\pd{u}{t}-\pdd{}{x}\left[u^{4}\right]=-2\pi\epsilon\sin(2\pi t)x^{2}-8\epsilon\cos(2\pi t)\left(\epsilon\cos(2\pi t)x^{2}+1\right)^{2}\left(7\epsilon\cos(2\pi t)x^{2}+1\right).\]

\end_inset


\end_layout

\begin_layout Section
Solution procedure
\end_layout

\begin_layout Standard
We begin with a very high-level view of an implicit time integration.
 A Crank-Nicolson step for some equation
\begin_inset Formula \[
y'=g\left(t,y\right)\]

\end_inset

is
\begin_inset Formula \[
t_{n+1}=t_{n}+\Delta t\]

\end_inset


\begin_inset Formula \[
y_{n+1}=y_{n}+\frac{\Delta t}{2}\left[g\left(t_{n},y_{n}\right)+g\left(t_{n+1},y_{n+1}\right)\right].\]

\end_inset

When 
\begin_inset Formula $g$
\end_inset

 is a nonlinear function of 
\begin_inset Formula $y$
\end_inset

, we use Newton's method to solve the implicit equation 
\begin_inset Formula \[
R\left(y_{n+1}\right)=0=y_{n+1}-y_{n}-\frac{\Delta t}{2}\left[g\left(t_{n},y_{n}\right)+g\left(t_{n+1},y_{n+1}\right)\right].\]

\end_inset

Let 
\begin_inset Formula $y_{n+1}^{k}$
\end_inset

 be the 
\begin_inset Formula $k-$
\end_inset

th approximation to 
\begin_inset Formula $y_{n+1}$
\end_inset

.
 The Newton step 
\begin_inset Formula $w$
\end_inset

 is found by solving the linear equation 
\begin_inset Formula \[
R(y_{n+1}^{k})+d_{w}R\left(y_{n+1}^{k}\right)=0,\]

\end_inset

or, in matrix notation,
\begin_inset Formula \[
\mathbf{R}\left(\mathbf{y}_{n+1}^{k}\right)+J\left(\mathbf{y}_{n+1}^{k}\right)\mathbf{w=0}.\]

\end_inset

Then 
\begin_inset Formula $\mathbf{y}_{n+1}^{k+1}=\mathbf{y}_{n+1}^{k}+\mathbf{w}$
\end_inset

.
\end_layout

\begin_layout Standard
The current solution 
\begin_inset Formula $y_{n}$
\end_inset

 can be used as an initial guess 
\begin_inset Formula $y_{n+1}^{0}$
\end_inset

 in the Newton solve.
 Because the initial guess is usually quite good, line searching is usually
 not needed; if Newton's method has trouble converging, the first thing
 to try is to reduce the timestep.
 
\end_layout

\begin_layout Standard
The Newton solve takes us from time 
\begin_inset Formula $t_{n}$
\end_inset

 to timestep 
\begin_inset Formula $t_{n+1}$
\end_inset

.
 We repeat until the desired endpoint is reached.
\end_layout

\begin_layout Standard
An industrial-strength solution algorithm should have accuracy monitoring
 that reduces the timestep if needed.
 In this example we show the simplest implementation with constant timestep.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}
\end_layout

\begin_layout Plain Layout


\backslash
STATE
\backslash
COMMENT{
\backslash
textit{Initialization steps}}
\end_layout

\begin_layout Plain Layout


\backslash
STATE Set $u_{prev}$ to initial conditions
\end_layout

\begin_layout Plain Layout


\backslash
STATE Set $N_{step}$ and timestep $
\backslash
Delta t$ 
\end_layout

\begin_layout Plain Layout


\backslash
STATE Set $N_{newt}$, the maximum number of Newton steps allowed
\end_layout

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\begin_layout Plain Layout


\backslash
STATE
\backslash
COMMENT{
\backslash
textit{Loop over timesteps}}
\end_layout

\begin_layout Plain Layout


\backslash
FOR{$n=0$ to $N_{step}$}
\end_layout

\begin_layout Plain Layout


\backslash
STATE
\end_layout

\begin_layout Plain Layout


\backslash
STATE $u_{next}^0
\backslash
gets u_{prev}$         
\backslash
COMMENT{
\backslash
textit{Use $u_{prev}$ as initial guess for Newton solve for $u_{next}$}}
\end_layout

\begin_layout Plain Layout


\backslash
STATE
\end_layout

\begin_layout Plain Layout


\backslash
STATE Initialize Newton iteration count: $k=0$ 
\end_layout

\begin_layout Plain Layout


\backslash
STATE
\backslash
COMMENT{
\backslash
textit{Iterate Newton steps until convergence}}
\end_layout

\begin_layout Plain Layout


\backslash
REPEAT
\end_layout

\begin_layout Plain Layout


\backslash
STATE Compute Jacobian $J(u_{next}^k)$ and residual $r(u_{next}^k)$
\end_layout

\begin_layout Plain Layout


\backslash
STATE Solve linear equation $J
\backslash
cdot w=-r$ for the Newton step $w$
\end_layout

\begin_layout Plain Layout


\backslash
STATE $u_{next}^{k+1} 
\backslash
gets u_{next}^k + w$
\end_layout

\begin_layout Plain Layout


\backslash
STATE $k
\backslash
gets k+1$
\end_layout

\begin_layout Plain Layout


\backslash
UNTIL{$
\backslash
Vert w 
\backslash
Vert 
\backslash
le 
\backslash
tau$ or $k
\backslash
ge N_{newt}$ }
\end_layout

\begin_layout Plain Layout


\backslash
STATE
\end_layout

\begin_layout Plain Layout


\backslash
STATE Write $u_{next}^k$ to visualization file
\end_layout

\begin_layout Plain Layout


\backslash
STATE $u_{prev} 
\backslash
gets u_{next}^k$
\end_layout

\begin_layout Plain Layout


\backslash
STATE
\end_layout

\begin_layout Plain Layout


\backslash
ENDFOR
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Pseudocode for implicit time integration with Newton's method for solving
 the implicit equations.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Time-discretized equations
\end_layout

\begin_layout Standard
With the high-level view of the Crank-Nicolson-Newton loop in place, we
 can now look at the computation of the residual and Jacobian for this problem.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $u_{n}\left(x\right)=u\left(x,t_{n}\right)$
\end_inset

 be the solution at a timestep 
\begin_inset Formula $t_{n}.$
\end_inset

 We do Crank-Nicolson discretization in time on the strong form of the equation,
\begin_inset Formula \[
u_{n+1}(x)-u_{n}(x)=\frac{\Delta t}{2}\pdd{}{x}\left[u_{n+1}^{4}(x)+u_{n}^{4}\left(x\right)\right]+\frac{\Delta t}{2}\left[f\left(t_{n},x\right)+f\left(t_{n+1},x\right)\right].\]

\end_inset

The unknown in this equation is 
\begin_inset Formula $u_{n+1}$
\end_inset

; the function 
\begin_inset Formula $u_{n}$
\end_inset

 is known from a previous timestep.
 The BCs are to be applied to 
\begin_inset Formula $u_{n+1}$
\end_inset

,
\begin_inset Formula \[
u'_{n+1}\left(0\right)=0\]

\end_inset


\begin_inset Formula \[
u_{n+1}\left(1\right)=1+\epsilon\cos\left(2\pi t_{n}\right).\]

\end_inset

As usual, take inner products with a test function 
\begin_inset Formula $v$
\end_inset

 and integrate by parts 
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left(v,R\right)=-\left.\frac{\Delta t}{2}v\pd{}{x}\left(u_{n+1}^{4}+u_{n}^{4}\right)\right|_{0}^{1}+\int_{0}^{1}\left[\left(u_{n+1}-u_{n}\right)v+\frac{\Delta t}{2}\pd{v}{x}\left(\pd{u_{n+1}^{4}}{x}+\pd{u_{n}^{4}}{x}\right)-v\frac{\Delta t}{2}\left(f(t_{n},x)+f(t_{n+1},x)\right)\right]\, dx.\]

\end_inset

The boundary term is zero because 
\begin_inset Formula $v\in H_{0}^{1}$
\end_inset

, so
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left(v,R\right)=\int_{0}^{1}\left[\left(u_{n+1}-u_{n}\right)v+\frac{\Delta t}{2}\pd{v}{x}\left(\pd{u_{n+1}^{4}}{x}+\pd{u_{n}^{4}}{x}\right)-v\frac{\Delta t}{2}\left(f(t_{n},x)+f(t_{n+1},x)\right)\right]\, dx.\]

\end_inset

We must also impose the conditions 
\begin_inset Formula $u_{n+1}(0)=1$
\end_inset

, 
\begin_inset Formula $u_{n+1}\left(1\right)=1+\epsilon\,\cos\left(2\pi t_{n+1}\right)$
\end_inset

.
 
\end_layout

\begin_layout Subsection
Programming the problem setup
\end_layout

\begin_layout Standard
We'll describe in detail only those aspects particular to the nonlinear,
 transient nature of this problem.
 See the full source code for setup of the mesh, cell filters, and other
 components that have been documented in previous examples
\end_layout

\begin_layout Subsubsection
Discrete function initialization
\end_layout

\begin_layout Standard
In this problem we have two nested loops: an outer loop over timesteps and
 an inner loop over Newton updates.
 We normally don't store every 
\begin_inset Formula $u_{n}$
\end_inset

 and 
\begin_inset Formula $u_{n}^{k}$
\end_inset

.
 Rather, we store two values of 
\begin_inset Formula $u$
\end_inset

: the value of 
\begin_inset Formula $u$
\end_inset

 at the start of each timestep, which we'll call 
\begin_inset Formula $u_{\mbox{prev}}$
\end_inset

, and the current Newton estimate, which we'll call 
\begin_inset Formula $u_{\mbox{newt}}$
\end_inset

.
 At the end of each timestep we write the current 
\begin_inset Formula $u_{\mbox{newt}}$
\end_inset

 into the stored value 
\begin_inset Formula $u_{\mbox{prev}}$
\end_inset

.
 In the inner loop, at each Newton iteration we update 
\begin_inset Formula $u_{\mbox{newt}}$
\end_inset

 by adding to it the Newton step 
\begin_inset Formula $w$
\end_inset

.
\end_layout

\begin_layout Standard
The functions 
\begin_inset Formula $u_{\mbox{prev}}$
\end_inset

 and 
\begin_inset Formula $u_{\mbox{newt}}$
\end_inset

 are stored as 
\family typewriter
DiscreteFunction
\family default
 expression subtypes.
 Both 
\begin_inset Quotes eld
\end_inset

live
\begin_inset Quotes erd
\end_inset

 in the same vector space, represented as a 
\family typewriter
DiscreteSpace
\family default
 object.
 To fill a discrete function 
\begin_inset Formula $u_{\mbox{prev}}$
\end_inset

 with the initial profile 
\begin_inset Formula $u_{\mbox{start}}$
\end_inset

, we use an 
\family typewriter
L2Projector
\family default
 object to do 
\begin_inset Formula $L^{2}$
\end_inset

 projection of 
\begin_inset Formula $u_{\mbox{start}}$
\end_inset

 onto our discrete space, as shown in the next code block.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* The initial profile is $u(x,0)=1 + 
\backslash
epsilon x^2$.
 Project this onto a discrete function.
 This discrete function, uPrev, initially contains the initial conditions
 but will also be re-used as the starting value for each timestep */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Define an expression for the initial profile */
\end_layout

\begin_layout Plain Layout

double epsilon = 0.25;
\end_layout

\begin_layout Plain Layout

Expr uStart = 1.0 + epsilon*x*x;       
\end_layout

\begin_layout Plain Layout

/* Set up projection */
\end_layout

\begin_layout Plain Layout

DiscreteSpace discSpace(mesh, bas, vecType);       
\end_layout

\begin_layout Plain Layout

L2Projector projector(discSpace, 1.0 + epsilon*x*x);    
\end_layout

\begin_layout Plain Layout

/* Carry out the projection */  
\end_layout

\begin_layout Plain Layout

Expr uPrev = projector.project();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We also need a discrete function for the current Newton estimate.
 A copy of 
\begin_inset Formula $u_{\mbox{prev}}$
\end_inset

 will do.
 It's important to understand that this copy operation must 
\emph on
not
\emph default
 be done using the ordinary assignment operator, 
\emph on
i.e.
\emph default
, 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*!  Do not do this!!! */
\end_layout

\begin_layout Plain Layout

/* The assignment operator makes a shallow copy, leaving both uPrev and
 uNext pointing to the same data.
 Sometimes that's what you want, but in this context  death and destruction
 will result.
 */
\end_layout

\begin_layout Plain Layout

Expr uNewt = uPrev; 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 
\family typewriter
copyDiscreteFunction()
\family default
 does the right thing, namely, it makes a shallow copy of the discrete function'
s supporting data such as degree-of-freedom maps, but makes a deep copy
 of the vector of coefficients.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*  Copy $u_{
\backslash
mathrm{prev}}$ into $u_{
\backslash
mathrm{newt}}$.
 This copy operation makes a deep copy of the function's vector of coefficients,
 but a shallow copy of all supporting data.
 */
\end_layout

\begin_layout Plain Layout

Expr uNewt = copyDiscreteFunction(uPrev); 
\end_layout

\end_inset

The copy and the original now have distinct data vectors that can be modified
 independently.
\end_layout

\begin_layout Subsubsection
Defining a time variable
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Represent the time variable as a parameter expression, NOT as a double
 variable.
 The reason is that we need to be able to update the time value without
 rebuilding expressions.
 */
\end_layout

\begin_layout Plain Layout

Expr t = new Sundance::Parameter(0.0);       
\end_layout

\begin_layout Plain Layout

Expr tPrev = new Sundance::Parameter(0.0);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Writing the weak form and nonlinear problem
\end_layout

\begin_layout Standard
Sundance has built-in differentiation capabilities, so when programming
 a nonlinear problem it is sufficient to write an expression for the weak
 form of the problem's residual.
 The formation of the Jacobian will be done through in-place automatic different
iation of this object.
 In this example, the residual is
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Define the weak form */       
\end_layout

\begin_layout Plain Layout

Expr eqn = Integral(interior, v*(u-uPrev) 
\end_layout

\begin_layout Plain Layout

	+ dt/2.0*(dx*v)*((dx*pow(u, 4.0))+(dx*pow(uPrev, 4.0))) 
\end_layout

\begin_layout Plain Layout

	- dt/2.0*v*(force(epsilon, x, t)+force(epsilon, x, tPrev)), quad);     
   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Define the Dirichlet BC  */       
\end_layout

\begin_layout Plain Layout

Expr bc = EssentialBC(leftPoint, v*(u-1.0), quad)
\end_layout

\begin_layout Plain Layout

	+ EssentialBC(rightPoint, v*(u - 1.0 - epsilon*cos(2.0*pi*t)),quad);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* We can now set up the nonlinear problem! */       
\end_layout

\begin_layout Plain Layout

NonlinearProblem prob(mesh, eqn, bc, v, u, uNewt, vecType); 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Programming the solution loops
\end_layout

\begin_layout Subsubsection
Preparing to loop
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Create a linear solver to be used for the Jacobian solve at each Newton
 step */       
\end_layout

\begin_layout Plain Layout

LinearSolver<double> linSolver  = LinearSolverBuilder::createSolver("amesos.xml")
;
\end_layout

\begin_layout Plain Layout

             
\end_layout

\begin_layout Plain Layout

/* Allocate objects for the Jacobian, residual, and Newton step */     
  LinearOperator<double> J = prob.allocateJacobian();       
\end_layout

\begin_layout Plain Layout

Vector<double> resid = J.range().createMember();       
\end_layout

\begin_layout Plain Layout

Vector<double> newtonStep = J.domain().createMember();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Set parameters for the Newton loop */
\end_layout

\begin_layout Plain Layout

int maxNewtIters = 10;       
\end_layout

\begin_layout Plain Layout

double newtTol = 1.0e-12;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Doing the loop
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* loop over timesteps */       
\end_layout

\begin_layout Plain Layout

for (int i=0; i<nSteps; i++)       
\end_layout

\begin_layout Plain Layout

{         
\end_layout

\begin_layout Plain Layout

	/* Set the times t_i and t_{i+1} */         
\end_layout

\begin_layout Plain Layout

	Out::root() << "timestep #" << i << endl;
\end_layout

\begin_layout Plain Layout

	t.setParameterValue((i+1)*dt);         
\end_layout

\begin_layout Plain Layout

	tPrev.setParameterValue(i*dt);
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	/* loop over Newton steps */         
\end_layout

\begin_layout Plain Layout

	bool newtonConverged = false;
\end_layout

\begin_layout Plain Layout

	for (int j=0; j<maxNewtIters; j++)         
\end_layout

\begin_layout Plain Layout

	{           
\end_layout

\begin_layout Plain Layout

		prob.setInitialGuess(uNewt);           
\end_layout

\begin_layout Plain Layout

		prob.computeJacobianAndFunction(J, resid);           
\end_layout

\begin_layout Plain Layout

		SolverState<double> solveState = linSolver.solve(J, -1.0*resid, newtonStep);
 
\end_layout

\begin_layout Plain Layout

	    TEUCHOS_TEST_FOR_EXCEPTION(solveState.finalState() != SolveConverged, std::runtime_e
rror, "linear solve failed!");
\end_layout

\begin_layout Plain Layout

		addVecToDiscreteFunction(uNewt, newtonStep);           
\end_layout

\begin_layout Plain Layout

		double newtStepNorm = newtonStep.norm2();           
\end_layout

\begin_layout Plain Layout

		Out::root() << "|newt step| = " << newtStepNorm << endl;           
\end_layout

\begin_layout Plain Layout

		if (newtStepNorm < newtTol)            
\end_layout

\begin_layout Plain Layout

		{             
\end_layout

\begin_layout Plain Layout

			newtonConverged = true;             
\end_layout

\begin_layout Plain Layout

			break;           
\end_layout

\begin_layout Plain Layout

		}         
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

	TEUCHOS_TEST_FOR_EXCEPTION(!newtonConverged, std::runtime_error,           
\end_layout

\begin_layout Plain Layout

	"Newton's method failed to converged after " << maxNewtIters << " iterations");
\end_layout

\begin_layout Plain Layout

	/* Overwrite the previous u value with the result of this timestep */
\end_layout

\begin_layout Plain Layout

	updateDiscreteFunction(uNewt, uPrev);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* Write the step to a file */
\end_layout

\begin_layout Plain Layout

	FieldWriter writer = new MatlabWriter("transientNonlinear1D-" + Teuchos::toStri
ng(i+1) + ".dat");         
\end_layout

\begin_layout Plain Layout

	writer.addMesh(mesh);         
\end_layout

\begin_layout Plain Layout

	writer.addField("u", new ExprFieldWrapper(uPrev[0]));         
\end_layout

\begin_layout Plain Layout

	writer.write();       
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/* On to the next timestep! */
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Postprocessing and results
\end_layout

\begin_layout Standard
The final step in the example is to compute an error metric.
 The exact solution is periodic in time with period 
\begin_inset Formula $T=1$
\end_inset

, so 
\begin_inset Formula $u(x,0)=u\left(x,1\right)$
\end_inset

 and a useful error metric will be a comparison between the initial value
 and the value at the final timestep.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double err = L2Norm(mesh, interior, uPrev - uStart, quad);       
\end_layout

\begin_layout Plain Layout

Out::root() << "error = " << err << endl;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="6">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{T}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{X}=16$
\end_inset

, 
\begin_inset Formula $p=1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{X}=16$
\end_inset

, 
\begin_inset Formula $p=2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{X}=N_{T},$
\end_inset

 
\begin_inset Formula $p=1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{X}=N_{T}$
\end_inset

, 
\begin_inset Formula $p=2$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
3.40917E-003
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
3.49630E-003
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
2.70007E-003
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
3.49667E-003
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
5.37579E-004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
6.25988E-004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
4.94458E-004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
6.25988E-004
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
1.17545E-004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
1.45331E-004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
1.17545E-004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
1.45331E-004
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
1.28124E-004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
3.56897E-005
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
2.91023E-005
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
3.56897E-005
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
1.44033E-004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
8.88304E-006
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
7.25920E-006
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
8.88303E-006
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
128
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
1.48485E-004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
2.21831E-006
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
1.81380E-006
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
2.21831E-006
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Summary of important ideas
\end_layout

\begin_layout Itemize
Write time discretization by hand, then let Sundance do spatial discretization
 and linearization of the weak form for you.
 
\end_layout

\begin_layout Itemize
You will need two discrete functions: one for the solution at the start
 of each timestep, one for the current Newton step.
 In order to preserve data integrity you must be sure to do copies and updates
 to these objects correctly, using the library functions
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
copyDiscreteFunction()
\end_layout

\begin_layout Itemize

\family typewriter
updateDiscreteFunction()
\end_layout

\begin_layout Itemize

\family typewriter
addVectorToDiscreteFunction()
\end_layout

\end_deeper
\begin_layout Itemize
The time variable should be stored as a 
\family typewriter
Parameter
\family default
 expression subtype rather than as an ordinary 
\family typewriter
double
\family default
.
 This lets updates to its value be immediately propagated throughout all
 expressions containing the time.
 
\end_layout

\begin_layout Itemize
Construct the 
\family typewriter
NonlinearProblem
\family default
 object outside the timestepping and loop.
 This object can be used at all timesteps and Newton iteration.
 While it's possible to create a 
\family typewriter
NonlinearProblem
\family default
 for each timestep or each Newton iteration, there's no need to do so, and
 doing so would be inefficient because bookkeeping steps such as DOF map
 building and expression preprocessing would be repeated unnecessarily.
\end_layout

\begin_layout Itemize
Depending on your problem size and the capabilities of your visualization
 system, you can write each step's result to its own file or write all steps
 into one file.
 
\end_layout

\end_body
\end_document
