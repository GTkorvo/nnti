// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package CCJ;

public final class ColGroupCentral_Stub
    extends java.rmi.server.RemoteStub
    implements CCJ.ColGroupCentralInterface, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void addMember(java.lang.String, int, CCJ.MyListInterface)"),
	new java.rmi.server.Operation("void addMember(java.lang.String, CCJ.MyListInterface)"),
	new java.rmi.server.Operation("void copyGroup(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("void deleteGroup(java.lang.String)"),
	new java.rmi.server.Operation("void deleteMember(java.lang.String, CCJ.MyListInterface)"),
	new java.rmi.server.Operation("CCJ.ColGroup getGroup(java.lang.String, int)")
    };
    
    private static final long interfaceHash = 7403625048028300343L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_addMember_0;
    private static java.lang.reflect.Method $method_addMember_1;
    private static java.lang.reflect.Method $method_copyGroup_2;
    private static java.lang.reflect.Method $method_deleteGroup_3;
    private static java.lang.reflect.Method $method_deleteMember_4;
    private static java.lang.reflect.Method $method_getGroup_5;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_addMember_0 = CCJ.ColGroupCentralInterface.class.getMethod("addMember", new java.lang.Class[] {java.lang.String.class, int.class, CCJ.MyListInterface.class});
	    $method_addMember_1 = CCJ.ColGroupCentralInterface.class.getMethod("addMember", new java.lang.Class[] {java.lang.String.class, CCJ.MyListInterface.class});
	    $method_copyGroup_2 = CCJ.ColGroupCentralInterface.class.getMethod("copyGroup", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_deleteGroup_3 = CCJ.ColGroupCentralInterface.class.getMethod("deleteGroup", new java.lang.Class[] {java.lang.String.class});
	    $method_deleteMember_4 = CCJ.ColGroupCentralInterface.class.getMethod("deleteMember", new java.lang.Class[] {java.lang.String.class, CCJ.MyListInterface.class});
	    $method_getGroup_5 = CCJ.ColGroupCentralInterface.class.getMethod("getGroup", new java.lang.Class[] {java.lang.String.class, int.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public ColGroupCentral_Stub() {
	super();
    }
    public ColGroupCentral_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of addMember(String, int, MyListInterface)
    public void addMember(java.lang.String $param_String_1, int $param_int_2, CCJ.MyListInterface $param_MyListInterface_3)
	throws CCJ.CCJException, CCJ.GroupAlreadyActiveException, CCJ.RankAlreadyInUseException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_addMember_0, new java.lang.Object[] {$param_String_1, new java.lang.Integer($param_int_2), $param_MyListInterface_3}, -4654981298818271962L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeInt($param_int_2);
		    out.writeObject($param_MyListInterface_3);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (CCJ.CCJException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addMember(String, MyListInterface)
    public void addMember(java.lang.String $param_String_1, CCJ.MyListInterface $param_MyListInterface_2)
	throws CCJ.CCJException, CCJ.GroupAlreadyActiveException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_addMember_1, new java.lang.Object[] {$param_String_1, $param_MyListInterface_2}, 4139049770207611270L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_MyListInterface_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (CCJ.CCJException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of copyGroup(String, String)
    public void copyGroup(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws CCJ.CCJException, CCJ.GroupAlreadyActiveException, CCJ.NoSuchGroupException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_copyGroup_2, new java.lang.Object[] {$param_String_1, $param_String_2}, 5636719755215010652L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (CCJ.CCJException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of deleteGroup(String)
    public void deleteGroup(java.lang.String $param_String_1)
	throws CCJ.CCJException, CCJ.NoSuchGroupException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_deleteGroup_3, new java.lang.Object[] {$param_String_1}, -1694528390347974575L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (CCJ.CCJException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of deleteMember(String, MyListInterface)
    public void deleteMember(java.lang.String $param_String_1, CCJ.MyListInterface $param_MyListInterface_2)
	throws CCJ.CCJException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_deleteMember_4, new java.lang.Object[] {$param_String_1, $param_MyListInterface_2}, 8748112696708203394L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_MyListInterface_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (CCJ.CCJException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getGroup(String, int)
    public CCJ.ColGroup getGroup(java.lang.String $param_String_1, int $param_int_2)
	throws CCJ.NoSuchGroupException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getGroup_5, new java.lang.Object[] {$param_String_1, new java.lang.Integer($param_int_2)}, -50157049788739375L);
		return ((CCJ.ColGroup) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeInt($param_int_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		CCJ.ColGroup $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (CCJ.ColGroup) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (CCJ.NoSuchGroupException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
