// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package CCJ;

public final class ColGroupCentral_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void addMember(java.lang.String, int, CCJ.MyListInterface)"),
	new java.rmi.server.Operation("void addMember(java.lang.String, CCJ.MyListInterface)"),
	new java.rmi.server.Operation("void copyGroup(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("void deleteGroup(java.lang.String)"),
	new java.rmi.server.Operation("void deleteMember(java.lang.String, CCJ.MyListInterface)"),
	new java.rmi.server.Operation("CCJ.ColGroup getGroup(java.lang.String, int)")
    };
    
    private static final long interfaceHash = 7403625048028300343L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == -4654981298818271962L) {
		opnum = 0;
	    } else if (hash == 4139049770207611270L) {
		opnum = 1;
	    } else if (hash == 5636719755215010652L) {
		opnum = 2;
	    } else if (hash == -1694528390347974575L) {
		opnum = 3;
	    } else if (hash == 8748112696708203394L) {
		opnum = 4;
	    } else if (hash == -50157049788739375L) {
		opnum = 5;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	CCJ.ColGroupCentral server = (CCJ.ColGroupCentral) obj;
	switch (opnum) {
	case 0: // addMember(String, int, MyListInterface)
	{
	    java.lang.String $param_String_1;
	    int $param_int_2;
	    CCJ.MyListInterface $param_MyListInterface_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_int_2 = in.readInt();
		$param_MyListInterface_3 = (CCJ.MyListInterface) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.addMember($param_String_1, $param_int_2, $param_MyListInterface_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // addMember(String, MyListInterface)
	{
	    java.lang.String $param_String_1;
	    CCJ.MyListInterface $param_MyListInterface_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_MyListInterface_2 = (CCJ.MyListInterface) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.addMember($param_String_1, $param_MyListInterface_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // copyGroup(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.copyGroup($param_String_1, $param_String_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // deleteGroup(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.deleteGroup($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // deleteMember(String, MyListInterface)
	{
	    java.lang.String $param_String_1;
	    CCJ.MyListInterface $param_MyListInterface_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_MyListInterface_2 = (CCJ.MyListInterface) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.deleteMember($param_String_1, $param_MyListInterface_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getGroup(String, int)
	{
	    java.lang.String $param_String_1;
	    int $param_int_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_int_2 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    CCJ.ColGroup $result = server.getGroup($param_String_1, $param_int_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
