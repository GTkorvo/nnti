// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package CCJ;

public final class MyList_Stub
    extends java.rmi.server.RemoteStub
    implements CCJ.MyListInterface, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void add(int, int, java.io.Serializable)"),
	new java.rmi.server.Operation("void confirmedAdd(int, int, java.io.Serializable)"),
	new java.rmi.server.Operation("java.io.Serializable futureAdd(java.io.Serializable)"),
	new java.rmi.server.Operation("java.io.Serializable rendezVousAdd(int, int, java.io.Serializable)")
    };
    
    private static final long interfaceHash = -1801133939574880270L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_add_0;
    private static java.lang.reflect.Method $method_confirmedAdd_1;
    private static java.lang.reflect.Method $method_futureAdd_2;
    private static java.lang.reflect.Method $method_rendezVousAdd_3;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_add_0 = CCJ.MyListInterface.class.getMethod("add", new java.lang.Class[] {int.class, int.class, java.io.Serializable.class});
	    $method_confirmedAdd_1 = CCJ.MyListInterface.class.getMethod("confirmedAdd", new java.lang.Class[] {int.class, int.class, java.io.Serializable.class});
	    $method_futureAdd_2 = CCJ.MyListInterface.class.getMethod("futureAdd", new java.lang.Class[] {java.io.Serializable.class});
	    $method_rendezVousAdd_3 = CCJ.MyListInterface.class.getMethod("rendezVousAdd", new java.lang.Class[] {int.class, int.class, java.io.Serializable.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public MyList_Stub() {
	super();
    }
    public MyList_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of add(int, int, Serializable)
    public void add(int $param_int_1, int $param_int_2, java.io.Serializable $param_Serializable_3)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_add_0, new java.lang.Object[] {new java.lang.Integer($param_int_1), new java.lang.Integer($param_int_2), $param_Serializable_3}, 1629625854807050535L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeInt($param_int_1);
		    out.writeInt($param_int_2);
		    out.writeObject($param_Serializable_3);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of confirmedAdd(int, int, Serializable)
    public void confirmedAdd(int $param_int_1, int $param_int_2, java.io.Serializable $param_Serializable_3)
	throws CCJ.CCJException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_confirmedAdd_1, new java.lang.Object[] {new java.lang.Integer($param_int_1), new java.lang.Integer($param_int_2), $param_Serializable_3}, 7133574785109645466L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeInt($param_int_1);
		    out.writeInt($param_int_2);
		    out.writeObject($param_Serializable_3);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (CCJ.CCJException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of futureAdd(Serializable)
    public java.io.Serializable futureAdd(java.io.Serializable $param_Serializable_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_futureAdd_2, new java.lang.Object[] {$param_Serializable_1}, -7971877956833888253L);
		return ((java.io.Serializable) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Serializable_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.io.Serializable $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.io.Serializable) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of rendezVousAdd(int, int, Serializable)
    public java.io.Serializable rendezVousAdd(int $param_int_1, int $param_int_2, java.io.Serializable $param_Serializable_3)
	throws CCJ.CCJException, java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_rendezVousAdd_3, new java.lang.Object[] {new java.lang.Integer($param_int_1), new java.lang.Integer($param_int_2), $param_Serializable_3}, 5138648816406637420L);
		return ((java.io.Serializable) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeInt($param_int_1);
		    out.writeInt($param_int_2);
		    out.writeObject($param_Serializable_3);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.io.Serializable $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.io.Serializable) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (CCJ.CCJException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
