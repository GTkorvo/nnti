#@HEADER
#@HEADER

#----------------------------------------------------------------------
UNPACKING
#----------------------------------------------------------------------

To unpack NOX, type

> tar xzvf nox-<version>.tar.gz

or 

> gunzip -c nox-<version>.tar.gz | tar xvf -

In either case, rename the directory to simply "nox":

> mv nox-<version> nox

#----------------------------------------------------------------------
COMPILING THE EXAMPLES WITH TRILINOS & MPI
#----------------------------------------------------------------------

As far as I can tell, the examples we have will only work with
"regular" MPI (as opposed to LAM MPI).  The problems seems mainly to
be that TRILINOS_COMM is then set to LAMMPI instead of just MPI, which
would cause problems in the cc_main.cc code. 

> cd nox
> mkdir builds
> cd builds
> mkdir LINUX.MPI
> cd LINUX.MPI
> ../../configure TRILINOS_COMM=MPI TRILINOS_TARGET=LINUX.MPI CC=mpicc CXX=mpiCC
> make

The 'configure' line assumes that TRILINOS_HOME is defined. If not,
add that to the configure line as well. Furthermore, TRILINOS_COMM
does not need to be defined if it is already defined as an
environmental variable. Likewise, TRILINOS_TARGET does not need to be
defined if TRILINOS_ARCH, TRILINOS_COMM, and (optionally) TRILINOS_ID
are already defined on the configure line or as enviromental
variables.

The executables for the examples are now named 'example'.

#----------------------------------------------------------------------
COMPILING THE EXAMPLES WITH TRILINOS & SERIAL MODE
#----------------------------------------------------------------------

This is essentially the same as above.
The DS6.5.1 example does not work in serial mode. Not sure why.

> cd nox
> mkdir builds
> cd builds
> mkdir LINUX.SERIAL
> cd LINUX.SERIAL
> ../../configure TRILINOS_COMM=SERIAL TRILINOS_TARGET=LINUX.SERIAL
> make

#----------------------------------------------------------------------
COMPILING - MULTI 
#----------------------------------------------------------------------

> cd nox
> mkdir builds
> cd builds
> mkdir <BUILD_NAME>
> cd <BUILD_NAME>
> ../../configure
> make

Add the following to your CPPFLAGS:

  -I$(NOX_HOME)/builds/<BUILD_NAME>/src -I$(NOX_HOME)/src

Add the following to your LDFLAGS:

  -L$(NOX_HOME)/builds/<BUILD_NAME>/src

Add the following to you LIBS:

  -lnox -lnoxepetra

#----------------------------------------------------------------------
INSTALLING NOX - MULTI
#----------------------------------------------------------------------

> cd $(NOX_HOME)
> ./configure --prefix=<directory> --exec_prefix=<exec_directory>
> make install

Headers: $(prefix)/include/nox $(exec_prefix)/include/nox
Libraries: $(exec_prefix)/lib

Add the following to your CPPFLAGS:

  -I$(prefix)/include/nox -I$(exec_prefix)/include/nox

Add the following to your LDFLAGS:

  -L$(exec_prefix)/lib

Add the following to you LIBS:

  -lnox -lnoxepetra

#----------------------------------------------------------------------
COMPILING - SINGLE
#----------------------------------------------------------------------

> cd nox
> ./configure
> make

Add the following to your CPPFLAGS:

  -I$(NOX_HOME)/src

Add the following to your LDFLAGS:

  -L$(NOX_HOME)/src

Add the following to you LIBS:

  -lnox -lnoxepetra

#----------------------------------------------------------------------
INSTALLING NOX - SINGLE
#----------------------------------------------------------------------

> cd $(NOX_HOME)
> ./configure --prefix=<directory>
> make install

Headers: $(prefix)/include/nox
Libraries: $(prefix)/lib

Add the following to your CPPFLAGS:

  -I$(prefix)/include/nox

Add the following to your LDFLAGS:

  -L$(prefix)/lib

Add the following to you LIBS:

  -lnox -lnoxepetra

#----------------------------------------------------------------------
Developer's Notes...
#----------------------------------------------------------------------

If you change any .m4 file in config, "rm aclocal.m4" and re-run "bootstrap".