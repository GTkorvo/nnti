#!/usr/bin/perl
# $Id$
# $Source$

########################################################################
### NOT PART OF DISTRIBUTION.
### Automatically generates APPS Makefile.in with correct dependencies
### for all C files. 
########################################################################

# Build dependencies - requires three arguments.
sub build_depends{

    # Copy inputs (@_) into local variables
    local(*INCDIR,*SRCDIR,$OUTFILE) = @_;

    # Generate a list of all include files (which end in .H) 
    # from each directory in INCDIR
    @incfiles = ();
    foreach $incdir (@INCDIR) {
	opendir(DIR, $incdir) || die "Can't open $incdir. $!\n";
	@filenames = readdir(DIR);
	foreach (@filenames) {
	    (/.H$/) &&
		((($incdir =~ /^.$/) && push(@incfiles, "$_")) ||
		 push(@incfiles, "$incdir/$_"));
	}
	closedir(DIR);
    }

    # Generate a list of all c++ source files (which end in .C)
    # from each directory in SRCDIR
    @srcfiles = ();
    foreach $srcdir (@SRCDIR) {
	opendir(DIR, $srcdir) || die "Can't open $srcdir. $!\n";
	@filenames = readdir(DIR);
	foreach (@filenames) {
	    (/.C$/) && 
		((($srcdir =~ /^.$/) && push(@srcfiles, "$_")) ||
		push(@srcfiles, "$srcdir/$_"))
	}
	closedir(DIR);
    }
    
    # For each include file in @incfiles, assemble a list of its 
    # dependencies in $includes{$incfile}.
    foreach $incfile (@incfiles) {
	open(INCFILE, "<$incfile") || die "Can't open $incfile. $!\n";
	foreach (<INCFILE>) {
	    if (/^#include\s+"(.*)"/) {
		@list = grep(/$1$/, @incfiles);
		if ($#list >= 0) {
		    $includes{$incfile} .= join(' ', @list) . ' ';
		}
	    }
	}
	close(INCFILE);
    }
    
    # For each include file in @incfiles, assemble a list of its 
    # dependencies, including the dependencies in files it includes.
    foreach $srcfile (@srcfiles) {
	
	# Copy source file name, delete the path, and change .C to .o
	$objfile = $srcfile;
	$objfile =~ s/(.*)\///;
	$objfile =~ s/\.C/\.o/;
	
	# Construct a dependency list, including the dependencies
	# of each included file (may miss dependencies that are more 
	# than two deep)
	$deplist = "";
	open(SRCFILE, "<$srcfile") || die "Can't open $srcfile. $!\n";
	foreach (<SRCFILE>) {
	    if (/^#include\s+"(.*)"/) {
		@list = grep(/$1$/, @incfiles);
		foreach (@list) {
		    $deplist .= $_ . ' ' . $includes{$_} . ' ';
		}
	    }
	}
	close(SRCFILE);
	
	# Sort and remove duplicates
	$prev = "";
	@newlist = ($srcfile);
	foreach (sort split(/\s+/, $deplist)) {
	    (/^$prev$/) || push(@newlist, $_);
	    $prev = $_;
	}
	
	# Rejoin the list and add breaks
	$list = join(' ', @newlist);
	$list =~ s/^(.{40}\S* )(.+)/\1\\\n\t\2/;
	while ($list =~ s/(.*\n.{50}\S* )(.+)$/\1\\\n\t\2/){}
	
	# Output the compile command for each object file
	print OUTFILE "$objfile : $list \n";
	print OUTFILE "\t\$(CXX) -c \$(CXXFLAGS) $srcfile -o \$@\n";
	print OUTFILE "\n";
    }

} # End sub build_depends

sub print_line {
    # Copy inputs (@_) into local variables
    local($OUTFILE) = @_;
    $a = 0;
    while ($a < 72) {
	print OUTFILE "\#";
	$a ++;
    }
    print OUTFILE "\n";
}

@INCDIR = (".");   # list of include directories
@SRCDIR = (".");       # list of src directories

# Open Makefile
$FILENAME = "Makefile";
open(OUTFILE,">$FILENAME") || die "Can't open $FILENAME\n";

# Generate Makefile.in
#print OUTFILE "\# \$Id\$ \n" ;
#print OUTFILE "\# \$Source\$ \n" ;
#print OUTFILE "\# \$Name\$ \n" ;

#print OUTFILE "\n";

print_line(OUTFILE);

print OUTFILE "\#\#\# Makefile\n";

print_line(OUTFILE);

print OUTFILE "\n";

print_line(OUTFILE);

print OUTFILE "\#\#\# Definitions \n";

print_line(OUTFILE);

print OUTFILE "\n";
print OUTFILE "CXXFLAGS = -g -I\$(TRILINOS_HOME)/src/petra\n";
#print OUTFILE "include ../Makefile.defs \n";
print OUTFILE "\n";

print_line(OUTFILE);
print OUTFILE "\#\#\# Executable Rules \n";
print_line(OUTFILE);

print OUTFILE "\n";

print OUTFILE "OBJS = NLS_Newton.o NLS_PetraVector.o NLS_Method.o NLS_ParameterList.o \n";

print OUTFILE "\n";

print OUTFILE "tester: \$(OBJS) tester.o\n";
print OUTFILE "\t \$(CXX) \$(CXXFLAGS) tester.o NLS_ParameterList.o -o tester\n";

print OUTFILE "\n";

print_line(OUTFILE);
print OUTFILE "\#\#\# Object File Rules\n";
print_line(OUTFILE); 

print OUTFILE "\n";

&build_depends(*INCDIR,*SRCDIR,OUTFILE);

print_line(OUTFILE);

print OUTFILE "\#\#\# Utilities\n";

print_line(OUTFILE);

print OUTFILE "\n";
#print OUTFILE "include ../Makefile.utils\n";
print OUTFILE "\n";
print OUTFILE "\n";

close(OUTFILE);

