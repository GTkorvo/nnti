// $Id$ 
// $Source$ 

//@HEADER
// ************************************************************************
// 
//            NOX: An Object-Oriented Nonlinear Solver Package
//                 Copyright (2002) Sandia Corporation
// 
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//   
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//   
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
// 
// Questions? Contact Tammy Kolda (tgkolda@sandia.gov) or Roger Pawlowski
// (rppawlo@sandia.gov).
// 
// ************************************************************************
//@HEADER

#ifndef NOX_STATUSTEST_GENERIC_H
#define NOX_STATUSTEST_GENERIC_H

#include "NOX_Common.H"		// for ostream

namespace NOX {

namespace Solver
{
class Generic;			// forward declaration (included below)
}

//! %Status checkers.
namespace StatusTest {

//! Status type.
enum StatusType 
  { 
    //! Unevaluated
    Unevaluated = -2,
    //! Neither Converged nor Failed
    Unconverged = 0, 
    //! Converged
    Converged = 1,
    //! Failed
    Failed = -1 
  };

//! Type of check that should be done by checkStatus
enum CheckType
  {
    //! Evaluate every test and subtest 
    Complete,
    //! Evaluate only the tests and subtests that are necessary to determine the status [default]
    Minimal,
    //! Do not evaluate, except for necessary intermediate tests 
    None
  };

/*! 

  \brief %Generic status test to check for convergence or failure of
  the nonlinear solver.

*/
class Generic {

public:

  //! Constructor.
  Generic() {};

  //! Destructor.
  virtual ~Generic() {};

  //! %Test the stopping criterion
  virtual NOX::StatusTest::StatusType checkStatus(const NOX::Solver::Generic& problem) = 0;

  //! %Test the stopping criterion
  /*!  
    The test can (and should, if possible) be skipped if \c
    checkType is NOX::StatusType::None.  If the test is skipped, then
    the status should be set to NOX::StatusTest::Unevaluated.
  */
  virtual NOX::StatusTest::StatusType checkStatus(const NOX::Solver::Generic& problem, 
						  NOX::StatusTest::CheckType checkType)
  { 
    return checkStatus(problem); 
  };

  //! Return the result of the most recent checkStatus call
  virtual NOX::StatusTest::StatusType getStatus() const = 0;

  //! Output formatted description of stopping test to output stream.
  virtual ostream& print(ostream& stream, int indent = 0) const = 0;

};

} // namespace StatusTest
} // namespace NOX

ostream& operator<<(ostream& os, NOX::StatusTest::StatusType type);


#endif

