#!/usr/bin/perl
# $Id$
# $Source$

########################################################################
### Automatically generates Makefile components
########################################################################

sub build_depends{

    # Copy inputs (@_) into local variables
    # 1st argument is list of subdirectories to search
    # 2nd argument is name of project
    local(*DIRS, $projname) = @_;

    @incfiles = ();		# list of all included files
    @srcfiles = ();		# list of all source files
    @metaobjs = ();		# list of all OBJS variables (one per subdir)
    @incdirs = ();		# list of all dirs with include files

    # Generate all the above lists by going through each directory listed in DIRSA
    foreach $dir (@DIRS) {

	$isinc = 0;		# Is this directory in @incdirs?
	@objfiles = ();		# List of object files in this directory

	opendir(DIR, $dir) || die "Can't open include directory $dir. $!\n";
	@filenames = readdir(DIR);
	foreach (@filenames) {
	    (/.H$/) && 
		(($isinc == 1) || push(@incdirs, "$dir") && ($isinc = 1)) &&
		((($dir =~ /^.$/) && push(@incfiles, "$_")) ||
		 push(@incfiles, "$dir/$_"));
	    (/.C$/) && 
		((($dir =~ /^.$/) && push(@srcfiles, "$_")) ||
		 push(@srcfiles, "$dir/$_"));
	    (s/\.C$/\.o/) &&
		push(@objfiles, "$_");
	}
	closedir(DIR);

	# Create OBJS variable name for this directory's object files
	@objname = ();
	push(@objname, "$projname");
	($dir =~ s/$SRCDIRHOME\/(.*)/$1/) && ($dir =~ tr/a-z/A-Z/) && 
	    push(@objname, "$dir");
	push(@objname, "OBJS");
	$objname = join('_', @objname);	

	# Output to definitions file
	if ($#objfiles > -1) {
	    $list = format_list(@objfiles);
	    print DEFS "$objname = $list\n\n";
	    push(@metaobjs, "$objname");
	}

    }

    # For each include file in @incfiles, assemble a list of its 
    # dependencies in $includes{$incfile}.
    foreach $incfile (@incfiles) {
	open(INCFILE, "<$incfile") || die "Can't open $incfile. $!\n";
	foreach (<INCFILE>) {
	    if (/^#include\s+"(.*)"/) {
		@list = grep(/$1$/, @incfiles);
		if ($#list >= 0) {
		    $includes{$incfile} .= join(' ', @list) . ' ';
		}
	    }
	}
	close(INCFILE);
    }
    
    foreach $srcfile (@srcfiles) {
	
	# Copy source file name, delete the path, and change .C to .o
	$objfile = $srcfile;
	$objfile =~ s/(.*)\///;
	$objfile =~ s/\.C/\.o/;
	
	# Construct a dependency list, including the dependencies
	# of each included file (may miss dependencies that are more 
	# than two deep)
	$deplist = "";
	open(SRCFILE, "<$srcfile") || die "Can't open $srcfile. $!\n";
	foreach (<SRCFILE>) {
	    if (/^#include\s+"(.*)"/) {
		@list = grep(/$1$/, @incfiles);
		foreach (@list) {
		    $deplist .= $_ . ' ' . $includes{$_} . ' ';
		}
	    }
	}
	close(SRCFILE);
	
	# Sort and remove duplicates
	$prev = "";
	@newlist = ();
	foreach (sort split(/\s+/, $deplist)) {
	    (/^$prev$/) || push(@newlist, $_);
	    $prev = $_;
	}

	# Get dependencies that are more than two deep
	do {
	    @list = @newlist;

	    foreach (@list) {
		$deplist .= $_ . ' ' . $includes{$_} . ' ';
	    }

	    $prev = "";
	    @newlist = ();
	    foreach (sort split(/\s+/, $deplist)) {
		(/^$prev$/) || push(@newlist, $_);
		$prev = $_;
	    }
	    

	} until ($#list ==  $#newlist);

	push (@newlist, "$srcfile");
	
	# Output the compile command for each object file
	$list = format_list(@newlist);
	print RULES "$objfile : $list \n";
	print RULES "\t\$(CXX) -c \$(CXXFLAGS) $srcfile -o \$@\n";
	print RULES "\n";
    }

    # Print out object file list

   foreach (@metaobjs) {
	s/(.*)/\$($1)/;
	push(@newmetaobjs, "$_");
    }
    $list = format_list(@newmetaobjs);
    print DEFS "$projname";
    print DEFS "_ALL_OBJS = $list \n";
    print DEFS "\n";

    # Print out include files directories

    foreach (@incdirs) {
	s/$SRCDIRHOME(.*)/-I$SRCDIRHOME_REPLACE$1/;
	push(@newincdirs, "$_");
    }

    $list = format_list(@newincdirs);
    print DEFS "$projname";
    print DEFS "_INCLUDES = $list \n";
    print DEFS "\n";


} # End sub build_depends

sub format_list {
    my @list = @_;
    $lines = join(' ', @list);
    $lines =~ s/^(.{30}\S* )(.+)/\1\\\n\t\2/;
    while ($lines =~ s/(.*\n.{40}\S* )(.+)$/\1\\\n\t\2/){}
    return $lines;
}    

sub print_line {
    my $fh = shift;
    $a = 0;
    while ($a < 72) {
	print $fh "\#";
	$a ++;
    }
    print $fh "\n";
}

# variables that may change
$PROJNAME = "NLSPACK";
$SRCDIRHOME = "../src";
$SRCDIRHOME_REPLACE = "\$(NLSPACK_HOME)/src";
$BUILDDIR = "../build";

# Find all the subdirectories of the root directory
@DIRNAMES = `find $SRCDIRHOME -type d ! -name \*CVS  -print`;
foreach (@DIRNAMES) {
    s/(.*)\n/$1/;
    push(@DIRS, "$_");
}

# Open Makefile
$RULESNAME = "$BUILDDIR/Makefile.autorules";
open(RULES,">$RULESNAME") || die "Can't open $RULESNAME\n";

$DEFSNAME = "$BUILDDIR/Makefile.autodefs";
open(DEFS,">$DEFSNAME") || die "Can't open $DEFSNAME\n";

# Generate Makefile.in
#print RULES "\# \$Id\$ \n" ;
#print RULES "\# \$Source\$ \n" ;
#print RULES "\# \$Name\$ \n" ;

#print RULES "\n";

print_line(RULES);
print RULES "\#\#\# DO NOT MODIFY!!!\n";
print RULES "\#\#\# This file automatically generated by makemake\n";
print_line(RULES);
print RULES "\#\#\# $PROJNAME Object File Rules\n";
print_line(RULES); 

print RULES "\n";

print_line(DEFS);
print DEFS "\#\#\# DO NOT MODIFY!!!\n";
print DEFS "\#\#\# This file automatically generated by makemake\n";
print_line(DEFS);
print DEFS "\#\#\# $PROJNAME Object File-Related Definitions\n";
print_line(DEFS); 

print DEFS "\n";

&build_depends(*DIRS,$PROJNAME);

close(RULES);
close(DEFS);

