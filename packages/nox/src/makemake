#!/usr/bin/perl
# $Id$
# $Source$

########################################################################
### NOT PART OF DISTRIBUTION.
### Automatically generates Makefile components
########################################################################

# Build dependencies - requires three arguments.
sub build_depends{

    # Copy inputs (@_) into local variables
    local(*INCDIR,*SRCDIR, $proj) = @_;

    # Generate a list of all include files (which end in .H) 
    # from each directory in INCDIR
    @incfiles = ();
    foreach $incdir (@INCDIR) {
	opendir(DIR, $incdir) || die "Can't open include directory $incdir. $!\n";
	@filenames = readdir(DIR);
	foreach (@filenames) {
	    (/.H$/) &&
		((($incdir =~ /^.$/) && push(@incfiles, "$_")) ||
		 push(@incfiles, "$incdir/$_"));
	}
	closedir(DIR);
    }

    # Generate a list of all c++ source files (which end in .C)
    # from each directory in SRCDIR
    @srcfiles = ();
    foreach $srcdir (@SRCDIR) {
	opendir(DIR, $srcdir) || die "Can't open source directory $srcdir. $!\n";
	@filenames = readdir(DIR);
	foreach (@filenames) {
	    (/.C$/) && 
		((($srcdir =~ /^.$/) && push(@srcfiles, "$_")) ||
		push(@srcfiles, "$srcdir/$_"))
	}
	closedir(DIR);
    }
    
    # For each include file in @incfiles, assemble a list of its 
    # dependencies in $includes{$incfile}.
    foreach $incfile (@incfiles) {
	open(INCFILE, "<$incfile") || die "Can't open $incfile. $!\n";
	foreach (<INCFILE>) {
	    if (/^#include\s+"(.*)"/) {
		@list = grep(/$1$/, @incfiles);
		if ($#list >= 0) {
		    $includes{$incfile} .= join(' ', @list) . ' ';
		}
	    }
	}
	close(INCFILE);
    }
    
    # For each include file in @incfiles, assemble a list of its 
    # dependencies, including the dependencies in files it includes.
    foreach $srcfile (@srcfiles) {
	
	# Copy source file name, delete the path, and change .C to .o
	$objfile = $srcfile;
	$objfile =~ s/(.*)\///;
	$objfile =~ s/\.C/\.o/;
	
	push(@objlist, $objfile);

	# Construct a dependency list, including the dependencies
	# of each included file (may miss dependencies that are more 
	# than two deep)
	$deplist = "";
	open(SRCFILE, "<$srcfile") || die "Can't open $srcfile. $!\n";
	foreach (<SRCFILE>) {
	    if (/^#include\s+"(.*)"/) {
		@list = grep(/$1$/, @incfiles);
		foreach (@list) {
		    $deplist .= $_ . ' ' . $includes{$_} . ' ';
		}
	    }
	}
	close(SRCFILE);
	
	# Sort and remove duplicates
	$prev = "";
	@newlist = ($srcfile);
	foreach (sort split(/\s+/, $deplist)) {
	    (/^$prev$/) || push(@newlist, $_);
	    $prev = $_;
	}
	
	# Rejoin the list and add breaks
	$list = join(' ', @newlist);
	$list =~ s/^(.{30}\S* )(.+)/\1\\\n\t\2/;
	while ($list =~ s/(.*\n.{40}\S* )(.+)$/\1\\\n\t\2/){}
	
	# Output the compile command for each object file
	print RULES "$objfile : $list \n";
	print RULES "\t\$(CXX) -c \$(CXXFLAGS) $srcfile -o \$@\n";
	print RULES "\n";
    }

    # Print out include files directories

    foreach (@INCDIR) {
	s/$ROOTDIR(.*)/$ROOTDIRSUB$1/;
	push(@NEWINCDIR, "$_");
    }
    $list = join(' -I', @NEWINCDIR);
    $list =~ s/^(.{30}\S* )(.+)/\1\\\n\t\2/;
    while ($list =~ s/(.*\n.{40}\S* )(.+)$/\1\\\n\t\2/){}
    
    print DEFS "\n$proj";
    print DEFS "_INCLUDES = -I$list \n";
    print DEFS "\n";

    # Print out object file list

    $list = join(' ', @objlist);
    $list =~ s/^(.{30}\S* )(.+)/\1\\\n\t\2/;
    while ($list =~ s/(.*\n.{40}\S* )(.+)$/\1\\\n\t\2/){}
    
    print DEFS "\n$proj";
    print DEFS "_OBJ = $list \n";
    print DEFS "\n";


} # End sub build_depends

sub print_line {
    my $fh = shift;
    $a = 0;
    while ($a < 72) {
	print $fh "\#";
	$a ++;
    }
    print $fh "\n";
}

# project name
$PROJ = "NLSPACK";
$ROOTDIR = "../src";
$ROOTDIRSUB = "\$(NLSPACK_HOME)/src";
# Find all the subdirectories of the root directory
@DIRNAMES = `find $ROOTDIR -type d ! -name \*CVS  -print`;
foreach (@DIRNAMES) {
    s/(.*)\n/$1/;
    push(@INCDIR, "$_");
}
@SRCDIR = @INCDIR;

# Open Makefile
$FILENAME = "../build/Makefile.rules";
open(RULES,">$FILENAME") || die "Can't open $FILENAME\n";

$DEFSFILENAME = "../build/Makefile.rules.defs";
open(DEFS,">$DEFSFILENAME") || die "Can't open $DEFSFILENAME\n";

# Generate Makefile.in
#print RULES "\# \$Id\$ \n" ;
#print RULES "\# \$Source\$ \n" ;
#print RULES "\# \$Name\$ \n" ;

#print RULES "\n";

print_line(RULES);
print RULES "\#\#\# DO NOT MODIFY!!!\n";
print RULES "\#\#\# This file automatically generated by makemake\n";
print_line(RULES);
print RULES "\#\#\# $PROJ Object File Rules\n";
print_line(RULES); 

print RULES "\n";

print_line(DEFS);
print DEFS "\#\#\# DO NOT MODIFY!!!\n";
print DEFS "\#\#\# This file automatically generated by makemake\n";
print_line(DEFS);
print DEFS "\#\#\# $PROJ Object File-Related Definitions\n";
print_line(DEFS); 

print DEFS "\n";

&build_depends(*INCDIR,*SRCDIR,$PROJ);

close(RULES);
close(DEFS);

