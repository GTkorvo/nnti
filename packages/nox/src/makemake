#!/usr/bin/perl
# $Id$
# $Source$

########################################################################
### Automatically generates Makefile components
########################################################################

# Build dependencies - requires three arguments.
sub build_depends{

    # Copy inputs (@_) into local variables
    local(*DIRS, $projname) = @_;

    # Generate a list of all include and source files
    # from each directory in DIRS
    @incfiles = ();
    @srcfiles = ();
    foreach $dir (@DIRS) {

	@objfiles = ();

	opendir(DIR, $dir) || die "Can't open include directory $dir. $!\n";
	@filenames = readdir(DIR);
	foreach (@filenames) {
	    (/.H$/) &&
		((($dir =~ /^.$/) && push(@incfiles, "$_")) ||
		 push(@incfiles, "$dir/$_"));
	    (/.C$/) && 
		((($dir =~ /^.$/) && push(@srcfiles, "$_")) ||
		 push(@srcfiles, "$dir/$_"));
	    (s/\.C$/\.o/) &&
		push(@objfiles, "$_");
	}
	closedir(DIR);

	# Output object files for this particular directory
	$shortdir = $dir;
	($shortdir =~ s/$SRCDIRHOME\/(.*)/$1/) || ($shortdir = "");
	print "Directory: $dir -> $shortdir\n";
	print @objfiles;
	print "\n";

    }

    # For each include file in @incfiles, assemble a list of its 
    # dependencies in $includes{$incfile}.
    foreach $incfile (@incfiles) {
	open(INCFILE, "<$incfile") || die "Can't open $incfile. $!\n";
	foreach (<INCFILE>) {
	    if (/^#include\s+"(.*)"/) {
		@list = grep(/$1$/, @incfiles);
		if ($#list >= 0) {
		    $includes{$incfile} .= join(' ', @list) . ' ';
		}
	    }
	}
	close(INCFILE);
    }
    
    foreach $srcfile (@srcfiles) {
	
	# Copy source file name, delete the path, and change .C to .o
	$objfile = $srcfile;
	$objfile =~ s/(.*)\///;
	$objfile =~ s/\.C/\.o/;
	
	push(@objlist, $objfile);

	# Construct a dependency list, including the dependencies
	# of each included file (may miss dependencies that are more 
	# than two deep)
	$deplist = "";
	open(SRCFILE, "<$srcfile") || die "Can't open $srcfile. $!\n";
	foreach (<SRCFILE>) {
	    if (/^#include\s+"(.*)"/) {
		@list = grep(/$1$/, @incfiles);
		foreach (@list) {
		    $deplist .= $_ . ' ' . $includes{$_} . ' ';
		}
	    }
	}
	close(SRCFILE);
	
	# Sort and remove duplicates
	$prev = "";
	@newlist = ($srcfile);
	foreach (sort split(/\s+/, $deplist)) {
	    (/^$prev$/) || push(@newlist, $_);
	    $prev = $_;
	}
	
	# Rejoin the list and add breaks
	$list = join(' ', @newlist);
	$list =~ s/^(.{30}\S* )(.+)/\1\\\n\t\2/;
	while ($list =~ s/(.*\n.{40}\S* )(.+)$/\1\\\n\t\2/){}
	
	# Output the compile command for each object file
	print RULES "$objfile : $list \n";
	print RULES "\t\$(CXX) -c \$(CXXFLAGS) $srcfile -o \$@\n";
	print RULES "\n";
    }

    # Print out include files directories

    foreach (@DIRS) {
	s/$SRCDIRHOME(.*)/-I$SRCDIRHOME_REPLACE$1/;
	push(@INCDIRS, "$_");
    }

    $list = join(' ', @INCDIRS);
    $list =~ s/^(.{30}\S* )(.+)/\1\\\n\t\2/;
    while ($list =~ s/(.*\n.{40}\S* )(.+)$/\1\\\n\t\2/){}
    
    print DEFS "\n$projname";
    print DEFS "_INCLUDES = $list \n";
    print DEFS "\n";

    # Print out object file list

    $list = join(' ', @objlist);
    $list =~ s/^(.{30}\S* )(.+)/\1\\\n\t\2/;
    while ($list =~ s/(.*\n.{40}\S* )(.+)$/\1\\\n\t\2/){}
    
    print DEFS "\n$projname";
    print DEFS "_OBJ = $list \n";
    print DEFS "\n";


} # End sub build_depends

sub print_line {
    my $fh = shift;
    $a = 0;
    while ($a < 72) {
	print $fh "\#";
	$a ++;
    }
    print $fh "\n";
}

# variables that may change
$PROJNAME = "NLSPACK";
$SRCDIRHOME = "../src";
$SRCDIRHOME_REPLACE = "\$(NLSPACK_HOME)/src";
$BUILDDIR = "../build";

# Find all the subdirectories of the root directory
@DIRNAMES = `find $SRCDIRHOME -type d ! -name \*CVS  -print`;
foreach (@DIRNAMES) {
    s/(.*)\n/$1/;
    push(@DIRS, "$_");
}

# Open Makefile
$RULESNAME = "$BUILDDIR/Makefile.autorules";
open(RULES,">$RULESNAME") || die "Can't open $RULESNAME\n";

$DEFSNAME = "$BUILDDIR/Makefile.autodefs";
open(DEFS,">$DEFSNAME") || die "Can't open $DEFSNAME\n";

# Generate Makefile.in
#print RULES "\# \$Id\$ \n" ;
#print RULES "\# \$Source\$ \n" ;
#print RULES "\# \$Name\$ \n" ;

#print RULES "\n";

print_line(RULES);
print RULES "\#\#\# DO NOT MODIFY!!!\n";
print RULES "\#\#\# This file automatically generated by makemake\n";
print_line(RULES);
print RULES "\#\#\# $PROJNAME Object File Rules\n";
print_line(RULES); 

print RULES "\n";

print_line(DEFS);
print DEFS "\#\#\# DO NOT MODIFY!!!\n";
print DEFS "\#\#\# This file automatically generated by makemake\n";
print_line(DEFS);
print DEFS "\#\#\# $PROJNAME Object File-Related Definitions\n";
print_line(DEFS); 

print DEFS "\n";

&build_depends(*DIRS,$PROJNAME);

close(RULES);
close(DEFS);

