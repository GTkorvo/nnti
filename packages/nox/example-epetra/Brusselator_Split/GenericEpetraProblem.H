//  A pure virtual problem class to be used (via encapsulation) in
//  NOX_Epetra_Interface.H

#ifndef _NOX_GENERIC_PROBLEM_H
#define _NOX_GENERIC_PROBLEM_H

#include "NOX.H"

// This is needed to get the FillType enum values from NOX_Epetra_Interface
#include "NOX_Epetra_Interface.H"

// Forward Declarations
class Epetra_Comm;
class Epetra_Map; 
class Epetra_Vector;
class Epetra_Import;
class Epetra_CrsGraph;
class Epetra_CrsMatrix;

// Flag to tell the evaluate routine what objects to fill
enum FillType {F_ONLY, MATRIX_ONLY, ALL}; 

// Flag to tell how to order the unknowns
enum StoreUnknowns {Interleaved, Staggered}; // Not currently used

// Finite Element Problem Class
class GenericEpetraProblem { 

public:

  // Constructor
  GenericEpetraProblem(int NumGlobalElements, Epetra_Comm& Comm);

  // Destructor
  virtual ~GenericEpetraProblem();

  // Pure virtual methods 

  // Evaluates the function (RHS) and/or the Jacobian using the solution 
  // values in solnVector.
  virtual bool evaluate(FillType f, const Epetra_Vector *solnVector, 
		Epetra_Vector *rhsVector, Epetra_RowMatrix *matrix,
                NOX::Epetra::Interface::FillType fill=NOX::Epetra::Interface::F)
                = 0;


  // Virtual methods with defaults provided

  // Allow a reset capability, eg for time dependent or parameter
  // continuation problems.
  virtual void reset() {}; 

  virtual void reset(const Epetra_Vector& x) {};

  // Set auxillary (other problem variables) vector
  virtual void setAuxillarySolution(const Epetra_Vector&); 

  // Create Standard and Overlap (ghost) maps
  virtual void createMaps(); 

  // Method needed to satisfy Problem_Interface.  
  virtual bool computePrecMatrix(const Epetra_Vector& solnVector, 
                               Epetra_RowMatrix& matrix);

  // Method needed to satisfy Problem_Interface.  
  virtual bool computePreconditioner(const Epetra_Vector& solnVector, 
                                   Epetra_Operator& precOperator);

  // Return a reference to the mesh for this problem
  virtual Epetra_Vector& getMesh();

  // Return a reference to the Epetra_Vector with the initial guess
  // that is generated by this class.
  virtual Epetra_Vector& getSolution();
  
  // Return a reference to the Epetra_CrsMatrix if one is used
  virtual Epetra_CrsMatrix& getJacobian();

  // Return a reference to the Epetra_CrsGraph if one is valid
  virtual Epetra_CrsGraph& getGraph();

  // Output results 
  virtual void outputResults(NOX::Solver::Manager& solver, 
                             NOX::Parameter::List& printParams);

protected:

  // inserts the global column indices into the Graph
  virtual void generateGraph() {};

protected:

  Epetra_Map *StandardMap;
  Epetra_Map *OverlapMap;
  Epetra_Import *Importer;
  Epetra_Vector *xptr;
  Epetra_Vector *initialSolution;
  Epetra_CrsGraph *AA;
  Epetra_CrsMatrix *A;
  Epetra_Comm *Comm;
  Epetra_Vector *auxSolution; // Auxillary data; solution from other Equation
                              // used to debug this Equation

public: // for now

  int MyPID;              // Process number
  int NumProc;            // Total number of processes

  int NumMyNodes;         // Number of nodes owned by this process
  int NumGlobalNodes;     // Total Number of nodes
};
#endif
