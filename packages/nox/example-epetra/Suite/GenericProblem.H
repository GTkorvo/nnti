//  A pure virtual problem class to be used (via encapsulation) in
//  NOX_Epetra_Interface.H

#ifndef _NOX_GENERIC_PROBLEM_H
#define _NOX_GENERIC_PROBLEM_H

#include "NOX.H"

// Forward Declarations
class Epetra_Comm;
class Epetra_Map; 
class Epetra_Vector;
class Epetra_Import;
class Epetra_CrsGraph;
class Epetra_CrsMatrix;

// Flag to tell the evaluate routine what objects to fill
enum FillType {F_ONLY, MATRIX_ONLY, ALL}; 

// Finite Element Problem Class
class GenericProblem { 

public:

  // Constructor
  GenericProblem(int NumGlobalElements, Epetra_Comm& Comm) {};

  // Destructor
  virtual ~GenericProblem() {};

  // Solution initialization
  virtual void initializeSolution() = 0;

  // Evaluates the function (RHS) and/or the Jacobian using the solution 
  // values in solnVector.
  virtual bool evaluate(FillType f, const Epetra_Vector *solnVector, 
		Epetra_Vector *rhsVector, Epetra_RowMatrix *matrix) = 0;

  // Method needed to satisfy Problem_Interface.  
  virtual bool computePrecMatrix(const Epetra_Vector& solnVector, 
                               Epetra_RowMatrix& matrix) = 0;

  // Method needed to satisfy Problem_Interface.  
  virtual bool computePreconditioner(const Epetra_Vector& solnVector, 
                                   Epetra_Operator& precOperator) = 0;

  // Return a reference to the Epetra_Vector with the initial guess
  // that is generated by this class.
  virtual Epetra_Vector& getSolution() = 0;
  
  // Return a reference to the Epetra_Vector with the Jacobian
  // that is generated by this class.
  virtual Epetra_CrsMatrix& getJacobian() = 0;

  // Return a reference to the solver ParameterList
  virtual NOX::Parameter::List& getParameters() = 0;

  // Return a reference to the Linear Solver Parameter sublist
  virtual NOX::Parameter::List& getlsParameters() = 0;

  // Output results 
  virtual void outputResults(NOX::Solver::Manager& solver, 
                             NOX::Parameter::List& printParams);

private:

  // inserts the global column indices into the Graph
  virtual Epetra_CrsGraph& generateGraph(Epetra_CrsGraph& AA) = 0;
};
#endif




