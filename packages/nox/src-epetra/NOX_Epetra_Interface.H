// $Id$ 
// $Source$ 

//@HEADER
// ************************************************************************
// 
//            NOX: An Object-Oriented Nonlinear Solver Package
//                 Copyright (2002) Sandia Corporation
// 
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
// 
// This library is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of the
// License, or (at your option) any later version.
//  
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//                                                                                 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA                                                                                
// Questions? Contact Tammy Kolda (tgkolda@sandia.gov) or Roger Pawlowski
// (rppawlo@sandia.gov), Sandia National Laboratories.
// 
// ************************************************************************
//@HEADER

#ifndef NOX_EPETRA_INTERFACE_H
#define NOX_EPETRA_INTERFACE_H

#include "NOX_Common.H"
  
// Forward declarations
class Epetra_Vector;
class Epetra_RowMatrix;
class Epetra_Operator;

namespace NOX {
namespace Epetra {

  /*! \brief Used by NOX::Epetra::Group to provide a link to the
   *  external code for RHS and Jacobian fills ()if needed. */
  /*! At a minimum the user must supply a computeF().  
   * If the user is supplying their own Epetra_RowMatrix for the Jacobian,
   * then they must supply a computeJacobian().  If computeJacobian is
   * not supplied, a Matrix-Free or Finite Differencing Epetra_RowMatrix
   * can be used in NOX.  Preconditioning functions are only  needed 
   * if the user wishes to supply their own preconditioner.  Otherwise
   * Aztec has built-in preconditioners to use.  */
class Interface {

public:
 
  //! Type of fill that a computeF() method is used for.  This flag is used when a computeF() is used to compute a lagged Jacobian by finite difference or matrix-free methods.  This allows for removing specific terms of the Jacobian 
  enum FillType {F, Jacobian, Preconditioner, FiniteDifferenceF, MatrixFreeF};

  //! Constructor
  Interface() {};

  //! Destructor
  virtual ~Interface() {};

  //! Compute RHS given the specified input vector x.  Returns true if computation was successful.
  virtual bool computeF(const Epetra_Vector& x, Epetra_Vector& RHS, FillType flag = F) = 0;
  
  //! Compute Jacobian given the specified input vector x.  Returns true if computation was successful.
  virtual bool computeJacobian(const Epetra_Vector& x, Epetra_Operator& Jac) = 0;

  //! Compute the Epetra_RowMatrix M, that will be used by the Aztec preconditioner instead of the Jacobian.  This is used when there is no explicit Jacobian present (i.e. Matrix-Free Newton-Krylov).  This MUST BE an Epetra_RowMatrix since the Aztec preconditioners need to know the sparsity pattern of the matrix.  Returns true if computation was successful.
  virtual bool computePrecMatrix(const Epetra_Vector& x, Epetra_RowMatrix& M) = 0;

  //! Computes a user supplied preconditioner based on input vector x.  Returns true if computation was successful.
  virtual bool computePreconditioner(const Epetra_Vector& x, Epetra_Operator& M) = 0;

};
} // namespace Epetra
} // namespace NOX

#endif
