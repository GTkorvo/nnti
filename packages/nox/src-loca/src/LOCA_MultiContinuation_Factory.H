// $Id$
// $Source$

//@HEADER
// ************************************************************************
//
//                  LOCA Continuation Algorithm Package
//                 Copyright (2005) Sandia Corporation
//
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
//
// This library is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of the
// License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA
// Questions? Contact Andy Salinger (agsalin@sandia.gov) or Eric Phipps
// (etphipp@sandia.gov), Sandia National Laboratories.
//
// ************************************************************************
//@HEADER

#ifndef LOCA_MULTICONTINUATION_FACTORY_H
#define LOCA_MULTICONTINUATION_FACTORY_H

#include "Teuchos_RefCountPtr.hpp"

// forward declarations
namespace NOX {
  namespace Parameter {
    class List;
  }
}
namespace LOCA {
  class GlobalData;
  namespace Parameter {
    class SublistParser;
  }
  namespace MultiContinuation {
    class AbstractStrategy;
    class AbstractGroup;
  }
  namespace MultiPredictor {
    class AbstractStrategy;
  }
}

namespace LOCA {

  namespace MultiContinuation {

    //! Factory for creating continuation strategy objects
    /*!
     * The parameters passed to the create() through the \c stepperParams
     * argument method should specify the "Continuation Method" as described 
     * below, as well as any additional parameters for the particular strategy.
     * <ul>
     * <li> "Continuation Method" - Name of the continuation method. Valid 
     *      choices are
     *   <ul>
     *   <li> "Natural" (LOCA::MultiContinuation::NaturalGroup) [Default]
     *   <li> "Arc Length" (LOCA::MultiContinuation::ArcLengthGroup)
     *   </ul>
     * </ul>
     */
    class Factory {

    public:

      //! Constructor
      Factory(const Teuchos::RefCountPtr<LOCA::GlobalData>& global_data);

      //! Destructor
      virtual ~Factory();

      //! Create continuation strategy
      /*!
       * \param topParams [in] Parsed top-level parameter list.  
       * \param stepperParams [in] Stepper parameters as described above
       * \param grp [in] Underlying group
       * \param pred [in] Predictor strategy
       * \param paramIDs [in] Indicies of continuation parameters
       */
      Teuchos::RefCountPtr<LOCA::MultiContinuation::AbstractStrategy>
      create(
      const Teuchos::RefCountPtr<LOCA::Parameter::SublistParser>& topParams,
      const Teuchos::RefCountPtr<NOX::Parameter::List>& stepperParams,
      const Teuchos::RefCountPtr<LOCA::MultiContinuation::AbstractGroup>& grp,
      const Teuchos::RefCountPtr<LOCA::MultiPredictor::AbstractStrategy>& pred,
      const vector<int>& paramIDs);

    private:

      //! Private to prohibit copying
      Factory(const Factory&);

      //! Private to prohibit copying
      Factory& operator = (const Factory&);

    protected:

      //! Global data
      Teuchos::RefCountPtr<LOCA::GlobalData> globalData;

    }; // Class Factory

  } // Namespace MultiContinuation

} // Namespace LOCA

#endif // LOCA_EIGENSOLVER_FACTORY_H
