#if(0)
//@HEADER
// ************************************************************************
// 
//            NOX: An Object-Oriented Nonlinear Solver Package
//                 Copyright (2002) Sandia Corporation
// 
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
// 
// This library is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of the
// License, or (at your option) any later version.
//  
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//                                                                                 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA                                                                                
// Questions? Contact Tammy Kolda (tgkolda@sandia.gov) or Roger Pawlowski
// (rppawlo@sandia.gov), Sandia National Laboratories.
// 
// ************************************************************************
//@HEADER

// Finite Element Problem Class
/* Provides function (F) and Jacobian evaluations for the following equation 
 * via a 1D linear finite element discretization with Epetra objects.
 *
 * d2u 
 * --- - k * u**2 = 0
 * dx2
 *
 * subject to @ x=0, u=1
 */

#ifndef _NOX_EXAMPLE_EPETRA_NONLINEAR_FINITEELEMENTPROBLEM_H
#define _NOX_EXAMPLE_EPETRA_NONLINEAR_FINITEELEMENTPROBLEM_H

#include "NOX_EpetraNew_Interface_Required.H"

// Forward Declarations
class Epetra_Comm;
class Epetra_Map; 
class Epetra_Vector;
class Epetra_Import;
class Epetra_CrsGraph;
class Epetra_CrsMatrix;

// Flag to tell the evaluate routine what objects to fill
enum Type {F_ONLY, MATRIX_ONLY, ALL}; 

// Finite Element Problem Class
class FiniteElementProblem { 

public:

  // Constructor
  FiniteElementProblem(int NumGlobalElements, Epetra_Comm& Comm);
  
  // Destructor
  ~FiniteElementProblem();

  // Reset problem for next parameter (time) step.
  // For now, this simply updates oldsoln with the given Epetra_Vector
  bool reset(const Epetra_Vector& x);
  
  // Set initial condition for solution vector
  bool initializeSoln();
  
  // Evaluates the function (F) and/or the Jacobian using the solution 
  // values in solnVector.
  bool evaluate( NOX::EpetraNew::Interface::Required::FillType fillType,
                 const Epetra_Vector *solnVector, Epetra_Vector *rhsVector);

  // Return a reference to the Epetra_Vector with the exact analytic solution
  Epetra_Vector& getExactSoln(double time);
  
  // Return a reference to the Epetra_Vector with the initial guess
  // that is generated by the FiniteElementProblem class.
  Epetra_Vector& getSolution();
  
  // Return a reference to the Epetra_Vector with the Jacobian
  // that is generated by the FiniteElementProblem class.
  Epetra_CrsMatrix& getJacobian();

  // Return a reference to the Epetra_CrsGraph upon which the Jacobian 
  // is based.
  Epetra_CrsGraph& getGraph();

  // Return a reference to the Epetra_Vector with the mesh positions
  Epetra_Vector& getMesh();
  
  // Accesor function for time step
  double getdt();
  
  // Return a reference to the Epetra_Vector with the old solution
  Epetra_Vector& getOldSoln();
  
private:

  // inserts the global column indices into the Graph
  Epetra_CrsGraph& generateGraph(Epetra_CrsGraph& AA);

private:

  double xFactor; 
  double viscosity; 
  double xmin; 
  double xmax; 
  double dx; 
  double dt; 

  Type flag;
  Epetra_Map *StandardMap; 
  Epetra_Map *OverlapMap;
  Epetra_Import *Importer;
  Epetra_Vector *xptr;
  Epetra_Vector *initialSolution;
  Epetra_Vector *oldsoln;
  Epetra_Vector *rhs;
  Epetra_Vector *exactsoln;
  Epetra_CrsGraph *AA;
  Epetra_CrsMatrix *A;
  Epetra_Comm *Comm;

  int MyPID;              // Process number
  int NumProc;            // Total number of processes
  int NumMyElements;      // Number of elements owned by this process
  int NumGlobalElements;  // Total Number of elements
  int OverlapNumMyElements;//Number of overlap elements owned by this proc
  int OverlapMinMyGID;    // Min gloal global overlap element on this proc

};
#endif




#endif
