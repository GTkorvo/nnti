// Finite Element Problem Class
/* Provides function (F) and Jacobian evaluations for the following equation 
 * via a 1D linear finite element discretization with Epetra objects.
 *
 * d2u 
 * --- - k * u**2 = 0
 * dx2
 *
 * subject to @ x=0, u=1
 */

#ifndef TEST_EPETRA_1DFEM_INTERFACE_H
#define TEST_EPETRA_1DFEM_INTERFACE_H

#include "NOX_Epetra_Interface.H" // base class

// Forward Declarations
class Epetra_Comm;
class Epetra_Map; 
class Epetra_Vector;
class Epetra_Import;
class Epetra_Operator;
class Epetra_CrsGraph;
class Epetra_RowMatrix;
class Epetra_CrsMatrix;

// Finite Element Problem Class
class Interface : public NOX::Epetra::Interface { 

public:

  // Constructor
  Interface(int NumGlobalElements, Epetra_Comm& Comm);
  
  // Destructor
  ~Interface();

  bool computeF(const Epetra_Vector& x, Epetra_Vector& FVec, 
		FillType fillType = F);
  bool computeJacobian(const Epetra_Vector& x, Epetra_Operator& Jac);
  bool computePrecMatrix(const Epetra_Vector& x, Epetra_RowMatrix& M);
  bool computePreconditioner(const Epetra_Vector& x, Epetra_Operator& M);


  // Return a reference to the Epetra_Vector with the initial guess
  // that is generated by the Interface class.
  Epetra_Vector& getSolution();
  
  // Return a reference to the Epetra_CrsMatrix with the Jacobian
  // that is generated by the Interface class.
  Epetra_CrsMatrix& getJacobian();

private:

  // Evaluates the function (F) and/or the Jacobian using the solution 
  // values in solnVector.
  bool evaluate(FillType f, const Epetra_Vector *solnVector, 
		Epetra_Vector *rhsVector, Epetra_RowMatrix *matrix);

  // Inserts the global column indices into the Graph
  bool createGraph();

private:

  enum TargetObjectType {FUNCTION, JACOBIAN};

  Epetra_Comm* Comm;
  Epetra_Map* StandardMap; 
  Epetra_Map* OverlapMap;
  Epetra_Import* Importer;
  Epetra_Vector* initialSolution;
  Epetra_Vector* rhs;
  Epetra_CrsGraph* Graph;
  Epetra_CrsMatrix* Jacobian;

  int NumGlobalElements;  // Total Number of elements
  int NumMyElements;      // Number of elements owned by this process
  int MyPID;              // Process number
  int NumProc;            // Total number of processes

};

//==================================================================
// Finite Element Basis Object
class Basis {

 public:
  // Constructor
  Basis();

  // Destructor
  ~Basis();

  // Calculates the values of u and x at the specified gauss point
  void computeBasis(int gp, double *x, double *u);

 public:
  // Variables that are calculated at the gauss point
  double *phi, *dphide; 
  double uu, xx, duu, eta, wt;
  double dx;
};

#endif




